
fuelSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000555c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005830  08005830  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005830  08005830  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005830  08005830  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  080058a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080058a8  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c9b  00000000  00000000  00042560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016233  00000000  00000000  000471fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0005d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d00  00000000  00000000  0005e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b763  00000000  00000000  000603c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027657  00000000  00000000  0007bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a624  00000000  00000000  000a317a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d79e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004260  00000000  00000000  0013d7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080055fc 	.word	0x080055fc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080055fc 	.word	0x080055fc

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cfrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0008      	movs	r0, r1
 8000418:	4661      	mov	r1, ip
 800041a:	e7ff      	b.n	800041c <__aeabi_cfcmpeq>

0800041c <__aeabi_cfcmpeq>:
 800041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041e:	f000 f8b7 	bl	8000590 <__lesf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	d401      	bmi.n	800042a <__aeabi_cfcmpeq+0xe>
 8000426:	2100      	movs	r1, #0
 8000428:	42c8      	cmn	r0, r1
 800042a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800042c <__aeabi_fcmpeq>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f843 	bl	80004b8 <__eqsf2>
 8000432:	4240      	negs	r0, r0
 8000434:	3001      	adds	r0, #1
 8000436:	bd10      	pop	{r4, pc}

08000438 <__aeabi_fcmplt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f8a9 	bl	8000590 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	db01      	blt.n	8000446 <__aeabi_fcmplt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmple>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f89f 	bl	8000590 <__lesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dd01      	ble.n	800045a <__aeabi_fcmple+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpgt>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 f84f 	bl	8000504 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dc01      	bgt.n	800046e <__aeabi_fcmpgt+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_fcmpge>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 f845 	bl	8000504 <__gesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	da01      	bge.n	8000482 <__aeabi_fcmpge+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_f2uiz>:
 8000488:	219e      	movs	r1, #158	; 0x9e
 800048a:	b510      	push	{r4, lr}
 800048c:	05c9      	lsls	r1, r1, #23
 800048e:	1c04      	adds	r4, r0, #0
 8000490:	f7ff fff0 	bl	8000474 <__aeabi_fcmpge>
 8000494:	2800      	cmp	r0, #0
 8000496:	d103      	bne.n	80004a0 <__aeabi_f2uiz+0x18>
 8000498:	1c20      	adds	r0, r4, #0
 800049a:	f000 fb91 	bl	8000bc0 <__aeabi_f2iz>
 800049e:	bd10      	pop	{r4, pc}
 80004a0:	219e      	movs	r1, #158	; 0x9e
 80004a2:	1c20      	adds	r0, r4, #0
 80004a4:	05c9      	lsls	r1, r1, #23
 80004a6:	f000 f9dd 	bl	8000864 <__aeabi_fsub>
 80004aa:	f000 fb89 	bl	8000bc0 <__aeabi_f2iz>
 80004ae:	2380      	movs	r3, #128	; 0x80
 80004b0:	061b      	lsls	r3, r3, #24
 80004b2:	469c      	mov	ip, r3
 80004b4:	4460      	add	r0, ip
 80004b6:	e7f2      	b.n	800049e <__aeabi_f2uiz+0x16>

080004b8 <__eqsf2>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0042      	lsls	r2, r0, #1
 80004bc:	0245      	lsls	r5, r0, #9
 80004be:	024e      	lsls	r6, r1, #9
 80004c0:	004c      	lsls	r4, r1, #1
 80004c2:	0fc3      	lsrs	r3, r0, #31
 80004c4:	0a6d      	lsrs	r5, r5, #9
 80004c6:	2001      	movs	r0, #1
 80004c8:	0e12      	lsrs	r2, r2, #24
 80004ca:	0a76      	lsrs	r6, r6, #9
 80004cc:	0e24      	lsrs	r4, r4, #24
 80004ce:	0fc9      	lsrs	r1, r1, #31
 80004d0:	2aff      	cmp	r2, #255	; 0xff
 80004d2:	d006      	beq.n	80004e2 <__eqsf2+0x2a>
 80004d4:	2cff      	cmp	r4, #255	; 0xff
 80004d6:	d003      	beq.n	80004e0 <__eqsf2+0x28>
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d101      	bne.n	80004e0 <__eqsf2+0x28>
 80004dc:	42b5      	cmp	r5, r6
 80004de:	d006      	beq.n	80004ee <__eqsf2+0x36>
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d1fc      	bne.n	80004e0 <__eqsf2+0x28>
 80004e6:	2cff      	cmp	r4, #255	; 0xff
 80004e8:	d1fa      	bne.n	80004e0 <__eqsf2+0x28>
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d1f8      	bne.n	80004e0 <__eqsf2+0x28>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d006      	beq.n	8000500 <__eqsf2+0x48>
 80004f2:	2001      	movs	r0, #1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d1f3      	bne.n	80004e0 <__eqsf2+0x28>
 80004f8:	0028      	movs	r0, r5
 80004fa:	1e43      	subs	r3, r0, #1
 80004fc:	4198      	sbcs	r0, r3
 80004fe:	e7ef      	b.n	80004e0 <__eqsf2+0x28>
 8000500:	2000      	movs	r0, #0
 8000502:	e7ed      	b.n	80004e0 <__eqsf2+0x28>

08000504 <__gesf2>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	0042      	lsls	r2, r0, #1
 8000508:	0245      	lsls	r5, r0, #9
 800050a:	024e      	lsls	r6, r1, #9
 800050c:	004c      	lsls	r4, r1, #1
 800050e:	0fc3      	lsrs	r3, r0, #31
 8000510:	0a6d      	lsrs	r5, r5, #9
 8000512:	0e12      	lsrs	r2, r2, #24
 8000514:	0a76      	lsrs	r6, r6, #9
 8000516:	0e24      	lsrs	r4, r4, #24
 8000518:	0fc8      	lsrs	r0, r1, #31
 800051a:	2aff      	cmp	r2, #255	; 0xff
 800051c:	d01b      	beq.n	8000556 <__gesf2+0x52>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d00e      	beq.n	8000540 <__gesf2+0x3c>
 8000522:	2a00      	cmp	r2, #0
 8000524:	d11b      	bne.n	800055e <__gesf2+0x5a>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d101      	bne.n	800052e <__gesf2+0x2a>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d01c      	beq.n	8000568 <__gesf2+0x64>
 800052e:	2d00      	cmp	r5, #0
 8000530:	d00c      	beq.n	800054c <__gesf2+0x48>
 8000532:	4283      	cmp	r3, r0
 8000534:	d01c      	beq.n	8000570 <__gesf2+0x6c>
 8000536:	2102      	movs	r1, #2
 8000538:	1e58      	subs	r0, r3, #1
 800053a:	4008      	ands	r0, r1
 800053c:	3801      	subs	r0, #1
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	2e00      	cmp	r6, #0
 8000542:	d122      	bne.n	800058a <__gesf2+0x86>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d1f4      	bne.n	8000532 <__gesf2+0x2e>
 8000548:	2d00      	cmp	r5, #0
 800054a:	d1f2      	bne.n	8000532 <__gesf2+0x2e>
 800054c:	2800      	cmp	r0, #0
 800054e:	d1f6      	bne.n	800053e <__gesf2+0x3a>
 8000550:	2001      	movs	r0, #1
 8000552:	4240      	negs	r0, r0
 8000554:	e7f3      	b.n	800053e <__gesf2+0x3a>
 8000556:	2d00      	cmp	r5, #0
 8000558:	d117      	bne.n	800058a <__gesf2+0x86>
 800055a:	2cff      	cmp	r4, #255	; 0xff
 800055c:	d0f0      	beq.n	8000540 <__gesf2+0x3c>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d1e7      	bne.n	8000532 <__gesf2+0x2e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d1e5      	bne.n	8000532 <__gesf2+0x2e>
 8000566:	e7e6      	b.n	8000536 <__gesf2+0x32>
 8000568:	2000      	movs	r0, #0
 800056a:	2d00      	cmp	r5, #0
 800056c:	d0e7      	beq.n	800053e <__gesf2+0x3a>
 800056e:	e7e2      	b.n	8000536 <__gesf2+0x32>
 8000570:	42a2      	cmp	r2, r4
 8000572:	dc05      	bgt.n	8000580 <__gesf2+0x7c>
 8000574:	dbea      	blt.n	800054c <__gesf2+0x48>
 8000576:	42b5      	cmp	r5, r6
 8000578:	d802      	bhi.n	8000580 <__gesf2+0x7c>
 800057a:	d3e7      	bcc.n	800054c <__gesf2+0x48>
 800057c:	2000      	movs	r0, #0
 800057e:	e7de      	b.n	800053e <__gesf2+0x3a>
 8000580:	4243      	negs	r3, r0
 8000582:	4158      	adcs	r0, r3
 8000584:	0040      	lsls	r0, r0, #1
 8000586:	3801      	subs	r0, #1
 8000588:	e7d9      	b.n	800053e <__gesf2+0x3a>
 800058a:	2002      	movs	r0, #2
 800058c:	4240      	negs	r0, r0
 800058e:	e7d6      	b.n	800053e <__gesf2+0x3a>

08000590 <__lesf2>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0245      	lsls	r5, r0, #9
 8000596:	024e      	lsls	r6, r1, #9
 8000598:	004c      	lsls	r4, r1, #1
 800059a:	0fc3      	lsrs	r3, r0, #31
 800059c:	0a6d      	lsrs	r5, r5, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a76      	lsrs	r6, r6, #9
 80005a2:	0e24      	lsrs	r4, r4, #24
 80005a4:	0fc8      	lsrs	r0, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d00b      	beq.n	80005c2 <__lesf2+0x32>
 80005aa:	2cff      	cmp	r4, #255	; 0xff
 80005ac:	d00d      	beq.n	80005ca <__lesf2+0x3a>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d11f      	bne.n	80005f2 <__lesf2+0x62>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d116      	bne.n	80005e4 <__lesf2+0x54>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d114      	bne.n	80005e4 <__lesf2+0x54>
 80005ba:	2000      	movs	r0, #0
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d010      	beq.n	80005e2 <__lesf2+0x52>
 80005c0:	e009      	b.n	80005d6 <__lesf2+0x46>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d10c      	bne.n	80005e0 <__lesf2+0x50>
 80005c6:	2cff      	cmp	r4, #255	; 0xff
 80005c8:	d113      	bne.n	80005f2 <__lesf2+0x62>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d108      	bne.n	80005e0 <__lesf2+0x50>
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d008      	beq.n	80005e4 <__lesf2+0x54>
 80005d2:	4283      	cmp	r3, r0
 80005d4:	d012      	beq.n	80005fc <__lesf2+0x6c>
 80005d6:	2102      	movs	r1, #2
 80005d8:	1e58      	subs	r0, r3, #1
 80005da:	4008      	ands	r0, r1
 80005dc:	3801      	subs	r0, #1
 80005de:	e000      	b.n	80005e2 <__lesf2+0x52>
 80005e0:	2002      	movs	r0, #2
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d1f4      	bne.n	80005d2 <__lesf2+0x42>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d1fa      	bne.n	80005e2 <__lesf2+0x52>
 80005ec:	2001      	movs	r0, #1
 80005ee:	4240      	negs	r0, r0
 80005f0:	e7f7      	b.n	80005e2 <__lesf2+0x52>
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d1ed      	bne.n	80005d2 <__lesf2+0x42>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d1eb      	bne.n	80005d2 <__lesf2+0x42>
 80005fa:	e7ec      	b.n	80005d6 <__lesf2+0x46>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	dc05      	bgt.n	800060c <__lesf2+0x7c>
 8000600:	dbf2      	blt.n	80005e8 <__lesf2+0x58>
 8000602:	42b5      	cmp	r5, r6
 8000604:	d802      	bhi.n	800060c <__lesf2+0x7c>
 8000606:	d3ef      	bcc.n	80005e8 <__lesf2+0x58>
 8000608:	2000      	movs	r0, #0
 800060a:	e7ea      	b.n	80005e2 <__lesf2+0x52>
 800060c:	4243      	negs	r3, r0
 800060e:	4158      	adcs	r0, r3
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	3801      	subs	r0, #1
 8000614:	e7e5      	b.n	80005e2 <__lesf2+0x52>
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__aeabi_fmul>:
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	464f      	mov	r7, r9
 800061c:	4646      	mov	r6, r8
 800061e:	46d6      	mov	lr, sl
 8000620:	0244      	lsls	r4, r0, #9
 8000622:	0045      	lsls	r5, r0, #1
 8000624:	b5c0      	push	{r6, r7, lr}
 8000626:	0a64      	lsrs	r4, r4, #9
 8000628:	1c0f      	adds	r7, r1, #0
 800062a:	0e2d      	lsrs	r5, r5, #24
 800062c:	0fc6      	lsrs	r6, r0, #31
 800062e:	2d00      	cmp	r5, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fmul+0x1c>
 8000632:	e08d      	b.n	8000750 <__aeabi_fmul+0x138>
 8000634:	2dff      	cmp	r5, #255	; 0xff
 8000636:	d100      	bne.n	800063a <__aeabi_fmul+0x22>
 8000638:	e092      	b.n	8000760 <__aeabi_fmul+0x148>
 800063a:	2300      	movs	r3, #0
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	4699      	mov	r9, r3
 8000640:	469a      	mov	sl, r3
 8000642:	00e4      	lsls	r4, r4, #3
 8000644:	04c0      	lsls	r0, r0, #19
 8000646:	4304      	orrs	r4, r0
 8000648:	3d7f      	subs	r5, #127	; 0x7f
 800064a:	0278      	lsls	r0, r7, #9
 800064c:	0a43      	lsrs	r3, r0, #9
 800064e:	4698      	mov	r8, r3
 8000650:	007b      	lsls	r3, r7, #1
 8000652:	0e1b      	lsrs	r3, r3, #24
 8000654:	0fff      	lsrs	r7, r7, #31
 8000656:	2b00      	cmp	r3, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fmul+0x44>
 800065a:	e070      	b.n	800073e <__aeabi_fmul+0x126>
 800065c:	2bff      	cmp	r3, #255	; 0xff
 800065e:	d100      	bne.n	8000662 <__aeabi_fmul+0x4a>
 8000660:	e086      	b.n	8000770 <__aeabi_fmul+0x158>
 8000662:	4642      	mov	r2, r8
 8000664:	00d0      	lsls	r0, r2, #3
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	3b7f      	subs	r3, #127	; 0x7f
 800066a:	18ed      	adds	r5, r5, r3
 800066c:	2300      	movs	r3, #0
 800066e:	04d2      	lsls	r2, r2, #19
 8000670:	4302      	orrs	r2, r0
 8000672:	4690      	mov	r8, r2
 8000674:	469c      	mov	ip, r3
 8000676:	0031      	movs	r1, r6
 8000678:	464b      	mov	r3, r9
 800067a:	4079      	eors	r1, r7
 800067c:	1c68      	adds	r0, r5, #1
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d81c      	bhi.n	80006bc <__aeabi_fmul+0xa4>
 8000682:	4a76      	ldr	r2, [pc, #472]	; (800085c <__aeabi_fmul+0x244>)
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	58d3      	ldr	r3, [r2, r3]
 8000688:	469f      	mov	pc, r3
 800068a:	0039      	movs	r1, r7
 800068c:	4644      	mov	r4, r8
 800068e:	46e2      	mov	sl, ip
 8000690:	4653      	mov	r3, sl
 8000692:	2b02      	cmp	r3, #2
 8000694:	d00f      	beq.n	80006b6 <__aeabi_fmul+0x9e>
 8000696:	2b03      	cmp	r3, #3
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x84>
 800069a:	e0d7      	b.n	800084c <__aeabi_fmul+0x234>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d137      	bne.n	8000710 <__aeabi_fmul+0xf8>
 80006a0:	2000      	movs	r0, #0
 80006a2:	2400      	movs	r4, #0
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	4320      	orrs	r0, r4
 80006a8:	07c9      	lsls	r1, r1, #31
 80006aa:	4308      	orrs	r0, r1
 80006ac:	bce0      	pop	{r5, r6, r7}
 80006ae:	46ba      	mov	sl, r7
 80006b0:	46b1      	mov	r9, r6
 80006b2:	46a8      	mov	r8, r5
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	2400      	movs	r4, #0
 80006ba:	e7f3      	b.n	80006a4 <__aeabi_fmul+0x8c>
 80006bc:	0c26      	lsrs	r6, r4, #16
 80006be:	0424      	lsls	r4, r4, #16
 80006c0:	0c22      	lsrs	r2, r4, #16
 80006c2:	4644      	mov	r4, r8
 80006c4:	0424      	lsls	r4, r4, #16
 80006c6:	0c24      	lsrs	r4, r4, #16
 80006c8:	4643      	mov	r3, r8
 80006ca:	0027      	movs	r7, r4
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	4357      	muls	r7, r2
 80006d0:	4374      	muls	r4, r6
 80006d2:	435a      	muls	r2, r3
 80006d4:	435e      	muls	r6, r3
 80006d6:	1912      	adds	r2, r2, r4
 80006d8:	0c3b      	lsrs	r3, r7, #16
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	429c      	cmp	r4, r3
 80006de:	d903      	bls.n	80006e8 <__aeabi_fmul+0xd0>
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0252      	lsls	r2, r2, #9
 80006e4:	4694      	mov	ip, r2
 80006e6:	4466      	add	r6, ip
 80006e8:	043f      	lsls	r7, r7, #16
 80006ea:	041a      	lsls	r2, r3, #16
 80006ec:	0c3f      	lsrs	r7, r7, #16
 80006ee:	19d2      	adds	r2, r2, r7
 80006f0:	0194      	lsls	r4, r2, #6
 80006f2:	1e67      	subs	r7, r4, #1
 80006f4:	41bc      	sbcs	r4, r7
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	0e92      	lsrs	r2, r2, #26
 80006fa:	199b      	adds	r3, r3, r6
 80006fc:	4314      	orrs	r4, r2
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	431c      	orrs	r4, r3
 8000702:	011b      	lsls	r3, r3, #4
 8000704:	d400      	bmi.n	8000708 <__aeabi_fmul+0xf0>
 8000706:	e09b      	b.n	8000840 <__aeabi_fmul+0x228>
 8000708:	2301      	movs	r3, #1
 800070a:	0862      	lsrs	r2, r4, #1
 800070c:	401c      	ands	r4, r3
 800070e:	4314      	orrs	r4, r2
 8000710:	0002      	movs	r2, r0
 8000712:	327f      	adds	r2, #127	; 0x7f
 8000714:	2a00      	cmp	r2, #0
 8000716:	dd64      	ble.n	80007e2 <__aeabi_fmul+0x1ca>
 8000718:	0763      	lsls	r3, r4, #29
 800071a:	d004      	beq.n	8000726 <__aeabi_fmul+0x10e>
 800071c:	230f      	movs	r3, #15
 800071e:	4023      	ands	r3, r4
 8000720:	2b04      	cmp	r3, #4
 8000722:	d000      	beq.n	8000726 <__aeabi_fmul+0x10e>
 8000724:	3404      	adds	r4, #4
 8000726:	0123      	lsls	r3, r4, #4
 8000728:	d503      	bpl.n	8000732 <__aeabi_fmul+0x11a>
 800072a:	0002      	movs	r2, r0
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <__aeabi_fmul+0x248>)
 800072e:	3280      	adds	r2, #128	; 0x80
 8000730:	401c      	ands	r4, r3
 8000732:	2afe      	cmp	r2, #254	; 0xfe
 8000734:	dcbf      	bgt.n	80006b6 <__aeabi_fmul+0x9e>
 8000736:	01a4      	lsls	r4, r4, #6
 8000738:	0a64      	lsrs	r4, r4, #9
 800073a:	b2d0      	uxtb	r0, r2
 800073c:	e7b2      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800073e:	4643      	mov	r3, r8
 8000740:	2b00      	cmp	r3, #0
 8000742:	d13d      	bne.n	80007c0 <__aeabi_fmul+0x1a8>
 8000744:	464a      	mov	r2, r9
 8000746:	3301      	adds	r3, #1
 8000748:	431a      	orrs	r2, r3
 800074a:	4691      	mov	r9, r2
 800074c:	469c      	mov	ip, r3
 800074e:	e792      	b.n	8000676 <__aeabi_fmul+0x5e>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d129      	bne.n	80007a8 <__aeabi_fmul+0x190>
 8000754:	2304      	movs	r3, #4
 8000756:	4699      	mov	r9, r3
 8000758:	3b03      	subs	r3, #3
 800075a:	2500      	movs	r5, #0
 800075c:	469a      	mov	sl, r3
 800075e:	e774      	b.n	800064a <__aeabi_fmul+0x32>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d11b      	bne.n	800079c <__aeabi_fmul+0x184>
 8000764:	2308      	movs	r3, #8
 8000766:	4699      	mov	r9, r3
 8000768:	3b06      	subs	r3, #6
 800076a:	25ff      	movs	r5, #255	; 0xff
 800076c:	469a      	mov	sl, r3
 800076e:	e76c      	b.n	800064a <__aeabi_fmul+0x32>
 8000770:	4643      	mov	r3, r8
 8000772:	35ff      	adds	r5, #255	; 0xff
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10b      	bne.n	8000790 <__aeabi_fmul+0x178>
 8000778:	2302      	movs	r3, #2
 800077a:	464a      	mov	r2, r9
 800077c:	431a      	orrs	r2, r3
 800077e:	4691      	mov	r9, r2
 8000780:	469c      	mov	ip, r3
 8000782:	e778      	b.n	8000676 <__aeabi_fmul+0x5e>
 8000784:	4653      	mov	r3, sl
 8000786:	0031      	movs	r1, r6
 8000788:	2b02      	cmp	r3, #2
 800078a:	d000      	beq.n	800078e <__aeabi_fmul+0x176>
 800078c:	e783      	b.n	8000696 <__aeabi_fmul+0x7e>
 800078e:	e792      	b.n	80006b6 <__aeabi_fmul+0x9e>
 8000790:	2303      	movs	r3, #3
 8000792:	464a      	mov	r2, r9
 8000794:	431a      	orrs	r2, r3
 8000796:	4691      	mov	r9, r2
 8000798:	469c      	mov	ip, r3
 800079a:	e76c      	b.n	8000676 <__aeabi_fmul+0x5e>
 800079c:	230c      	movs	r3, #12
 800079e:	4699      	mov	r9, r3
 80007a0:	3b09      	subs	r3, #9
 80007a2:	25ff      	movs	r5, #255	; 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e750      	b.n	800064a <__aeabi_fmul+0x32>
 80007a8:	0020      	movs	r0, r4
 80007aa:	f000 fa6b 	bl	8000c84 <__clzsi2>
 80007ae:	2576      	movs	r5, #118	; 0x76
 80007b0:	1f43      	subs	r3, r0, #5
 80007b2:	409c      	lsls	r4, r3
 80007b4:	2300      	movs	r3, #0
 80007b6:	426d      	negs	r5, r5
 80007b8:	4699      	mov	r9, r3
 80007ba:	469a      	mov	sl, r3
 80007bc:	1a2d      	subs	r5, r5, r0
 80007be:	e744      	b.n	800064a <__aeabi_fmul+0x32>
 80007c0:	4640      	mov	r0, r8
 80007c2:	f000 fa5f 	bl	8000c84 <__clzsi2>
 80007c6:	4642      	mov	r2, r8
 80007c8:	1f43      	subs	r3, r0, #5
 80007ca:	409a      	lsls	r2, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	1a2d      	subs	r5, r5, r0
 80007d0:	4690      	mov	r8, r2
 80007d2:	469c      	mov	ip, r3
 80007d4:	3d76      	subs	r5, #118	; 0x76
 80007d6:	e74e      	b.n	8000676 <__aeabi_fmul+0x5e>
 80007d8:	2480      	movs	r4, #128	; 0x80
 80007da:	2100      	movs	r1, #0
 80007dc:	20ff      	movs	r0, #255	; 0xff
 80007de:	03e4      	lsls	r4, r4, #15
 80007e0:	e760      	b.n	80006a4 <__aeabi_fmul+0x8c>
 80007e2:	2301      	movs	r3, #1
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	2b1b      	cmp	r3, #27
 80007e8:	dd00      	ble.n	80007ec <__aeabi_fmul+0x1d4>
 80007ea:	e759      	b.n	80006a0 <__aeabi_fmul+0x88>
 80007ec:	0022      	movs	r2, r4
 80007ee:	309e      	adds	r0, #158	; 0x9e
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	4084      	lsls	r4, r0
 80007f4:	0013      	movs	r3, r2
 80007f6:	1e62      	subs	r2, r4, #1
 80007f8:	4194      	sbcs	r4, r2
 80007fa:	431c      	orrs	r4, r3
 80007fc:	0763      	lsls	r3, r4, #29
 80007fe:	d004      	beq.n	800080a <__aeabi_fmul+0x1f2>
 8000800:	230f      	movs	r3, #15
 8000802:	4023      	ands	r3, r4
 8000804:	2b04      	cmp	r3, #4
 8000806:	d000      	beq.n	800080a <__aeabi_fmul+0x1f2>
 8000808:	3404      	adds	r4, #4
 800080a:	0163      	lsls	r3, r4, #5
 800080c:	d51a      	bpl.n	8000844 <__aeabi_fmul+0x22c>
 800080e:	2001      	movs	r0, #1
 8000810:	2400      	movs	r4, #0
 8000812:	e747      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	03c0      	lsls	r0, r0, #15
 8000818:	4204      	tst	r4, r0
 800081a:	d009      	beq.n	8000830 <__aeabi_fmul+0x218>
 800081c:	4643      	mov	r3, r8
 800081e:	4203      	tst	r3, r0
 8000820:	d106      	bne.n	8000830 <__aeabi_fmul+0x218>
 8000822:	4644      	mov	r4, r8
 8000824:	4304      	orrs	r4, r0
 8000826:	0264      	lsls	r4, r4, #9
 8000828:	0039      	movs	r1, r7
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	e739      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	03c0      	lsls	r0, r0, #15
 8000834:	4304      	orrs	r4, r0
 8000836:	0264      	lsls	r4, r4, #9
 8000838:	0031      	movs	r1, r6
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	0a64      	lsrs	r4, r4, #9
 800083e:	e731      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000840:	0028      	movs	r0, r5
 8000842:	e765      	b.n	8000710 <__aeabi_fmul+0xf8>
 8000844:	01a4      	lsls	r4, r4, #6
 8000846:	2000      	movs	r0, #0
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	e72b      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800084c:	2080      	movs	r0, #128	; 0x80
 800084e:	03c0      	lsls	r0, r0, #15
 8000850:	4304      	orrs	r4, r0
 8000852:	0264      	lsls	r4, r4, #9
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	0a64      	lsrs	r4, r4, #9
 8000858:	e724      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08005614 	.word	0x08005614
 8000860:	f7ffffff 	.word	0xf7ffffff

08000864 <__aeabi_fsub>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	46ce      	mov	lr, r9
 8000868:	4647      	mov	r7, r8
 800086a:	0243      	lsls	r3, r0, #9
 800086c:	0a5b      	lsrs	r3, r3, #9
 800086e:	024e      	lsls	r6, r1, #9
 8000870:	00da      	lsls	r2, r3, #3
 8000872:	4694      	mov	ip, r2
 8000874:	0a72      	lsrs	r2, r6, #9
 8000876:	4691      	mov	r9, r2
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	004a      	lsls	r2, r1, #1
 800087c:	b580      	push	{r7, lr}
 800087e:	0e2d      	lsrs	r5, r5, #24
 8000880:	001f      	movs	r7, r3
 8000882:	0fc4      	lsrs	r4, r0, #31
 8000884:	0e12      	lsrs	r2, r2, #24
 8000886:	0fc9      	lsrs	r1, r1, #31
 8000888:	09b6      	lsrs	r6, r6, #6
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d05b      	beq.n	8000946 <__aeabi_fsub+0xe2>
 800088e:	2001      	movs	r0, #1
 8000890:	4041      	eors	r1, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d039      	beq.n	800090a <__aeabi_fsub+0xa6>
 8000896:	1aa8      	subs	r0, r5, r2
 8000898:	2800      	cmp	r0, #0
 800089a:	dd5a      	ble.n	8000952 <__aeabi_fsub+0xee>
 800089c:	2a00      	cmp	r2, #0
 800089e:	d06a      	beq.n	8000976 <__aeabi_fsub+0x112>
 80008a0:	2dff      	cmp	r5, #255	; 0xff
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x42>
 80008a4:	e0d9      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	04d2      	lsls	r2, r2, #19
 80008aa:	4316      	orrs	r6, r2
 80008ac:	281b      	cmp	r0, #27
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_fsub+0x4e>
 80008b0:	e0e9      	b.n	8000a86 <__aeabi_fsub+0x222>
 80008b2:	2001      	movs	r0, #1
 80008b4:	4663      	mov	r3, ip
 80008b6:	1a18      	subs	r0, r3, r0
 80008b8:	0143      	lsls	r3, r0, #5
 80008ba:	d400      	bmi.n	80008be <__aeabi_fsub+0x5a>
 80008bc:	e0b4      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 80008be:	0180      	lsls	r0, r0, #6
 80008c0:	0987      	lsrs	r7, r0, #6
 80008c2:	0038      	movs	r0, r7
 80008c4:	f000 f9de 	bl	8000c84 <__clzsi2>
 80008c8:	3805      	subs	r0, #5
 80008ca:	4087      	lsls	r7, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x6e>
 80008d0:	e0cc      	b.n	8000a6c <__aeabi_fsub+0x208>
 80008d2:	1a2d      	subs	r5, r5, r0
 80008d4:	48b5      	ldr	r0, [pc, #724]	; (8000bac <__aeabi_fsub+0x348>)
 80008d6:	4038      	ands	r0, r7
 80008d8:	0743      	lsls	r3, r0, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008dc:	230f      	movs	r3, #15
 80008de:	4003      	ands	r3, r0
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008e4:	3004      	adds	r0, #4
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fsub+0x88>
 80008ea:	e0a0      	b.n	8000a2e <__aeabi_fsub+0x1ca>
 80008ec:	1c6a      	adds	r2, r5, #1
 80008ee:	2dfe      	cmp	r5, #254	; 0xfe
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x90>
 80008f2:	e08d      	b.n	8000a10 <__aeabi_fsub+0x1ac>
 80008f4:	0180      	lsls	r0, r0, #6
 80008f6:	0a47      	lsrs	r7, r0, #9
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	05d0      	lsls	r0, r2, #23
 80008fc:	4338      	orrs	r0, r7
 80008fe:	07e4      	lsls	r4, r4, #31
 8000900:	4320      	orrs	r0, r4
 8000902:	bcc0      	pop	{r6, r7}
 8000904:	46b9      	mov	r9, r7
 8000906:	46b0      	mov	r8, r6
 8000908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090a:	1aa8      	subs	r0, r5, r2
 800090c:	4680      	mov	r8, r0
 800090e:	2800      	cmp	r0, #0
 8000910:	dd45      	ble.n	800099e <__aeabi_fsub+0x13a>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d070      	beq.n	80009f8 <__aeabi_fsub+0x194>
 8000916:	2dff      	cmp	r5, #255	; 0xff
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0xb8>
 800091a:	e09e      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	431e      	orrs	r6, r3
 8000922:	4643      	mov	r3, r8
 8000924:	2b1b      	cmp	r3, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0xc6>
 8000928:	e0d2      	b.n	8000ad0 <__aeabi_fsub+0x26c>
 800092a:	2001      	movs	r0, #1
 800092c:	4460      	add	r0, ip
 800092e:	0143      	lsls	r3, r0, #5
 8000930:	d57a      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000932:	3501      	adds	r5, #1
 8000934:	2dff      	cmp	r5, #255	; 0xff
 8000936:	d06b      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000938:	2301      	movs	r3, #1
 800093a:	4a9d      	ldr	r2, [pc, #628]	; (8000bb0 <__aeabi_fsub+0x34c>)
 800093c:	4003      	ands	r3, r0
 800093e:	0840      	lsrs	r0, r0, #1
 8000940:	4010      	ands	r0, r2
 8000942:	4318      	orrs	r0, r3
 8000944:	e7c8      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d020      	beq.n	800098c <__aeabi_fsub+0x128>
 800094a:	428c      	cmp	r4, r1
 800094c:	d023      	beq.n	8000996 <__aeabi_fsub+0x132>
 800094e:	0028      	movs	r0, r5
 8000950:	38ff      	subs	r0, #255	; 0xff
 8000952:	2800      	cmp	r0, #0
 8000954:	d039      	beq.n	80009ca <__aeabi_fsub+0x166>
 8000956:	1b57      	subs	r7, r2, r5
 8000958:	2d00      	cmp	r5, #0
 800095a:	d000      	beq.n	800095e <__aeabi_fsub+0xfa>
 800095c:	e09d      	b.n	8000a9a <__aeabi_fsub+0x236>
 800095e:	4663      	mov	r3, ip
 8000960:	2b00      	cmp	r3, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x102>
 8000964:	e0db      	b.n	8000b1e <__aeabi_fsub+0x2ba>
 8000966:	1e7b      	subs	r3, r7, #1
 8000968:	2f01      	cmp	r7, #1
 800096a:	d100      	bne.n	800096e <__aeabi_fsub+0x10a>
 800096c:	e10d      	b.n	8000b8a <__aeabi_fsub+0x326>
 800096e:	2fff      	cmp	r7, #255	; 0xff
 8000970:	d071      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000972:	001f      	movs	r7, r3
 8000974:	e098      	b.n	8000aa8 <__aeabi_fsub+0x244>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fsub+0x118>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x268>
 800097c:	1e42      	subs	r2, r0, #1
 800097e:	2801      	cmp	r0, #1
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x120>
 8000982:	e0e6      	b.n	8000b52 <__aeabi_fsub+0x2ee>
 8000984:	28ff      	cmp	r0, #255	; 0xff
 8000986:	d068      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000988:	0010      	movs	r0, r2
 800098a:	e78f      	b.n	80008ac <__aeabi_fsub+0x48>
 800098c:	2001      	movs	r0, #1
 800098e:	4041      	eors	r1, r0
 8000990:	42a1      	cmp	r1, r4
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x132>
 8000994:	e77f      	b.n	8000896 <__aeabi_fsub+0x32>
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	4240      	negs	r0, r0
 800099a:	4680      	mov	r8, r0
 800099c:	44a8      	add	r8, r5
 800099e:	4640      	mov	r0, r8
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d038      	beq.n	8000a16 <__aeabi_fsub+0x1b2>
 80009a4:	1b51      	subs	r1, r2, r5
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x148>
 80009aa:	e0ae      	b.n	8000b0a <__aeabi_fsub+0x2a6>
 80009ac:	2aff      	cmp	r2, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x14e>
 80009b0:	e0df      	b.n	8000b72 <__aeabi_fsub+0x30e>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	4660      	mov	r0, ip
 80009b6:	04db      	lsls	r3, r3, #19
 80009b8:	4318      	orrs	r0, r3
 80009ba:	4684      	mov	ip, r0
 80009bc:	291b      	cmp	r1, #27
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x15e>
 80009c0:	e0d9      	b.n	8000b76 <__aeabi_fsub+0x312>
 80009c2:	2001      	movs	r0, #1
 80009c4:	0015      	movs	r5, r2
 80009c6:	1980      	adds	r0, r0, r6
 80009c8:	e7b1      	b.n	800092e <__aeabi_fsub+0xca>
 80009ca:	20fe      	movs	r0, #254	; 0xfe
 80009cc:	1c6a      	adds	r2, r5, #1
 80009ce:	4210      	tst	r0, r2
 80009d0:	d171      	bne.n	8000ab6 <__aeabi_fsub+0x252>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fsub+0x174>
 80009d6:	e0a6      	b.n	8000b26 <__aeabi_fsub+0x2c2>
 80009d8:	4663      	mov	r3, ip
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fsub+0x17c>
 80009de:	e0d9      	b.n	8000b94 <__aeabi_fsub+0x330>
 80009e0:	2200      	movs	r2, #0
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fsub+0x184>
 80009e6:	e788      	b.n	80008fa <__aeabi_fsub+0x96>
 80009e8:	1b98      	subs	r0, r3, r6
 80009ea:	0143      	lsls	r3, r0, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fsub+0x18c>
 80009ee:	e0e1      	b.n	8000bb4 <__aeabi_fsub+0x350>
 80009f0:	4663      	mov	r3, ip
 80009f2:	000c      	movs	r4, r1
 80009f4:	1af0      	subs	r0, r6, r3
 80009f6:	e76f      	b.n	80008d8 <__aeabi_fsub+0x74>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x19a>
 80009fc:	e0b7      	b.n	8000b6e <__aeabi_fsub+0x30a>
 80009fe:	0002      	movs	r2, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x1a4>
 8000a06:	e09c      	b.n	8000b42 <__aeabi_fsub+0x2de>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d026      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	e788      	b.n	8000922 <__aeabi_fsub+0xbe>
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	2700      	movs	r7, #0
 8000a14:	e771      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a16:	20fe      	movs	r0, #254	; 0xfe
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	4210      	tst	r0, r2
 8000a1c:	d064      	beq.n	8000ae8 <__aeabi_fsub+0x284>
 8000a1e:	2aff      	cmp	r2, #255	; 0xff
 8000a20:	d0f6      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a22:	0015      	movs	r5, r2
 8000a24:	4466      	add	r6, ip
 8000a26:	0870      	lsrs	r0, r6, #1
 8000a28:	0743      	lsls	r3, r0, #29
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fsub+0x1ca>
 8000a2c:	e756      	b.n	80008dc <__aeabi_fsub+0x78>
 8000a2e:	08c3      	lsrs	r3, r0, #3
 8000a30:	2dff      	cmp	r5, #255	; 0xff
 8000a32:	d012      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	0a5f      	lsrs	r7, r3, #9
 8000a38:	b2ea      	uxtb	r2, r5
 8000a3a:	e75e      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000a42:	e096      	b.n	8000b72 <__aeabi_fsub+0x30e>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d008      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	03d2      	lsls	r2, r2, #15
 8000a4c:	4213      	tst	r3, r2
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a50:	4648      	mov	r0, r9
 8000a52:	4210      	tst	r0, r2
 8000a54:	d101      	bne.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a56:	000c      	movs	r4, r1
 8000a58:	464b      	mov	r3, r9
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0d8      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a5e:	2780      	movs	r7, #128	; 0x80
 8000a60:	03ff      	lsls	r7, r7, #15
 8000a62:	431f      	orrs	r7, r3
 8000a64:	027f      	lsls	r7, r7, #9
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	0a7f      	lsrs	r7, r7, #9
 8000a6a:	e746      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	003a      	movs	r2, r7
 8000a70:	1b45      	subs	r5, r0, r5
 8000a72:	0038      	movs	r0, r7
 8000a74:	3501      	adds	r5, #1
 8000a76:	40ea      	lsrs	r2, r5
 8000a78:	1b5d      	subs	r5, r3, r5
 8000a7a:	40a8      	lsls	r0, r5
 8000a7c:	1e43      	subs	r3, r0, #1
 8000a7e:	4198      	sbcs	r0, r3
 8000a80:	2500      	movs	r5, #0
 8000a82:	4310      	orrs	r0, r2
 8000a84:	e728      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000a86:	2320      	movs	r3, #32
 8000a88:	1a1b      	subs	r3, r3, r0
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	409e      	lsls	r6, r3
 8000a8e:	40c2      	lsrs	r2, r0
 8000a90:	0030      	movs	r0, r6
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	4310      	orrs	r0, r2
 8000a98:	e70c      	b.n	80008b4 <__aeabi_fsub+0x50>
 8000a9a:	2aff      	cmp	r2, #255	; 0xff
 8000a9c:	d0db      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	4660      	mov	r0, ip
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	4684      	mov	ip, r0
 8000aa8:	2f1b      	cmp	r7, #27
 8000aaa:	dd56      	ble.n	8000b5a <__aeabi_fsub+0x2f6>
 8000aac:	2001      	movs	r0, #1
 8000aae:	000c      	movs	r4, r1
 8000ab0:	0015      	movs	r5, r2
 8000ab2:	1a30      	subs	r0, r6, r0
 8000ab4:	e700      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	1b9f      	subs	r7, r3, r6
 8000aba:	017b      	lsls	r3, r7, #5
 8000abc:	d43d      	bmi.n	8000b3a <__aeabi_fsub+0x2d6>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000ac2:	e6fe      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2700      	movs	r7, #0
 8000aca:	e716      	b.n	80008fa <__aeabi_fsub+0x96>
 8000acc:	0005      	movs	r5, r0
 8000ace:	e7af      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ad0:	0032      	movs	r2, r6
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	4641      	mov	r1, r8
 8000ad6:	40da      	lsrs	r2, r3
 8000ad8:	2320      	movs	r3, #32
 8000ada:	1a5b      	subs	r3, r3, r1
 8000adc:	409e      	lsls	r6, r3
 8000ade:	0030      	movs	r0, r6
 8000ae0:	1e43      	subs	r3, r0, #1
 8000ae2:	4198      	sbcs	r0, r3
 8000ae4:	4310      	orrs	r0, r2
 8000ae6:	e721      	b.n	800092c <__aeabi_fsub+0xc8>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1a7      	bne.n	8000a3c <__aeabi_fsub+0x1d8>
 8000aec:	4663      	mov	r3, ip
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d059      	beq.n	8000ba6 <__aeabi_fsub+0x342>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x296>
 8000af8:	e6ff      	b.n	80008fa <__aeabi_fsub+0x96>
 8000afa:	0030      	movs	r0, r6
 8000afc:	4460      	add	r0, ip
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d592      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <__aeabi_fsub+0x348>)
 8000b04:	3501      	adds	r5, #1
 8000b06:	4018      	ands	r0, r3
 8000b08:	e78e      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d047      	beq.n	8000ba0 <__aeabi_fsub+0x33c>
 8000b10:	1e4b      	subs	r3, r1, #1
 8000b12:	2901      	cmp	r1, #1
 8000b14:	d015      	beq.n	8000b42 <__aeabi_fsub+0x2de>
 8000b16:	29ff      	cmp	r1, #255	; 0xff
 8000b18:	d02b      	beq.n	8000b72 <__aeabi_fsub+0x30e>
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	e74e      	b.n	80009bc <__aeabi_fsub+0x158>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	464b      	mov	r3, r9
 8000b22:	003d      	movs	r5, r7
 8000b24:	e784      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b26:	4662      	mov	r2, ip
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d18b      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d192      	bne.n	8000a56 <__aeabi_fsub+0x1f2>
 8000b30:	2780      	movs	r7, #128	; 0x80
 8000b32:	2400      	movs	r4, #0
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	03ff      	lsls	r7, r7, #15
 8000b38:	e6df      	b.n	80008fa <__aeabi_fsub+0x96>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	1af7      	subs	r7, r6, r3
 8000b40:	e6bf      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000b42:	0030      	movs	r0, r6
 8000b44:	4460      	add	r0, ip
 8000b46:	2501      	movs	r5, #1
 8000b48:	0143      	lsls	r3, r0, #5
 8000b4a:	d400      	bmi.n	8000b4e <__aeabi_fsub+0x2ea>
 8000b4c:	e76c      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b4e:	2502      	movs	r5, #2
 8000b50:	e6f2      	b.n	8000938 <__aeabi_fsub+0xd4>
 8000b52:	4663      	mov	r3, ip
 8000b54:	2501      	movs	r5, #1
 8000b56:	1b98      	subs	r0, r3, r6
 8000b58:	e6ae      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	4664      	mov	r4, ip
 8000b5e:	4660      	mov	r0, ip
 8000b60:	40fc      	lsrs	r4, r7
 8000b62:	1bdf      	subs	r7, r3, r7
 8000b64:	40b8      	lsls	r0, r7
 8000b66:	1e43      	subs	r3, r0, #1
 8000b68:	4198      	sbcs	r0, r3
 8000b6a:	4320      	orrs	r0, r4
 8000b6c:	e79f      	b.n	8000aae <__aeabi_fsub+0x24a>
 8000b6e:	0005      	movs	r5, r0
 8000b70:	e75e      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b72:	464b      	mov	r3, r9
 8000b74:	e771      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 8000b76:	2320      	movs	r3, #32
 8000b78:	4665      	mov	r5, ip
 8000b7a:	4660      	mov	r0, ip
 8000b7c:	40cd      	lsrs	r5, r1
 8000b7e:	1a59      	subs	r1, r3, r1
 8000b80:	4088      	lsls	r0, r1
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
 8000b86:	4328      	orrs	r0, r5
 8000b88:	e71c      	b.n	80009c4 <__aeabi_fsub+0x160>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	000c      	movs	r4, r1
 8000b8e:	2501      	movs	r5, #1
 8000b90:	1af0      	subs	r0, r6, r3
 8000b92:	e691      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d095      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000b98:	000c      	movs	r4, r1
 8000b9a:	464f      	mov	r7, r9
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e6ac      	b.n	80008fa <__aeabi_fsub+0x96>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	000d      	movs	r5, r1
 8000ba4:	e744      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	2200      	movs	r2, #0
 8000baa:	e6a6      	b.n	80008fa <__aeabi_fsub+0x96>
 8000bac:	fbffffff 	.word	0xfbffffff
 8000bb0:	7dffffff 	.word	0x7dffffff
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fsub+0x356>
 8000bb8:	e736      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e69c      	b.n	80008fa <__aeabi_fsub+0x96>

08000bc0 <__aeabi_f2iz>:
 8000bc0:	0241      	lsls	r1, r0, #9
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0fc3      	lsrs	r3, r0, #31
 8000bc6:	0a49      	lsrs	r1, r1, #9
 8000bc8:	2000      	movs	r0, #0
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000bce:	dd03      	ble.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000bd2:	dd02      	ble.n	8000bda <__aeabi_f2iz+0x1a>
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <__aeabi_f2iz+0x3c>)
 8000bd6:	1898      	adds	r0, r3, r2
 8000bd8:	4770      	bx	lr
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0400      	lsls	r0, r0, #16
 8000bde:	4301      	orrs	r1, r0
 8000be0:	2a95      	cmp	r2, #149	; 0x95
 8000be2:	dc07      	bgt.n	8000bf4 <__aeabi_f2iz+0x34>
 8000be4:	2096      	movs	r0, #150	; 0x96
 8000be6:	1a82      	subs	r2, r0, r2
 8000be8:	40d1      	lsrs	r1, r2
 8000bea:	4248      	negs	r0, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f3      	bne.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	e7f1      	b.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf4:	3a96      	subs	r2, #150	; 0x96
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	e7f7      	b.n	8000bea <__aeabi_f2iz+0x2a>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7fffffff 	.word	0x7fffffff

08000c00 <__aeabi_ui2f>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	1e05      	subs	r5, r0, #0
 8000c04:	d00e      	beq.n	8000c24 <__aeabi_ui2f+0x24>
 8000c06:	f000 f83d 	bl	8000c84 <__clzsi2>
 8000c0a:	239e      	movs	r3, #158	; 0x9e
 8000c0c:	0004      	movs	r4, r0
 8000c0e:	1a1b      	subs	r3, r3, r0
 8000c10:	2b96      	cmp	r3, #150	; 0x96
 8000c12:	dc0c      	bgt.n	8000c2e <__aeabi_ui2f+0x2e>
 8000c14:	2808      	cmp	r0, #8
 8000c16:	dd01      	ble.n	8000c1c <__aeabi_ui2f+0x1c>
 8000c18:	3c08      	subs	r4, #8
 8000c1a:	40a5      	lsls	r5, r4
 8000c1c:	026d      	lsls	r5, r5, #9
 8000c1e:	0a6d      	lsrs	r5, r5, #9
 8000c20:	b2d8      	uxtb	r0, r3
 8000c22:	e001      	b.n	8000c28 <__aeabi_ui2f+0x28>
 8000c24:	2000      	movs	r0, #0
 8000c26:	2500      	movs	r5, #0
 8000c28:	05c0      	lsls	r0, r0, #23
 8000c2a:	4328      	orrs	r0, r5
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	2b99      	cmp	r3, #153	; 0x99
 8000c30:	dd09      	ble.n	8000c46 <__aeabi_ui2f+0x46>
 8000c32:	0002      	movs	r2, r0
 8000c34:	0029      	movs	r1, r5
 8000c36:	321b      	adds	r2, #27
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	1e4a      	subs	r2, r1, #1
 8000c3c:	4191      	sbcs	r1, r2
 8000c3e:	2205      	movs	r2, #5
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	40d5      	lsrs	r5, r2
 8000c44:	430d      	orrs	r5, r1
 8000c46:	2c05      	cmp	r4, #5
 8000c48:	dc12      	bgt.n	8000c70 <__aeabi_ui2f+0x70>
 8000c4a:	0029      	movs	r1, r5
 8000c4c:	4e0c      	ldr	r6, [pc, #48]	; (8000c80 <__aeabi_ui2f+0x80>)
 8000c4e:	4031      	ands	r1, r6
 8000c50:	076a      	lsls	r2, r5, #29
 8000c52:	d009      	beq.n	8000c68 <__aeabi_ui2f+0x68>
 8000c54:	200f      	movs	r0, #15
 8000c56:	4028      	ands	r0, r5
 8000c58:	2804      	cmp	r0, #4
 8000c5a:	d005      	beq.n	8000c68 <__aeabi_ui2f+0x68>
 8000c5c:	3104      	adds	r1, #4
 8000c5e:	014a      	lsls	r2, r1, #5
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_ui2f+0x68>
 8000c62:	239f      	movs	r3, #159	; 0x9f
 8000c64:	4031      	ands	r1, r6
 8000c66:	1b1b      	subs	r3, r3, r4
 8000c68:	0189      	lsls	r1, r1, #6
 8000c6a:	0a4d      	lsrs	r5, r1, #9
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	e7db      	b.n	8000c28 <__aeabi_ui2f+0x28>
 8000c70:	1f62      	subs	r2, r4, #5
 8000c72:	4095      	lsls	r5, r2
 8000c74:	0029      	movs	r1, r5
 8000c76:	4e02      	ldr	r6, [pc, #8]	; (8000c80 <__aeabi_ui2f+0x80>)
 8000c78:	4031      	ands	r1, r6
 8000c7a:	076a      	lsls	r2, r5, #29
 8000c7c:	d0f4      	beq.n	8000c68 <__aeabi_ui2f+0x68>
 8000c7e:	e7e9      	b.n	8000c54 <__aeabi_ui2f+0x54>
 8000c80:	fbffffff 	.word	0xfbffffff

08000c84 <__clzsi2>:
 8000c84:	211c      	movs	r1, #28
 8000c86:	2301      	movs	r3, #1
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d301      	bcc.n	8000c92 <__clzsi2+0xe>
 8000c8e:	0c00      	lsrs	r0, r0, #16
 8000c90:	3910      	subs	r1, #16
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	4298      	cmp	r0, r3
 8000c96:	d301      	bcc.n	8000c9c <__clzsi2+0x18>
 8000c98:	0a00      	lsrs	r0, r0, #8
 8000c9a:	3908      	subs	r1, #8
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	4298      	cmp	r0, r3
 8000ca0:	d301      	bcc.n	8000ca6 <__clzsi2+0x22>
 8000ca2:	0900      	lsrs	r0, r0, #4
 8000ca4:	3904      	subs	r1, #4
 8000ca6:	a202      	add	r2, pc, #8	; (adr r2, 8000cb0 <__clzsi2+0x2c>)
 8000ca8:	5c10      	ldrb	r0, [r2, r0]
 8000caa:	1840      	adds	r0, r0, r1
 8000cac:	4770      	bx	lr
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	02020304 	.word	0x02020304
 8000cb4:	01010101 	.word	0x01010101
	...

08000cc0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cc0:	b530      	push	{r4, r5, lr}
 8000cc2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	a801      	add	r0, sp, #4
 8000cca:	f003 fcb7 	bl	800463c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cce:	4c33      	ldr	r4, [pc, #204]	; (8000d9c <MX_ADC1_Init+0xdc>)
 8000cd0:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <MX_ADC1_Init+0xe0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000cd2:	2280      	movs	r2, #128	; 0x80
  hadc1.Instance = ADC1;
 8000cd4:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cd6:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000cd8:	0612      	lsls	r2, r2, #24
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000cda:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cdc:	05db      	lsls	r3, r3, #23
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000cde:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ce0:	2208      	movs	r2, #8
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce2:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce4:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ce6:	6162      	str	r2, [r4, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ce8:	1962      	adds	r2, r4, r5
 8000cea:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	00d2      	lsls	r2, r2, #3
 8000cf0:	6262      	str	r2, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cf2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cf4:	0022      	movs	r2, r4
 8000cf6:	322c      	adds	r2, #44	; 0x2c
 8000cf8:	7015      	strb	r5, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	0152      	lsls	r2, r2, #5
 8000cfe:	6322      	str	r2, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000d00:	2207      	movs	r2, #7
 8000d02:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000d04:	0022      	movs	r2, r4
 8000d06:	323c      	adds	r2, #60	; 0x3c
 8000d08:	7015      	strb	r5, [r2, #0]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000d0a:	221c      	movs	r2, #28
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0c:	0020      	movs	r0, r4
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000d0e:	6422      	str	r2, [r4, #64]	; 0x40
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d10:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8000d12:	32e4      	adds	r2, #228	; 0xe4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d16:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d18:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	61e5      	str	r5, [r4, #28]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8000d1c:	6462      	str	r2, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000d1e:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d20:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d22:	f000 fd9d 	bl	8001860 <HAL_ADC_Init>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fab9 	bl	80012a0 <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2e:	0020      	movs	r0, r4
 8000d30:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_0;
 8000d32:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d34:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	f000 fefb 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000d3e:	f000 faaf 	bl	80012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_ADC1_Init+0xe4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	0020      	movs	r0, r4
 8000d46:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_1;
 8000d48:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	f000 fef1 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d52:	f000 faa5 	bl	80012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_ADC1_Init+0xe8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d58:	0020      	movs	r0, r4
 8000d5a:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d5c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	f000 fee7 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d66:	f000 fa9b 	bl	80012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_ADC1_Init+0xec>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6c:	0020      	movs	r0, r4
 8000d6e:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d70:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d72:	f000 fedd 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000d7a:	f000 fa91 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f001 f8ec 	bl	8001f5c <HAL_ADCEx_Calibration_Start>

  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_value, ADC_DMA_FULL_BUFFER_SIZE) != HAL_OK) {
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0020      	movs	r0, r4
 8000d88:	4909      	ldr	r1, [pc, #36]	; (8000db0 <MX_ADC1_Init+0xf0>)
 8000d8a:	f001 f853 	bl	8001e34 <HAL_ADC_Start_DMA>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0xd6>
      Error_Handler();
 8000d92:	f000 fa85 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8000d96:	b005      	add	sp, #20
 8000d98:	bd30      	pop	{r4, r5, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	200001d0 	.word	0x200001d0
 8000da0:	40012400 	.word	0x40012400
 8000da4:	04000002 	.word	0x04000002
 8000da8:	b0001000 	.word	0xb0001000
 8000dac:	b4002000 	.word	0xb4002000
 8000db0:	200000ce 	.word	0x200000ce

08000db4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	0005      	movs	r5, r0
 8000db8:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	2214      	movs	r2, #20
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	a803      	add	r0, sp, #12
 8000dc0:	f003 fc3c 	bl	800463c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	2218      	movs	r2, #24
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	a808      	add	r0, sp, #32
 8000dca:	f003 fc37 	bl	800463c <memset>
  if(adcHandle->Instance==ADC1)
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_ADC_MspInit+0xa8>)
 8000dd0:	682a      	ldr	r2, [r5, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d13f      	bne.n	8000e56 <HAL_ADC_MspInit+0xa2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dd6:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dde:	f002 fa61 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0x36>
    {
      Error_Handler();
 8000de6:	f000 fa5b 	bl	80012a0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_ADC_MspInit+0xac>)
 8000dee:	0340      	lsls	r0, r0, #13
 8000df0:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AN_BOARD_REV_Pin|AN_PERSONALITY_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8000df4:	4301      	orrs	r1, r0
 8000df6:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	4002      	ands	r2, r0
 8000dfe:	9201      	str	r2, [sp, #4]
 8000e00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	400b      	ands	r3, r1
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AN_BOARD_REV_Pin|AN_PERSONALITY_ID_Pin;
 8000e14:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = AN_BOARD_REV_Pin|AN_PERSONALITY_ID_Pin;
 8000e18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f001 fabd 	bl	800239c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e22:	4c10      	ldr	r4, [pc, #64]	; (8000e64 <HAL_ADC_MspInit+0xb0>)
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_ADC_MspInit+0xb4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e26:	0020      	movs	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8000e28:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	337b      	adds	r3, #123	; 0x7b
 8000e30:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e32:	3380      	adds	r3, #128	; 0x80
 8000e34:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e3c:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3e:	60a6      	str	r6, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	60e6      	str	r6, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e42:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e44:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e46:	f001 f9ad 	bl	80021a4 <HAL_DMA_Init>
 8000e4a:	42b0      	cmp	r0, r6
 8000e4c:	d001      	beq.n	8000e52 <HAL_ADC_MspInit+0x9e>
    {
      Error_Handler();
 8000e4e:	f000 fa27 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e52:	652c      	str	r4, [r5, #80]	; 0x50
 8000e54:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e56:	b00e      	add	sp, #56	; 0x38
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40012400 	.word	0x40012400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20000234 	.word	0x20000234
 8000e68:	40020008 	.word	0x40020008

08000e6c <ADC_Calculate>:

/* USER CODE BEGIN 1 */
/* ADC value process routine
 *
 */
void ADC_Calculate(adcToken target, uint8_t offset) {
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t sum = 0;
    uint16_t min = 4095;
    uint16_t max = 0;
 8000e6e:	2500      	movs	r5, #0

    uint16_t *pointerA = &adc_value[offset + target];
 8000e70:	1809      	adds	r1, r1, r0
 8000e72:	004b      	lsls	r3, r1, #1
 8000e74:	4930      	ldr	r1, [pc, #192]	; (8000f38 <ADC_Calculate+0xcc>)
    uint16_t min = 4095;
 8000e76:	4e31      	ldr	r6, [pc, #196]	; (8000f3c <ADC_Calculate+0xd0>)
    uint16_t *pointerA = &adc_value[offset + target];
 8000e78:	185b      	adds	r3, r3, r1
    adcDataType *pointerB = &adc[target].data;

    for (int i = 0; i < ADC_INTERRUPT_SAMPLE_COUNT; i++) {
 8000e7a:	001f      	movs	r7, r3
    uint16_t sum = 0;
 8000e7c:	0029      	movs	r1, r5
 8000e7e:	3780      	adds	r7, #128	; 0x80
    	sum += *pointerA;
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	1851      	adds	r1, r2, r1
 8000e84:	b289      	uxth	r1, r1

        if (min > *pointerA) {
 8000e86:	1c14      	adds	r4, r2, #0
 8000e88:	42b2      	cmp	r2, r6
 8000e8a:	d900      	bls.n	8000e8e <ADC_Calculate+0x22>
 8000e8c:	1c34      	adds	r4, r6, #0
 8000e8e:	b2a6      	uxth	r6, r4
        	min = *pointerA;
        }

        if (max < *pointerA) {
 8000e90:	1c14      	adds	r4, r2, #0
 8000e92:	42aa      	cmp	r2, r5
 8000e94:	d200      	bcs.n	8000e98 <ADC_Calculate+0x2c>
 8000e96:	1c2c      	adds	r4, r5, #0
        	max = *pointerA;
        }

        pointerA += ADC_CHANNEL_COUNT;
 8000e98:	3308      	adds	r3, #8
 8000e9a:	b2a5      	uxth	r5, r4
    for (int i = 0; i < ADC_INTERRUPT_SAMPLE_COUNT; i++) {
 8000e9c:	429f      	cmp	r7, r3
 8000e9e:	d1ef      	bne.n	8000e80 <ADC_Calculate+0x14>
    }
    pointerB->raw = sum;
 8000ea0:	4c27      	ldr	r4, [pc, #156]	; (8000f40 <ADC_Calculate+0xd4>)
 8000ea2:	0102      	lsls	r2, r0, #4
 8000ea4:	18a2      	adds	r2, r4, r2
    pointerB->ripple = max - min;
 8000ea6:	1bad      	subs	r5, r5, r6
    pointerB->raw = sum;
 8000ea8:	8151      	strh	r1, [r2, #10]
    pointerB->ripple = max - min;
 8000eaa:	8115      	strh	r5, [r2, #8]

    switch (target) {
 8000eac:	2803      	cmp	r0, #3
 8000eae:	d83e      	bhi.n	8000f2e <ADC_Calculate+0xc2>
 8000eb0:	f7ff f926 	bl	8000100 <__gnu_thumb1_case_uqi>
 8000eb4:	020f2933 	.word	0x020f2933
		case ADC_INTERNAL_VREF:
			pointerB->voltage = ADC_VREF * ADC_INTERRUPT_SAMPLE_COUNT * ADC_VREFINT_CAL / pointerB->raw;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <ADC_Calculate+0xd8>)
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <ADC_Calculate+0xdc>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	4358      	muls	r0, r3
 8000ec0:	f7ff f9bc 	bl	800023c <__divsi3>

    if (1) {
		#ifdef DEBUG_STATE
        switch (target) {
			case ADC_INTERNAL_VREF:
				printf("VDDA %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000ec4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
			pointerB->voltage = ADC_VREF * ADC_INTERRUPT_SAMPLE_COUNT * ADC_VREFINT_CAL / pointerB->raw;
 8000ec6:	0001      	movs	r1, r0
 8000ec8:	6320      	str	r0, [r4, #48]	; 0x30
				printf("VDDA %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <ADC_Calculate+0xe0>)
				break;
    		case ADC_PERSONALITY_ID:
    			printf("PERSONALITY %ddmV %d\n", pointerB->voltage, pointerB->ripple);
    			break;
			case ADC_BOARD_REV:
				printf("BOARD REV %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000ecc:	f003 fbbe 	bl	800464c <iprintf>
			default:
				Error_Handler();
        }
		#endif
    }
}
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ADC_DECI_MILLI_VOLTAGE;
 8000ed2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ed4:	4348      	muls	r0, r1
 8000ed6:	491e      	ldr	r1, [pc, #120]	; (8000f50 <ADC_Calculate+0xe4>)
 8000ed8:	f7ff f9b0 	bl	800023c <__divsi3>
			pointerB->temperature = (pointerB->voltage - ADC_VREF * ADC_TS_CAL1 / 4095)  * 2 / 5 + 300;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <ADC_Calculate+0xe8>)
			ADC_DECI_MILLI_VOLTAGE;
 8000ede:	6220      	str	r0, [r4, #32]
			pointerB->temperature = (pointerB->voltage - ADC_VREF * ADC_TS_CAL1 / 4095)  * 2 / 5 + 300;
 8000ee0:	881b      	ldrh	r3, [r3, #0]
			ADC_DECI_MILLI_VOLTAGE;
 8000ee2:	0005      	movs	r5, r0
			pointerB->temperature = (pointerB->voltage - ADC_VREF * ADC_TS_CAL1 / 4095)  * 2 / 5 + 300;
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <ADC_Calculate+0xec>)
 8000ee6:	491d      	ldr	r1, [pc, #116]	; (8000f5c <ADC_Calculate+0xf0>)
 8000ee8:	4358      	muls	r0, r3
 8000eea:	f7ff f9a7 	bl	800023c <__divsi3>
 8000eee:	1940      	adds	r0, r0, r5
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	0040      	lsls	r0, r0, #1
 8000ef4:	f7ff f9a2 	bl	800023c <__divsi3>
 8000ef8:	0001      	movs	r1, r0
 8000efa:	312d      	adds	r1, #45	; 0x2d
 8000efc:	31ff      	adds	r1, #255	; 0xff
				printf("TEMP %ddC %d\n", pointerB->temperature, pointerB->ripple);
 8000efe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <ADC_Calculate+0xf4>)
			pointerB->temperature = (pointerB->voltage - ADC_VREF * ADC_TS_CAL1 / 4095)  * 2 / 5 + 300;
 8000f02:	6261      	str	r1, [r4, #36]	; 0x24
				printf("TEMP %ddC %d\n", pointerB->temperature, pointerB->ripple);
 8000f04:	e7e2      	b.n	8000ecc <ADC_Calculate+0x60>
			ADC_DECI_MILLI_VOLTAGE;
 8000f06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f08:	4348      	muls	r0, r1
 8000f0a:	4911      	ldr	r1, [pc, #68]	; (8000f50 <ADC_Calculate+0xe4>)
 8000f0c:	f7ff f996 	bl	800023c <__divsi3>
    			printf("PERSONALITY %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000f10:	8b22      	ldrh	r2, [r4, #24]
			ADC_DECI_MILLI_VOLTAGE;
 8000f12:	0001      	movs	r1, r0
 8000f14:	6120      	str	r0, [r4, #16]
    			printf("PERSONALITY %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <ADC_Calculate+0xf8>)
 8000f18:	e7d8      	b.n	8000ecc <ADC_Calculate+0x60>
			ADC_DECI_MILLI_VOLTAGE;
 8000f1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f1c:	4348      	muls	r0, r1
 8000f1e:	490c      	ldr	r1, [pc, #48]	; (8000f50 <ADC_Calculate+0xe4>)
 8000f20:	f7ff f98c 	bl	800023c <__divsi3>
				printf("BOARD REV %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000f24:	8922      	ldrh	r2, [r4, #8]
			ADC_DECI_MILLI_VOLTAGE;
 8000f26:	0001      	movs	r1, r0
 8000f28:	6020      	str	r0, [r4, #0]
				printf("BOARD REV %ddmV %d\n", pointerB->voltage, pointerB->ripple);
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <ADC_Calculate+0xfc>)
 8000f2c:	e7ce      	b.n	8000ecc <ADC_Calculate+0x60>
			Error_Handler();
 8000f2e:	f000 f9b7 	bl	80012a0 <Error_Handler>
				Error_Handler();
 8000f32:	f000 f9b5 	bl	80012a0 <Error_Handler>
}
 8000f36:	e7cb      	b.n	8000ed0 <ADC_Calculate+0x64>
 8000f38:	200000ce 	.word	0x200000ce
 8000f3c:	00000fff 	.word	0x00000fff
 8000f40:	2000008c 	.word	0x2000008c
 8000f44:	1fff75aa 	.word	0x1fff75aa
 8000f48:	00075300 	.word	0x00075300
 8000f4c:	08005654 	.word	0x08005654
 8000f50:	0000fff0 	.word	0x0000fff0
 8000f54:	1fff75a8 	.word	0x1fff75a8
 8000f58:	00007530 	.word	0x00007530
 8000f5c:	fffff001 	.word	0xfffff001
 8000f60:	08005663 	.word	0x08005663
 8000f64:	08005671 	.word	0x08005671
 8000f68:	08005687 	.word	0x08005687

08000f6c <HAL_ADC_ConvCpltCallback>:

/* callback function for DMA, this function called when DMA peripheral fills whole defined buffer.
 * this function is triggered every 2 seconds
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hdma_adc1) {
 8000f6c:	b510      	push	{r4, lr}
	if (adcPendingWorkState == ADC_JOB_PENDING_NO) {
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_ADC_ConvCpltCallback+0x10>
		adcPendingWorkState = ADC_JOB_PENDING_SECOND_HALF;
 8000f76:	3202      	adds	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
	} else {
		Error_Handler();
	}
}
 8000f7a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000f7c:	f000 f990 	bl	80012a0 <Error_Handler>
}
 8000f80:	e7fb      	b.n	8000f7a <HAL_ADC_ConvCpltCallback+0xe>
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	200000cc 	.word	0x200000cc

08000f88 <HAL_ADC_ConvHalfCpltCallback>:

/* callback function for DMA, this function called when DMA peripheral fills half of defined buffer.
 * this function is triggered every 2 seconds
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hdma_adc1) {
 8000f88:	b510      	push	{r4, lr}
	if (adcPendingWorkState == ADC_JOB_PENDING_NO) {
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_ADC_ConvHalfCpltCallback+0x10>
		adcPendingWorkState = ADC_JOB_PENDING_FIRST_HALF;
 8000f92:	3201      	adds	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	} else {
		Error_Handler();
	}
}
 8000f96:	bd10      	pop	{r4, pc}
		Error_Handler();
 8000f98:	f000 f982 	bl	80012a0 <Error_Handler>
}
 8000f9c:	e7fb      	b.n	8000f96 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	200000cc 	.word	0x200000cc

08000fa4 <ADC_Sequence>:
}

/* When ADC data ready by DMA following sequence will run
 *
 */
void ADC_Sequence(int offset) {
 8000fa4:	b510      	push	{r4, lr}
	// Following function call sequence is important! Don't change
	ADC_Calculate(ADC_INTERNAL_VREF, offset);
 8000fa6:	b2c4      	uxtb	r4, r0
 8000fa8:	0021      	movs	r1, r4
 8000faa:	2003      	movs	r0, #3
 8000fac:	f7ff ff5e 	bl	8000e6c <ADC_Calculate>
	ADC_Calculate(ADC_INTERNAL_TEMP, offset);
 8000fb0:	0021      	movs	r1, r4
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff ff5a 	bl	8000e6c <ADC_Calculate>
	ADC_Calculate(ADC_BOARD_REV, offset);
 8000fb8:	0021      	movs	r1, r4
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ff56 	bl	8000e6c <ADC_Calculate>
	ADC_Calculate(ADC_PERSONALITY_ID, offset);
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ff52 	bl	8000e6c <ADC_Calculate>
}
 8000fc8:	bd10      	pop	{r4, pc}
	...

08000fcc <ADC_Task>:

/* ---------------------Round Robin Task Function---------------------
 *
 */
bool ADC_Task(void) {
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	2400      	movs	r4, #0
	if (adcPendingWorkState == ADC_JOB_PENDING_FIRST_HALF) {
 8000fd0:	4d06      	ldr	r5, [pc, #24]	; (8000fec <ADC_Task+0x20>)
		ADC_Sequence(0);
 8000fd2:	0020      	movs	r0, r4
	if (adcPendingWorkState == ADC_JOB_PENDING_FIRST_HALF) {
 8000fd4:	782e      	ldrb	r6, [r5, #0]
 8000fd6:	2e01      	cmp	r6, #1
 8000fd8:	d002      	beq.n	8000fe0 <ADC_Task+0x14>

		adcPendingWorkState = ADC_JOB_PENDING_NO;
		return true;
	} else if (adcPendingWorkState == ADC_JOB_PENDING_SECOND_HALF) {
 8000fda:	2e02      	cmp	r6, #2
 8000fdc:	d104      	bne.n	8000fe8 <ADC_Task+0x1c>
		ADC_Sequence(ADC_DMA_HALF_BUFFER_SIZE);
 8000fde:	2040      	movs	r0, #64	; 0x40
 8000fe0:	f7ff ffe0 	bl	8000fa4 <ADC_Sequence>

		adcPendingWorkState = ADC_JOB_PENDING_NO;
 8000fe4:	702c      	strb	r4, [r5, #0]
		return true;
 8000fe6:	2401      	movs	r4, #1
	}

	return false;
}
 8000fe8:	0020      	movs	r0, r4
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	200000cc 	.word	0x200000cc

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <MX_DMA_Init+0x28>)
 8000ff6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000ff8:	4301      	orrs	r1, r0
 8000ffa:	6391      	str	r1, [r2, #56]	; 0x38
 8000ffc:	6b93      	ldr	r3, [r2, #56]	; 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001000:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001004:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001006:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001008:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800100a:	f001 f841 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100e:	2009      	movs	r0, #9
 8001010:	f001 f868 	bl	80020e4 <HAL_NVIC_EnableIRQ>

}
 8001014:	bd07      	pop	{r0, r1, r2, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40021000 	.word	0x40021000

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	2214      	movs	r2, #20
 8001022:	2100      	movs	r1, #0
 8001024:	a803      	add	r0, sp, #12
 8001026:	f003 fb09 	bl	800463c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2002      	movs	r0, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2501      	movs	r5, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8001030:	24c0      	movs	r4, #192	; 0xc0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 8001032:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_GPIO_Init+0xa8>)
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8001036:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 800103a:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4301      	orrs	r1, r0
 800103e:	6359      	str	r1, [r3, #52]	; 0x34
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8001042:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4002      	ands	r2, r0
 8001046:	9200      	str	r2, [sp, #0]
 8001048:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 800104c:	481e      	ldr	r0, [pc, #120]	; (80010c8 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	433a      	orrs	r2, r7
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	403a      	ands	r2, r7
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	432a      	orrs	r2, r5
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
 8001060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8001062:	002a      	movs	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	402b      	ands	r3, r5
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 800106a:	f001 fa45 	bl	80024f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 800106e:	002a      	movs	r2, r5
 8001070:	0039      	movs	r1, r7
 8001072:	0030      	movs	r0, r6
 8001074:	f001 fa40 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin;
 8001078:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	a903      	add	r1, sp, #12
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f001 f989 	bl	800239c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800108a:	0030      	movs	r0, r6
 800108c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 800108e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001096:	f001 f981 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_HARDWARE_INTERRUPT_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109e:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a2:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80010a4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f001 f977 	bl	800239c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80010ae:	0022      	movs	r2, r4
 80010b0:	0021      	movs	r1, r4
 80010b2:	2006      	movs	r0, #6
 80010b4:	f000 ffec 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80010b8:	2006      	movs	r0, #6
 80010ba:	f001 f813 	bl	80020e4 <HAL_NVIC_EnableIRQ>

}
 80010be:	b009      	add	sp, #36	; 0x24
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	40021000 	.word	0x40021000
 80010c8:	50000800 	.word	0x50000800

080010cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010cc:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_I2C1_Init+0x50>)
 80010d0:	4c13      	ldr	r4, [pc, #76]	; (8001120 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x00303D5B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80010d4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00303D5B;
 80010da:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010dc:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010de:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e2:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e4:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e6:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e8:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	f001 fb8e 	bl	800280c <HAL_I2C_Init>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 80010f4:	f000 f8d4 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	0020      	movs	r0, r4
 80010fc:	f001 fd00 	bl	8002b00 <HAL_I2CEx_ConfigAnalogFilter>
 8001100:	2800      	cmp	r0, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001104:	f000 f8cc 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f001 fd1e 	bl	8002b4c <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	2800      	cmp	r0, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 f8c4 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001118:	bd10      	pop	{r4, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	40005400 	.word	0x40005400
 8001120:	20000290 	.word	0x20000290
 8001124:	00303d5b 	.word	0x00303d5b

08001128 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001128:	b510      	push	{r4, lr}
 800112a:	0004      	movs	r4, r0
 800112c:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	2214      	movs	r2, #20
 8001130:	2100      	movs	r1, #0
 8001132:	a803      	add	r0, sp, #12
 8001134:	f003 fa82 	bl	800463c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	2218      	movs	r2, #24
 800113a:	2100      	movs	r1, #0
 800113c:	a808      	add	r0, sp, #32
 800113e:	f003 fa7d 	bl	800463c <memset>
  if(i2cHandle->Instance==I2C1)
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_I2C_MspInit+0x78>)
 8001144:	6822      	ldr	r2, [r4, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d127      	bne.n	800119a <HAL_I2C_MspInit+0x72>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800114a:	2320      	movs	r3, #32
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800114e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f002 f8a8 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	2800      	cmp	r0, #0
 8001156:	d001      	beq.n	800115c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001158:	f000 f8a2 	bl	80012a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	2102      	movs	r1, #2
 800115e:	4c11      	ldr	r4, [pc, #68]	; (80011a4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001164:	430a      	orrs	r2, r1
 8001166:	6362      	str	r2, [r4, #52]	; 0x34
 8001168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800116a:	400b      	ands	r3, r1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001170:	23c0      	movs	r3, #192	; 0xc0
 8001172:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001174:	3bae      	subs	r3, #174	; 0xae
 8001176:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001180:	3306      	adds	r3, #6
 8001182:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f001 f90a 	bl	800239c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800118c:	0389      	lsls	r1, r1, #14
 800118e:	430a      	orrs	r2, r1
 8001190:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001194:	400b      	ands	r3, r1
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119a:	b00e      	add	sp, #56	; 0x38
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	50000400 	.word	0x50000400

080011ac <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_IWDG_Init+0x24>)
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_IWDG_Init+0x28>)
{
 80011b0:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 80011b2:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80011b4:	2301      	movs	r3, #1
 80011b6:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_IWDG_Init+0x2c>)
 80011ba:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 3999;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_IWDG_Init+0x30>)
 80011be:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011c0:	f001 fce8 	bl	8002b94 <HAL_IWDG_Init>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_IWDG_Init+0x20>
  {
    Error_Handler();
 80011c8:	f000 f86a 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011cc:	bd10      	pop	{r4, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	200002e4 	.word	0x200002e4
 80011d4:	40003000 	.word	0x40003000
 80011d8:	00000fff 	.word	0x00000fff
 80011dc:	00000f9f 	.word	0x00000f9f

080011e0 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 80011e0:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__io_putchar+0x14>)
int __io_putchar(int ch) {
 80011e4:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80011e6:	2201      	movs	r2, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <__io_putchar+0x18>)
 80011ea:	a901      	add	r1, sp, #4
 80011ec:	f002 fe7c 	bl	8003ee8 <HAL_UART_Transmit>
    return ch;
}
 80011f0:	9801      	ldr	r0, [sp, #4]
 80011f2:	bd0e      	pop	{r1, r2, r3, pc}
 80011f4:	0000ffff 	.word	0x0000ffff
 80011f8:	200003a4 	.word	0x200003a4

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b500      	push	{lr}
 80011fe:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001200:	2234      	movs	r2, #52	; 0x34
 8001202:	2100      	movs	r1, #0
 8001204:	a805      	add	r0, sp, #20
 8001206:	f003 fa19 	bl	800463c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120a:	2100      	movs	r1, #0
 800120c:	2210      	movs	r2, #16
 800120e:	a801      	add	r0, sp, #4
 8001210:	f003 fa14 	bl	800463c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2080      	movs	r0, #128	; 0x80
 8001216:	0080      	lsls	r0, r0, #2
 8001218:	f001 fcf6 	bl	8002c08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800121c:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001220:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	33f6      	adds	r3, #246	; 0xf6
 8001224:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001226:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800122c:	3a3f      	subs	r2, #63	; 0x3f
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800122e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001230:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001232:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f001 fd14 	bl	8002c60 <HAL_RCC_OscConfig>
 8001238:	1e01      	subs	r1, r0, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800123e:	e7fe      	b.n	800123e <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001242:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001248:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124c:	f001 ff68 	bl	8003120 <HAL_RCC_ClockConfig>
 8001250:	2800      	cmp	r0, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x5c>
 8001254:	b672      	cpsid	i
    while (1) {
 8001256:	e7fe      	b.n	8001256 <SystemClock_Config+0x5a>
}
 8001258:	b013      	add	sp, #76	; 0x4c
 800125a:	bd00      	pop	{pc}

0800125c <main>:
{
 800125c:	b510      	push	{r4, lr}
  HAL_Init();
 800125e:	f000 fabb 	bl	80017d8 <HAL_Init>
  SystemClock_Config();
 8001262:	f7ff ffcb 	bl	80011fc <SystemClock_Config>
  MX_GPIO_Init();
 8001266:	f7ff fed9 	bl	800101c <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f7ff fec1 	bl	8000ff0 <MX_DMA_Init>
  MX_IWDG_Init();
 800126e:	f7ff ff9d 	bl	80011ac <MX_IWDG_Init>
  MX_I2C1_Init();
 8001272:	f7ff ff2b 	bl	80010cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001276:	f000 f9e7 	bl	8001648 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800127a:	f7ff fd21 	bl	8000cc0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800127e:	f000 f88b 	bl	8001398 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001282:	f000 f927 	bl	80014d4 <MX_TIM3_Init>
    tofInit();
 8001286:	f000 f9a5 	bl	80015d4 <tofInit>
    	HAL_IWDG_Refresh(&hiwdg);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <main+0x40>)
 800128c:	f001 fcb4 	bl	8002bf8 <HAL_IWDG_Refresh>
    	tofTask();
 8001290:	f000 f9c0 	bl	8001614 <tofTask>
    	ADC_Task();
 8001294:	f7ff fe9a 	bl	8000fcc <ADC_Task>
    while (1) {
 8001298:	e7f7      	b.n	800128a <main+0x2e>
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	200002e4 	.word	0x200002e4

080012a0 <Error_Handler>:
 80012a0:	b672      	cpsid	i
    while (1) {
 80012a2:	e7fe      	b.n	80012a2 <Error_Handler+0x2>

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2001      	movs	r0, #1
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_MspInit+0x34>)
 80012aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80012ac:	4301      	orrs	r1, r0
 80012ae:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4002      	ands	r2, r0
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80012be:	3007      	adds	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	430a      	orrs	r2, r1
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c6:	400b      	ands	r3, r1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80012cc:	f000 fabc 	bl	8001848 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f000 fab9 	bl	8001848 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bd07      	pop	{r0, r1, r2, pc}
 80012d8:	40021000 	.word	0x40021000

080012dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler>

080012de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler>

080012e0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 fa8b 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bd10      	pop	{r4, pc}

080012ec <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80012ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_HARDWARE_INTERRUPT_Pin);
 80012ee:	2008      	movs	r0, #8
 80012f0:	f001 f90a 	bl	8002508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80012f4:	bd10      	pop	{r4, pc}
	...

080012f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012fa:	4802      	ldr	r0, [pc, #8]	; (8001304 <DMA1_Channel1_IRQHandler+0xc>)
 80012fc:	f000 fffa 	bl	80022f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001300:	bd10      	pop	{r4, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	20000234 	.word	0x20000234

08001308 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	000e      	movs	r6, r1
 800130c:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2500      	movs	r5, #0
 8001310:	42a5      	cmp	r5, r4
 8001312:	db01      	blt.n	8001318 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001314:	0020      	movs	r0, r4
 8001316:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001318:	e000      	b.n	800131c <_read+0x14>
 800131a:	bf00      	nop
 800131c:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	3501      	adds	r5, #1
 8001320:	e7f6      	b.n	8001310 <_read+0x8>

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b570      	push	{r4, r5, r6, lr}
 8001324:	000e      	movs	r6, r1
 8001326:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	2500      	movs	r5, #0
 800132a:	42a5      	cmp	r5, r4
 800132c:	db01      	blt.n	8001332 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800132e:	0020      	movs	r0, r4
 8001330:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001332:	5d70      	ldrb	r0, [r6, r5]
 8001334:	f7ff ff54 	bl	80011e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	3501      	adds	r5, #1
 800133a:	e7f6      	b.n	800132a <_write+0x8>

0800133c <_close>:

int _close(int file)
{
	return -1;
 800133c:	2001      	movs	r0, #1
}
 800133e:	4240      	negs	r0, r0
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	019b      	lsls	r3, r3, #6
	return 0;
}
 8001346:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001348:	604b      	str	r3, [r1, #4]
}
 800134a:	4770      	bx	lr

0800134c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800134c:	2001      	movs	r0, #1
 800134e:	4770      	bx	lr

08001350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001350:	2000      	movs	r0, #0
 8001352:	4770      	bx	lr

08001354 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <_sbrk+0x30>)
 8001356:	490c      	ldr	r1, [pc, #48]	; (8001388 <_sbrk+0x34>)
{
 8001358:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <_sbrk+0x38>)
{
 800135e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001360:	6810      	ldr	r0, [r2, #0]
 8001362:	2800      	cmp	r0, #0
 8001364:	d101      	bne.n	800136a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <_sbrk+0x3c>)
 8001368:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	6810      	ldr	r0, [r2, #0]
 800136c:	18c3      	adds	r3, r0, r3
 800136e:	428b      	cmp	r3, r1
 8001370:	d906      	bls.n	8001380 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001372:	f003 f939 	bl	80045e8 <__errno>
 8001376:	230c      	movs	r3, #12
 8001378:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800137a:	2001      	movs	r0, #1
 800137c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800137e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001380:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001382:	e7fc      	b.n	800137e <_sbrk+0x2a>
 8001384:	00000400 	.word	0x00000400
 8001388:	20002000 	.word	0x20002000
 800138c:	200002f4 	.word	0x200002f4
 8001390:	20000450 	.word	0x20000450

08001394 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	4770      	bx	lr
	...

08001398 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139c:	2210      	movs	r2, #16
 800139e:	2100      	movs	r1, #0
 80013a0:	a804      	add	r0, sp, #16
 80013a2:	f003 f94b 	bl	800463c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	220c      	movs	r2, #12
 80013a8:	2100      	movs	r1, #0
 80013aa:	a801      	add	r0, sp, #4
 80013ac:	f003 f946 	bl	800463c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b0:	4c17      	ldr	r4, [pc, #92]	; (8001410 <MX_TIM1_Init+0x78>)
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_TIM1_Init+0x7c>)
  htim1.Init.Prescaler = 999;
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <MX_TIM1_Init+0x80>)
  htim1.Instance = TIM1;
 80013b6:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	2300      	movs	r3, #0
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ba:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 999;
 80013bc:	6062      	str	r2, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 999;
 80013c0:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c8:	f002 f99a 	bl	8003700 <HAL_TIM_Base_Init>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x3c>
  {
    Error_Handler();
 80013d0:	f7ff ff66 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d6:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013da:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013de:	f002 faaf 	bl	8003940 <HAL_TIM_ConfigClockSource>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x52>
  {
    Error_Handler();
 80013e6:	f7ff ff5b 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013ea:	2280      	movs	r2, #128	; 0x80
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ec:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013ee:	0392      	lsls	r2, r2, #14
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f0:	0020      	movs	r0, r4
 80013f2:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013f6:	9202      	str	r2, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fa:	f002 fbc5 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001402:	f7ff ff4d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8001406:	0020      	movs	r0, r4
 8001408:	f002 f90e 	bl	8003628 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800140c:	b008      	add	sp, #32
 800140e:	bd10      	pop	{r4, pc}
 8001410:	200002f8 	.word	0x200002f8
 8001414:	40012c00 	.word	0x40012c00
 8001418:	000003e7 	.word	0x000003e7

0800141c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800141c:	6803      	ldr	r3, [r0, #0]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_TIM_Base_MspInit+0x3c>)
{
 8001420:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001426:	2080      	movs	r0, #128	; 0x80
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <HAL_TIM_Base_MspInit+0x40>)
 800142a:	0100      	lsls	r0, r0, #4
 800142c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800142e:	4301      	orrs	r1, r0
 8001430:	6411      	str	r1, [r2, #64]	; 0x40
 8001432:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001434:	4003      	ands	r3, r0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800143a:	b002      	add	sp, #8
 800143c:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM3)
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d1fa      	bne.n	800143a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001444:	2002      	movs	r0, #2
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_TIM_Base_MspInit+0x40>)
 8001448:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800144a:	4301      	orrs	r1, r0
 800144c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800144e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001450:	4003      	ands	r3, r0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
}
 8001456:	e7f0      	b.n	800143a <HAL_TIM_Base_MspInit+0x1e>
 8001458:	40012c00 	.word	0x40012c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40000400 	.word	0x40000400

08001464 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001464:	b530      	push	{r4, r5, lr}
 8001466:	0004      	movs	r4, r0
 8001468:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	2214      	movs	r2, #20
 800146c:	2100      	movs	r1, #0
 800146e:	a803      	add	r0, sp, #12
 8001470:	f003 f8e4 	bl	800463c <memset>
  if(timHandle->Instance==TIM3)
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_TIM_MspPostInit+0x64>)
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d123      	bne.n	80014c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
    GPIO_InitStruct.Pin = PWM_RED_Pin|PWM_GREEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4322      	orrs	r2, r4
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4022      	ands	r2, r4
 8001492:	9201      	str	r2, [sp, #4]
 8001494:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001498:	432a      	orrs	r2, r5
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	402b      	ands	r3, r5
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_RED_Pin|PWM_GREEN_Pin;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80014a8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = PWM_RED_Pin|PWM_GREEN_Pin;
 80014aa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f000 ff76 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BLUE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(PWM_BLUE_GPIO_Port, &GPIO_InitStruct);
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 80014b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_BLUE_Pin;
 80014b6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80014be:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(PWM_BLUE_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f000 ff6c 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014c4:	b009      	add	sp, #36	; 0x24
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40021000 	.word	0x40021000
 80014d0:	50000400 	.word	0x50000400

080014d4 <MX_TIM3_Init>:
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d8:	2210      	movs	r2, #16
 80014da:	2100      	movs	r1, #0
 80014dc:	a803      	add	r0, sp, #12
 80014de:	f003 f8ad 	bl	800463c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	220c      	movs	r2, #12
 80014e4:	2100      	movs	r1, #0
 80014e6:	4668      	mov	r0, sp
 80014e8:	f003 f8a8 	bl	800463c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ec:	221c      	movs	r2, #28
 80014ee:	2100      	movs	r1, #0
 80014f0:	a807      	add	r0, sp, #28
 80014f2:	f003 f8a3 	bl	800463c <memset>
  htim3.Instance = TIM3;
 80014f6:	4c30      	ldr	r4, [pc, #192]	; (80015b8 <MX_TIM3_Init+0xe4>)
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <MX_TIM3_Init+0xe8>)
  htim3.Init.Period = 1023;
 80014fa:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <MX_TIM3_Init+0xec>)
  htim3.Instance = TIM3;
 80014fc:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 14;
 80014fe:	230e      	movs	r3, #14
 8001500:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001504:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 1023;
 8001508:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150e:	f002 f8f7 	bl	8003700 <HAL_TIM_Base_Init>
 8001512:	2800      	cmp	r0, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x46>
    Error_Handler();
 8001516:	f7ff fec3 	bl	80012a0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151c:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001520:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001524:	f002 fa0c 	bl	8003940 <HAL_TIM_ConfigClockSource>
 8001528:	2800      	cmp	r0, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x5c>
    Error_Handler();
 800152c:	f7ff feb8 	bl	80012a0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001530:	0020      	movs	r0, r4
 8001532:	f002 f90f 	bl	8003754 <HAL_TIM_PWM_Init>
 8001536:	2800      	cmp	r0, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x6a>
    Error_Handler();
 800153a:	f7ff feb1 	bl	80012a0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001540:	4669      	mov	r1, sp
 8001542:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001548:	f002 fb1e 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	2800      	cmp	r0, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x80>
    Error_Handler();
 8001550:	f7ff fea6 	bl	80012a0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001556:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155a:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800155c:	3b5c      	subs	r3, #92	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155e:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001560:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001564:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	f002 f95b 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 800156a:	2800      	cmp	r0, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x9e>
    Error_Handler();
 800156e:	f7ff fe97 	bl	80012a0 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001572:	2204      	movs	r2, #4
 8001574:	0020      	movs	r0, r4
 8001576:	a907      	add	r1, sp, #28
 8001578:	f002 f952 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 800157c:	2800      	cmp	r0, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0xb0>
    Error_Handler();
 8001580:	f7ff fe8e 	bl	80012a0 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001584:	2208      	movs	r2, #8
 8001586:	0020      	movs	r0, r4
 8001588:	a907      	add	r1, sp, #28
 800158a:	f002 f949 	bl	8003820 <HAL_TIM_PWM_ConfigChannel>
 800158e:	2800      	cmp	r0, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0xc2>
    Error_Handler();
 8001592:	f7ff fe85 	bl	80012a0 <Error_Handler>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	0020      	movs	r0, r4
 800159a:	f002 faf1 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800159e:	2104      	movs	r1, #4
 80015a0:	0020      	movs	r0, r4
 80015a2:	f002 faed 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015a6:	2108      	movs	r1, #8
 80015a8:	0020      	movs	r0, r4
 80015aa:	f002 fae9 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim3);
 80015ae:	0020      	movs	r0, r4
 80015b0:	f7ff ff58 	bl	8001464 <HAL_TIM_MspPostInit>
}
 80015b4:	b00e      	add	sp, #56	; 0x38
 80015b6:	bd10      	pop	{r4, pc}
 80015b8:	20000344 	.word	0x20000344
 80015bc:	40000400 	.word	0x40000400
 80015c0:	000003ff 	.word	0x000003ff

080015c4 <HAL_GPIO_EXTI_Falling_Callback>:

static bool dataReady;
VL53L4CD_ResultsData_t results; /* Results data from VL53L4CD */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == TOF_HARDWARE_INTERRUPT_Pin) {
 80015c4:	2808      	cmp	r0, #8
 80015c6:	d102      	bne.n	80015ce <HAL_GPIO_EXTI_Falling_Callback+0xa>
    	dataReady = true;
 80015c8:	2201      	movs	r2, #1
 80015ca:	4b01      	ldr	r3, [pc, #4]	; (80015d0 <HAL_GPIO_EXTI_Falling_Callback+0xc>)
 80015cc:	701a      	strb	r2, [r3, #0]
    }
}
 80015ce:	4770      	bx	lr
 80015d0:	20000390 	.word	0x20000390

080015d4 <tofInit>:

// Sensor init function
void tofInit(void) {
 80015d4:	b510      	push	{r4, lr}
    /* Toggle Xshut pin to reset the sensor */

	// Turn OFF sensor
    HAL_GPIO_WritePin(GPIOA, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80015d6:	24a0      	movs	r4, #160	; 0xa0
 80015d8:	05e4      	lsls	r4, r4, #23
 80015da:	2200      	movs	r2, #0
 80015dc:	2104      	movs	r1, #4
 80015de:	0020      	movs	r0, r4
 80015e0:	f000 ff8a 	bl	80024f8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80015e4:	2005      	movs	r0, #5
 80015e6:	f000 f91d 	bl	8001824 <HAL_Delay>

    // Turn ON sensor
    HAL_GPIO_WritePin(GPIOA, TOF_XSHUT_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2104      	movs	r1, #4
 80015ee:	0020      	movs	r0, r4
 80015f0:	f000 ff82 	bl	80024f8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80015f4:	2005      	movs	r0, #5
 80015f6:	f000 f915 	bl	8001824 <HAL_Delay>

    VL53L4CD_SensorInit(SENSOR_ADDRESS);
 80015fa:	2052      	movs	r0, #82	; 0x52
 80015fc:	f002 feb8 	bl	8004370 <VL53L4CD_SensorInit>

    /* Program the highest possible TimingBudget, without enabling the
     * low power mode. This should give the best accuracy */
    VL53L4CD_SetRangeTiming(SENSOR_ADDRESS, 200, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	21c8      	movs	r1, #200	; 0xc8
 8001604:	2052      	movs	r0, #82	; 0x52
 8001606:	f002 fe11 	bl	800422c <VL53L4CD_SetRangeTiming>

    VL53L4CD_StartRanging(SENSOR_ADDRESS);
 800160a:	2052      	movs	r0, #82	; 0x52
 800160c:	f002 fdd2 	bl	80041b4 <VL53L4CD_StartRanging>
}
 8001610:	bd10      	pop	{r4, pc}
	...

08001614 <tofTask>:

// This function is called from main loop
void tofTask(void) {
    if (dataReady) {
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <tofTask+0x28>)
void tofTask(void) {
 8001616:	b510      	push	{r4, lr}
    if (dataReady) {
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	2a00      	cmp	r2, #0
 800161c:	d00d      	beq.n	800163a <tofTask+0x26>
    	dataReady = false;
 800161e:	2200      	movs	r2, #0

        /* Read measured distance. RangeStatus = 0 means valid data */
        VL53L4CD_GetResult(SENSOR_ADDRESS, &results);
 8001620:	4c07      	ldr	r4, [pc, #28]	; (8001640 <tofTask+0x2c>)
 8001622:	2052      	movs	r0, #82	; 0x52
 8001624:	0021      	movs	r1, r4
    	dataReady = false;
 8001626:	701a      	strb	r2, [r3, #0]
        VL53L4CD_GetResult(SENSOR_ADDRESS, &results);
 8001628:	f002 ff28 	bl	800447c <VL53L4CD_GetResult>
#ifdef DEBUG_STATE
        printf("Distance = %5umm\n", results.distance_mm);
 800162c:	8861      	ldrh	r1, [r4, #2]
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <tofTask+0x30>)
 8001630:	f003 f80c 	bl	800464c <iprintf>
#endif

        /* (Mandatory) Clear HW interrupt to restart measurements */
        VL53L4CD_ClearInterrupt(SENSOR_ADDRESS);
 8001634:	2052      	movs	r0, #82	; 0x52
 8001636:	f002 fdb7 	bl	80041a8 <VL53L4CD_ClearInterrupt>
    }
}
 800163a:	bd10      	pop	{r4, pc}
 800163c:	20000390 	.word	0x20000390
 8001640:	20000392 	.word	0x20000392
 8001644:	080056fc 	.word	0x080056fc

08001648 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001648:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_USART1_UART_Init+0x64>)
 800164c:	4c18      	ldr	r4, [pc, #96]	; (80016b0 <MX_USART1_UART_Init+0x68>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800164e:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8001650:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8001652:	23e1      	movs	r3, #225	; 0xe1
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001658:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165c:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165e:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001660:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001662:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001664:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001666:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001668:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800166a:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166e:	f002 fcd9 	bl	8004024 <HAL_UART_Init>
 8001672:	2800      	cmp	r0, #0
 8001674:	d001      	beq.n	800167a <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
 8001676:	f7ff fe13 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	0020      	movs	r0, r4
 800167e:	f002 fd49 	bl	8004114 <HAL_UARTEx_SetTxFifoThreshold>
 8001682:	2800      	cmp	r0, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x42>
  {
    Error_Handler();
 8001686:	f7ff fe0b 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	0020      	movs	r0, r4
 800168e:	f002 fd65 	bl	800415c <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	2800      	cmp	r0, #0
 8001694:	d001      	beq.n	800169a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f7ff fe03 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800169a:	0020      	movs	r0, r4
 800169c:	f002 fd1c 	bl	80040d8 <HAL_UARTEx_DisableFifoMode>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80016a4:	f7ff fdfc 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40013800 	.word	0x40013800
 80016b0:	200003a4 	.word	0x200003a4

080016b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b4:	b510      	push	{r4, lr}
 80016b6:	0004      	movs	r4, r0
 80016b8:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	2214      	movs	r2, #20
 80016bc:	2100      	movs	r1, #0
 80016be:	a803      	add	r0, sp, #12
 80016c0:	f002 ffbc 	bl	800463c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	2218      	movs	r2, #24
 80016c6:	2100      	movs	r1, #0
 80016c8:	a808      	add	r0, sp, #32
 80016ca:	f002 ffb7 	bl	800463c <memset>
  if(uartHandle->Instance==USART1)
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_MspInit+0x78>)
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d128      	bne.n	8001728 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016d6:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016da:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f001 fde2 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80016e4:	f7ff fddc 	bl	80012a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e8:	2080      	movs	r0, #128	; 0x80
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_MspInit+0x7c>)
 80016ec:	01c0      	lsls	r0, r0, #7
 80016ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016f0:	4301      	orrs	r1, r0
 80016f2:	6419      	str	r1, [r3, #64]	; 0x40
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	4002      	ands	r2, r0
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	2201      	movs	r2, #1
 80016fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4311      	orrs	r1, r2
 8001704:	6359      	str	r1, [r3, #52]	; 0x34
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4013      	ands	r3, r2
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001710:	23c0      	movs	r3, #192	; 0xc0
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001722:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f000 fe3a 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001728:	b00e      	add	sp, #56	; 0x38
 800172a:	bd10      	pop	{r4, pc}
 800172c:	40013800 	.word	0x40013800
 8001730:	40021000 	.word	0x40021000

08001734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001736:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7ff fe2c 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopForever+0x6>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopForever+0xe>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopForever+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001762:	f002 ff47 	bl	80045f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001766:	f7ff fd79 	bl	800125c <main>

0800176a <LoopForever>:

LoopForever:
  b LoopForever
 800176a:	e7fe      	b.n	800176a <LoopForever>
  ldr   r0, =_estack
 800176c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001778:	08005838 	.word	0x08005838
  ldr r2, =_sbss
 800177c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001780:	2000044c 	.word	0x2000044c

08001784 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_IRQHandler>
	...

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_InitTick+0x44>)
{
 800178c:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800178e:	7819      	ldrb	r1, [r3, #0]
 8001790:	2900      	cmp	r1, #0
 8001792:	d101      	bne.n	8001798 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001794:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001798:	20fa      	movs	r0, #250	; 0xfa
 800179a:	0080      	lsls	r0, r0, #2
 800179c:	f7fe fcc4 	bl	8000128 <__udivsi3>
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_InitTick+0x48>)
 80017a2:	0001      	movs	r1, r0
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f7fe fcbf 	bl	8000128 <__udivsi3>
 80017aa:	f000 fca7 	bl	80020fc <HAL_SYSTICK_Config>
 80017ae:	1e04      	subs	r4, r0, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	2d03      	cmp	r5, #3
 80017b4:	d8ee      	bhi.n	8001794 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b6:	0002      	movs	r2, r0
 80017b8:	2001      	movs	r0, #1
 80017ba:	0029      	movs	r1, r5
 80017bc:	4240      	negs	r0, r0
 80017be:	f000 fc67 	bl	8002090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_InitTick+0x4c>)
 80017c4:	0020      	movs	r0, r4
 80017c6:	601d      	str	r5, [r3, #0]
  return status;
 80017c8:	e7e5      	b.n	8001796 <HAL_InitTick+0xe>
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_Init+0x24>)
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	6811      	ldr	r1, [r2, #0]
{
 80017e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e2:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e8:	f7ff ffce 	bl	8001788 <HAL_InitTick>
 80017ec:	1e04      	subs	r4, r0, #0
 80017ee:	d103      	bne.n	80017f8 <HAL_Init+0x20>
  HAL_MspInit();
 80017f0:	f7ff fd58 	bl	80012a4 <HAL_MspInit>
}
 80017f4:	0020      	movs	r0, r4
 80017f6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80017f8:	2401      	movs	r4, #1
 80017fa:	e7fb      	b.n	80017f4 <HAL_Init+0x1c>
 80017fc:	40022000 	.word	0x40022000

08001800 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x10>)
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_IncTick+0x14>)
 8001804:	6811      	ldr	r1, [r2, #0]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	185b      	adds	r3, r3, r1
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	4770      	bx	lr
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	20000438 	.word	0x20000438
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001818:	4b01      	ldr	r3, [pc, #4]	; (8001820 <HAL_GetTick+0x8>)
 800181a:	6818      	ldr	r0, [r3, #0]
}
 800181c:	4770      	bx	lr
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	20000438 	.word	0x20000438

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff fff6 	bl	8001818 <HAL_GetTick>
 800182c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	1c63      	adds	r3, r4, #1
 8001830:	d002      	beq.n	8001838 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_Delay+0x20>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	1b40      	subs	r0, r0, r5
 800183e:	42a0      	cmp	r0, r4
 8001840:	d3fa      	bcc.n	8001838 <HAL_Delay+0x14>
  {
  }
}
 8001842:	bd70      	pop	{r4, r5, r6, pc}
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8001848:	4a02      	ldr	r2, [pc, #8]	; (8001854 <HAL_SYSCFG_EnableRemap+0xc>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	4303      	orrs	r3, r0
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40010000 	.word	0x40010000

08001858 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001858:	6880      	ldr	r0, [r0, #8]
 800185a:	0740      	lsls	r0, r0, #29
 800185c:	0fc0      	lsrs	r0, r0, #31
}
 800185e:	4770      	bx	lr

08001860 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001860:	2300      	movs	r3, #0
{
 8001862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001864:	b085      	sub	sp, #20
 8001866:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8001868:	2501      	movs	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 800186a:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 800186c:	4298      	cmp	r0, r3
 800186e:	d100      	bne.n	8001872 <HAL_ADC_Init+0x12>
 8001870:	e0b7      	b.n	80019e2 <HAL_ADC_Init+0x182>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001872:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001874:	429d      	cmp	r5, r3
 8001876:	d105      	bne.n	8001884 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001878:	f7ff fa9c 	bl	8000db4 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800187c:	0023      	movs	r3, r4
 800187e:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8001880:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001882:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001884:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001886:	6826      	ldr	r6, [r4, #0]
 8001888:	055b      	lsls	r3, r3, #21
 800188a:	68b2      	ldr	r2, [r6, #8]
 800188c:	421a      	tst	r2, r3
 800188e:	d100      	bne.n	8001892 <HAL_ADC_Init+0x32>
 8001890:	e0aa      	b.n	80019e8 <HAL_ADC_Init+0x188>
 8001892:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2500      	movs	r5, #0
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	d407      	bmi.n	80018aa <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80018a0:	4313      	orrs	r3, r2
 80018a2:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018a6:	432b      	orrs	r3, r5
 80018a8:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018aa:	0030      	movs	r0, r6
 80018ac:	f7ff ffd4 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b0:	2210      	movs	r2, #16
 80018b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018b4:	4013      	ands	r3, r2
 80018b6:	4303      	orrs	r3, r0
 80018b8:	d000      	beq.n	80018bc <HAL_ADC_Init+0x5c>
 80018ba:	e0d0      	b.n	8001a5e <HAL_ADC_Init+0x1fe>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018be:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_ADC_Init+0x208>)
 80018c0:	401a      	ands	r2, r3
 80018c2:	2302      	movs	r3, #2
 80018c4:	4313      	orrs	r3, r2
 80018c6:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	07d2      	lsls	r2, r2, #31
 80018ce:	d466      	bmi.n	800199e <HAL_ADC_Init+0x13e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018d0:	7e22      	ldrb	r2, [r4, #24]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018d2:	7ea0      	ldrb	r0, [r4, #26]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018d4:	0392      	lsls	r2, r2, #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018d6:	7e66      	ldrb	r6, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018d8:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018da:	4694      	mov	ip, r2
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018dc:	0342      	lsls	r2, r0, #13
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80018de:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018e0:	03f6      	lsls	r6, r6, #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018e2:	9201      	str	r2, [sp, #4]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018e4:	2f00      	cmp	r7, #0
 80018e6:	d001      	beq.n	80018ec <HAL_ADC_Init+0x8c>
 80018e8:	2780      	movs	r7, #128	; 0x80
 80018ea:	017f      	lsls	r7, r7, #5
 80018ec:	68e2      	ldr	r2, [r4, #12]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	4311      	orrs	r1, r2
 80018f4:	4331      	orrs	r1, r6
 80018f6:	0342      	lsls	r2, r0, #13
 80018f8:	4311      	orrs	r1, r2
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80018fa:	6922      	ldr	r2, [r4, #16]
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	db00      	blt.n	8001902 <HAL_ADC_Init+0xa2>
 8001900:	e087      	b.n	8001a12 <HAL_ADC_Init+0x1b2>
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	0856      	lsrs	r6, r2, #1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001906:	0022      	movs	r2, r4
 8001908:	322c      	adds	r2, #44	; 0x2c
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	0052      	lsls	r2, r2, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800190e:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001910:	1c61      	adds	r1, r4, #1
 8001912:	7fc9      	ldrb	r1, [r1, #31]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001914:	433a      	orrs	r2, r7
 8001916:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001918:	2901      	cmp	r1, #1
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Init+0xc8>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800191c:	2800      	cmp	r0, #0
 800191e:	d000      	beq.n	8001922 <HAL_ADC_Init+0xc2>
 8001920:	e07a      	b.n	8001a18 <HAL_ADC_Init+0x1b8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	0249      	lsls	r1, r1, #9
 8001926:	430a      	orrs	r2, r1
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001928:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800192a:	2900      	cmp	r1, #0
 800192c:	d005      	beq.n	800193a <HAL_ADC_Init+0xda>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800192e:	20e0      	movs	r0, #224	; 0xe0
 8001930:	0040      	lsls	r0, r0, #1
 8001932:	4001      	ands	r1, r0
 8001934:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001936:	4301      	orrs	r1, r0
 8001938:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800193a:	68d9      	ldr	r1, [r3, #12]
 800193c:	484b      	ldr	r0, [pc, #300]	; (8001a6c <HAL_ADC_Init+0x20c>)
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800193e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8001940:	4001      	ands	r1, r0
 8001942:	430a      	orrs	r2, r1
 8001944:	60da      	str	r2, [r3, #12]
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001946:	0022      	movs	r2, r4
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001948:	6861      	ldr	r1, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 800194a:	323c      	adds	r2, #60	; 0x3c
 800194c:	7812      	ldrb	r2, [r2, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800194e:	0f8e      	lsrs	r6, r1, #30
 8001950:	07b6      	lsls	r6, r6, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8001952:	4694      	mov	ip, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001954:	4337      	orrs	r7, r6
      if (hadc->Init.OversamplingMode == ENABLE)
 8001956:	2a01      	cmp	r2, #1
 8001958:	d109      	bne.n	800196e <HAL_ADC_Init+0x10e>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800195a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800195c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800195e:	4302      	orrs	r2, r0
 8001960:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001962:	433a      	orrs	r2, r7
 8001964:	4302      	orrs	r2, r0
 8001966:	4660      	mov	r0, ip
 8001968:	4332      	orrs	r2, r6
 800196a:	4310      	orrs	r0, r2
 800196c:	0007      	movs	r7, r0
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	483f      	ldr	r0, [pc, #252]	; (8001a70 <HAL_ADC_Init+0x210>)
 8001972:	4002      	ands	r2, r0
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001974:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8001976:	433a      	orrs	r2, r7
 8001978:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800197a:	004a      	lsls	r2, r1, #1
 800197c:	0852      	lsrs	r2, r2, #1
 800197e:	05c0      	lsls	r0, r0, #23
 8001980:	4282      	cmp	r2, r0
 8001982:	d00c      	beq.n	800199e <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	0612      	lsls	r2, r2, #24
 8001988:	4291      	cmp	r1, r2
 800198a:	d008      	beq.n	800199e <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800198c:	4839      	ldr	r0, [pc, #228]	; (8001a74 <HAL_ADC_Init+0x214>)
 800198e:	4e3a      	ldr	r6, [pc, #232]	; (8001a78 <HAL_ADC_Init+0x218>)
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	4032      	ands	r2, r6
 8001994:	26f0      	movs	r6, #240	; 0xf0
 8001996:	03b6      	lsls	r6, r6, #14
 8001998:	4031      	ands	r1, r6
 800199a:	4311      	orrs	r1, r2
 800199c:	6001      	str	r1, [r0, #0]
  MODIFY_REG(ADCx->SMPR,
 800199e:	2007      	movs	r0, #7
 80019a0:	2670      	movs	r6, #112	; 0x70
 80019a2:	695a      	ldr	r2, [r3, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80019a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019a6:	4382      	bics	r2, r0
 80019a8:	430a      	orrs	r2, r1
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	6958      	ldr	r0, [r3, #20]
 80019ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019b0:	43b0      	bics	r0, r6
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	4302      	orrs	r2, r0
 80019b6:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80019b8:	6922      	ldr	r2, [r4, #16]
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d134      	bne.n	8001a28 <HAL_ADC_Init+0x1c8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80019be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019c0:	3a10      	subs	r2, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80019c2:	4302      	orrs	r2, r0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80019c6:	2207      	movs	r2, #7
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4013      	ands	r3, r2
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019cc:	4299      	cmp	r1, r3
 80019ce:	d13a      	bne.n	8001a46 <HAL_ADC_Init+0x1e6>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	2300      	movs	r3, #0
 80019d2:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019d6:	3a04      	subs	r2, #4
 80019d8:	4393      	bics	r3, r2
 80019da:	001a      	movs	r2, r3
 80019dc:	2301      	movs	r3, #1
 80019de:	4313      	orrs	r3, r2
 80019e0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80019e2:	0028      	movs	r0, r5
 80019e4:	b005      	add	sp, #20
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 80019e8:	68b2      	ldr	r2, [r6, #8]
 80019ea:	4924      	ldr	r1, [pc, #144]	; (8001a7c <HAL_ADC_Init+0x21c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_ADC_Init+0x220>)
 80019f4:	4923      	ldr	r1, [pc, #140]	; (8001a84 <HAL_ADC_Init+0x224>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	f7fe fb96 	bl	8000128 <__udivsi3>
 80019fc:	3001      	adds	r0, #1
 80019fe:	0040      	lsls	r0, r0, #1
 8001a00:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8001a02:	9b03      	ldr	r3, [sp, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d100      	bne.n	8001a0a <HAL_ADC_Init+0x1aa>
 8001a08:	e743      	b.n	8001892 <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8001a0a:	9b03      	ldr	r3, [sp, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	9303      	str	r3, [sp, #12]
 8001a10:	e7f7      	b.n	8001a02 <HAL_ADC_Init+0x1a2>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a12:	2680      	movs	r6, #128	; 0x80
 8001a14:	03b6      	lsls	r6, r6, #14
 8001a16:	e776      	b.n	8001906 <HAL_ADC_Init+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	2020      	movs	r0, #32
 8001a1a:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8001a1c:	4330      	orrs	r0, r6
 8001a1e:	65a0      	str	r0, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001a22:	4301      	orrs	r1, r0
 8001a24:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001a26:	e77f      	b.n	8001928 <HAL_ADC_Init+0xc8>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a28:	2080      	movs	r0, #128	; 0x80
 8001a2a:	0380      	lsls	r0, r0, #14
 8001a2c:	4282      	cmp	r2, r0
 8001a2e:	d1ca      	bne.n	80019c6 <HAL_ADC_Init+0x166>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001a30:	201c      	movs	r0, #28
 8001a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a34:	69e2      	ldr	r2, [r4, #28]
 8001a36:	3a01      	subs	r2, #1
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	4002      	ands	r2, r0
 8001a3c:	382c      	subs	r0, #44	; 0x2c
 8001a3e:	4090      	lsls	r0, r2
 8001a40:	0002      	movs	r2, r0
 8001a42:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a44:	e7bd      	b.n	80019c2 <HAL_ADC_Init+0x162>
      ADC_STATE_CLR_SET(hadc->State,
 8001a46:	2212      	movs	r2, #18
 8001a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	4393      	bics	r3, r2
 8001a4e:	001a      	movs	r2, r3
 8001a50:	2310      	movs	r3, #16
 8001a52:	4313      	orrs	r3, r2
 8001a54:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a58:	432b      	orrs	r3, r5
 8001a5a:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8001a5c:	e7c1      	b.n	80019e2 <HAL_ADC_Init+0x182>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001a60:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	431a      	orrs	r2, r3
 8001a64:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001a66:	e7bc      	b.n	80019e2 <HAL_ADC_Init+0x182>
 8001a68:	fffffefd 	.word	0xfffffefd
 8001a6c:	fffe0201 	.word	0xfffe0201
 8001a70:	1ffffc02 	.word	0x1ffffc02
 8001a74:	40012708 	.word	0x40012708
 8001a78:	ffc3ffff 	.word	0xffc3ffff
 8001a7c:	6fffffe8 	.word	0x6fffffe8
 8001a80:	20000000 	.word	0x20000000
 8001a84:	00030d40 	.word	0x00030d40

08001a88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a88:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001a8c:	f7ff fa7c 	bl	8000f88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a90:	bd10      	pop	{r4, pc}

08001a92 <HAL_ADC_ErrorCallback>:
 8001a92:	4770      	bx	lr

08001a94 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a94:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a96:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001a98:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a9a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aa8:	f7ff fff3 	bl	8001a92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aac:	bd10      	pop	{r4, pc}
	...

08001ab0 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ab0:	2350      	movs	r3, #80	; 0x50
{
 8001ab2:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ab4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ab6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001ab8:	421a      	tst	r2, r3
 8001aba:	d12c      	bne.n	8001b16 <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001abc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001abe:	33b1      	adds	r3, #177	; 0xb1
 8001ac0:	33ff      	adds	r3, #255	; 0xff
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	68c2      	ldr	r2, [r0, #12]
 8001ace:	421a      	tst	r2, r3
 8001ad0:	d114      	bne.n	8001afc <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad2:	7ea3      	ldrb	r3, [r4, #26]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d111      	bne.n	8001afc <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ad8:	6803      	ldr	r3, [r0, #0]
 8001ada:	071b      	lsls	r3, r3, #28
 8001adc:	d50e      	bpl.n	8001afc <ADC_DMAConvCplt+0x4c>
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ade:	f7ff febb 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d10e      	bne.n	8001b04 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ae6:	210c      	movs	r1, #12
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	6853      	ldr	r3, [r2, #4]
 8001aec:	438b      	bics	r3, r1
 8001aee:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <ADC_DMAConvCplt+0x7c>)
 8001af4:	401a      	ands	r2, r3
 8001af6:	2301      	movs	r3, #1
 8001af8:	4313      	orrs	r3, r2
 8001afa:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001afc:	0020      	movs	r0, r4
 8001afe:	f7ff fa35 	bl	8000f6c <HAL_ADC_ConvCpltCallback>
}
 8001b02:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b04:	2320      	movs	r3, #32
 8001b06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b10:	4313      	orrs	r3, r2
 8001b12:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001b14:	e7f2      	b.n	8001afc <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b18:	06db      	lsls	r3, r3, #27
 8001b1a:	d503      	bpl.n	8001b24 <ADC_DMAConvCplt+0x74>
      HAL_ADC_ErrorCallback(hadc);
 8001b1c:	0020      	movs	r0, r4
 8001b1e:	f7ff ffb8 	bl	8001a92 <HAL_ADC_ErrorCallback>
 8001b22:	e7ee      	b.n	8001b02 <ADC_DMAConvCplt+0x52>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	4798      	blx	r3
}
 8001b2a:	e7ea      	b.n	8001b02 <ADC_DMAConvCplt+0x52>
 8001b2c:	fffffefe 	.word	0xfffffefe

08001b30 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0UL;
 8001b30:	2300      	movs	r3, #0
{
 8001b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b34:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8001b36:	9305      	str	r3, [sp, #20]
  __HAL_LOCK(hadc);
 8001b38:	0003      	movs	r3, r0
 8001b3a:	3354      	adds	r3, #84	; 0x54
 8001b3c:	781a      	ldrb	r2, [r3, #0]
{
 8001b3e:	0005      	movs	r5, r0
 8001b40:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8001b42:	2002      	movs	r0, #2
 8001b44:	2a01      	cmp	r2, #1
 8001b46:	d100      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x1a>
 8001b48:	e0c3      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1a2>
 8001b4a:	2401      	movs	r4, #1
 8001b4c:	701c      	strb	r4, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4e:	6828      	ldr	r0, [r5, #0]
 8001b50:	f7ff fe82 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d000      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x2a>
 8001b58:	e0f9      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	692f      	ldr	r7, [r5, #16]
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b5e:	6873      	ldr	r3, [r6, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b60:	4397      	bics	r7, r2
 8001b62:	2280      	movs	r2, #128	; 0x80
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	0612      	lsls	r2, r2, #24
 8001b68:	4694      	mov	ip, r2
 8001b6a:	9a01      	ldr	r2, [sp, #4]
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b6c:	6833      	ldr	r3, [r6, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b6e:	2a02      	cmp	r2, #2
 8001b70:	d100      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x44>
 8001b72:	e0c2      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1ca>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b74:	0359      	lsls	r1, r3, #13
 8001b76:	0b49      	lsrs	r1, r1, #13
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b78:	682a      	ldr	r2, [r5, #0]
 8001b7a:	9102      	str	r1, [sp, #8]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b7c:	4567      	cmp	r7, ip
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x70>
 8001b80:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8001b82:	4301      	orrs	r1, r0
 8001b84:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8001b86:	68b1      	ldr	r1, [r6, #8]
 8001b88:	6954      	ldr	r4, [r2, #20]
 8001b8a:	0218      	lsls	r0, r3, #8
 8001b8c:	4e73      	ldr	r6, [pc, #460]	; (8001d5c <HAL_ADC_ConfigChannel+0x22c>)
 8001b8e:	4001      	ands	r1, r0
 8001b90:	4031      	ands	r1, r6
 8001b92:	4384      	bics	r4, r0
 8001b94:	4321      	orrs	r1, r4
 8001b96:	6151      	str	r1, [r2, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db64      	blt.n	8001c66 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2000      	movs	r0, #0
}
 8001b9e:	e095      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ba0:	211f      	movs	r1, #31
 8001ba2:	9f01      	ldr	r7, [sp, #4]
 8001ba4:	400f      	ands	r7, r1
 8001ba6:	46bc      	mov	ip, r7
 8001ba8:	270f      	movs	r7, #15
 8001baa:	4661      	mov	r1, ip
 8001bac:	408f      	lsls	r7, r1
 8001bae:	43f9      	mvns	r1, r7
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001bb4:	43b9      	bics	r1, r7
 8001bb6:	000f      	movs	r7, r1
 8001bb8:	9902      	ldr	r1, [sp, #8]
 8001bba:	2900      	cmp	r1, #0
 8001bbc:	d114      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0xb8>
 8001bbe:	0e98      	lsrs	r0, r3, #26
 8001bc0:	311f      	adds	r1, #31
 8001bc2:	4008      	ands	r0, r1
 8001bc4:	4661      	mov	r1, ip
 8001bc6:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bc8:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bca:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bcc:	0889      	lsrs	r1, r1, #2
 8001bce:	69e8      	ldr	r0, [r5, #28]
 8001bd0:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bd2:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bd4:	4281      	cmp	r1, r0
 8001bd6:	d8d6      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001bd8:	4664      	mov	r4, ip
 8001bda:	0099      	lsls	r1, r3, #2
 8001bdc:	0f09      	lsrs	r1, r1, #28
 8001bde:	40a1      	lsls	r1, r4
 8001be0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001be2:	9c03      	ldr	r4, [sp, #12]
 8001be4:	4020      	ands	r0, r4
 8001be6:	e7cc      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001be8:	4223      	tst	r3, r4
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001bec:	2102      	movs	r1, #2
 8001bee:	0020      	movs	r0, r4
 8001bf0:	420b      	tst	r3, r1
 8001bf2:	d1e7      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	1849      	adds	r1, r1, r1
 8001bf8:	420b      	tst	r3, r1
 8001bfa:	d1e3      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	0719      	lsls	r1, r3, #28
 8001c00:	d4e0      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c02:	3001      	adds	r0, #1
 8001c04:	06d9      	lsls	r1, r3, #27
 8001c06:	d4dd      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c08:	3001      	adds	r0, #1
 8001c0a:	0699      	lsls	r1, r3, #26
 8001c0c:	d4da      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c0e:	3001      	adds	r0, #1
 8001c10:	0659      	lsls	r1, r3, #25
 8001c12:	d4d7      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c14:	3001      	adds	r0, #1
 8001c16:	0619      	lsls	r1, r3, #24
 8001c18:	d4d4      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	05d9      	lsls	r1, r3, #23
 8001c1e:	d4d1      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c20:	3001      	adds	r0, #1
 8001c22:	0599      	lsls	r1, r3, #22
 8001c24:	d4ce      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c26:	3001      	adds	r0, #1
 8001c28:	0559      	lsls	r1, r3, #21
 8001c2a:	d4cb      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c2c:	3001      	adds	r0, #1
 8001c2e:	0519      	lsls	r1, r3, #20
 8001c30:	d4c8      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c32:	3001      	adds	r0, #1
 8001c34:	04d9      	lsls	r1, r3, #19
 8001c36:	d4c5      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c38:	3001      	adds	r0, #1
 8001c3a:	0499      	lsls	r1, r3, #18
 8001c3c:	d4c2      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c3e:	3001      	adds	r0, #1
 8001c40:	0459      	lsls	r1, r3, #17
 8001c42:	d4bf      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c44:	3001      	adds	r0, #1
 8001c46:	0419      	lsls	r1, r3, #16
 8001c48:	d4bc      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c4a:	3001      	adds	r0, #1
 8001c4c:	03d9      	lsls	r1, r3, #15
 8001c4e:	d4b9      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c50:	3001      	adds	r0, #1
 8001c52:	0399      	lsls	r1, r3, #14
 8001c54:	d4b6      	bmi.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	0018      	movs	r0, r3
 8001c5a:	02c9      	lsls	r1, r1, #11
 8001c5c:	4008      	ands	r0, r1
 8001c5e:	420b      	tst	r3, r1
 8001c60:	d0b0      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
 8001c62:	2012      	movs	r0, #18
 8001c64:	e7ae      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c66:	24e0      	movs	r4, #224	; 0xe0
 8001c68:	4a3d      	ldr	r2, [pc, #244]	; (8001d60 <HAL_ADC_ConfigChannel+0x230>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c6a:	483e      	ldr	r0, [pc, #248]	; (8001d64 <HAL_ADC_ConfigChannel+0x234>)
 8001c6c:	6811      	ldr	r1, [r2, #0]
 8001c6e:	0464      	lsls	r4, r4, #17
 8001c70:	400c      	ands	r4, r1
 8001c72:	4283      	cmp	r3, r0
 8001c74:	d11a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c7a:	4219      	tst	r1, r3
 8001c7c:	d18e      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c7e:	6811      	ldr	r1, [r2, #0]
 8001c80:	4839      	ldr	r0, [pc, #228]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001c82:	4001      	ands	r1, r0
 8001c84:	4321      	orrs	r1, r4
 8001c86:	4319      	orrs	r1, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_ADC_ConfigChannel+0x23c>)
 8001c8a:	6011      	str	r1, [r2, #0]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	4938      	ldr	r1, [pc, #224]	; (8001d70 <HAL_ADC_ConfigChannel+0x240>)
 8001c90:	f7fe fa4a 	bl	8000128 <__udivsi3>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	200c      	movs	r0, #12
 8001c98:	4358      	muls	r0, r3
 8001c9a:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8001c9c:	9b05      	ldr	r3, [sp, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x174>
 8001ca2:	e77b      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
            wait_loop_index--;
 8001ca4:	9b05      	ldr	r3, [sp, #20]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	9305      	str	r3, [sp, #20]
 8001caa:	e7f7      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cac:	4831      	ldr	r0, [pc, #196]	; (8001d74 <HAL_ADC_ConfigChannel+0x244>)
 8001cae:	4283      	cmp	r3, r0
 8001cb0:	d111      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x1a6>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cb2:	2680      	movs	r6, #128	; 0x80
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	0476      	lsls	r6, r6, #17
 8001cb8:	4030      	ands	r0, r6
 8001cba:	4231      	tst	r1, r6
 8001cbc:	d000      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x190>
 8001cbe:	e76d      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
 8001cc0:	6811      	ldr	r1, [r2, #0]
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001cc4:	4019      	ands	r1, r3
 8001cc6:	4321      	orrs	r1, r4
 8001cc8:	430e      	orrs	r6, r1
 8001cca:	6016      	str	r6, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	3554      	adds	r5, #84	; 0x54
 8001cd0:	702b      	strb	r3, [r5, #0]
}
 8001cd2:	b007      	add	sp, #28
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cd6:	4828      	ldr	r0, [pc, #160]	; (8001d78 <HAL_ADC_ConfigChannel+0x248>)
 8001cd8:	4283      	cmp	r3, r0
 8001cda:	d000      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x1ae>
 8001cdc:	e75e      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	0008      	movs	r0, r1
 8001ce2:	03db      	lsls	r3, r3, #15
 8001ce4:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ce6:	4219      	tst	r1, r3
 8001ce8:	d000      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x1bc>
 8001cea:	e757      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
 8001cec:	6811      	ldr	r1, [r2, #0]
 8001cee:	4e1e      	ldr	r6, [pc, #120]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001cf0:	4031      	ands	r1, r6
 8001cf2:	4321      	orrs	r1, r4
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	e7e8      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cfa:	4567      	cmp	r7, ip
 8001cfc:	d105      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001cfe:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d00:	0359      	lsls	r1, r3, #13
 8001d02:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001d04:	0b49      	lsrs	r1, r1, #13
 8001d06:	438a      	bics	r2, r1
 8001d08:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db00      	blt.n	8001d10 <HAL_ADC_ConfigChannel+0x1e0>
 8001d0e:	e745      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d12:	4814      	ldr	r0, [pc, #80]	; (8001d64 <HAL_ADC_ConfigChannel+0x234>)
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	4283      	cmp	r3, r0
 8001d18:	d108      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1a:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d1c:	6810      	ldr	r0, [r2, #0]
 8001d1e:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d20:	4019      	ands	r1, r3
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001d24:	4003      	ands	r3, r0
 8001d26:	4319      	orrs	r1, r3
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	e737      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d2c:	4811      	ldr	r0, [pc, #68]	; (8001d74 <HAL_ADC_ConfigChannel+0x244>)
 8001d2e:	4283      	cmp	r3, r0
 8001d30:	d103      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	e7f2      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d3a:	480f      	ldr	r0, [pc, #60]	; (8001d78 <HAL_ADC_ConfigChannel+0x248>)
 8001d3c:	4283      	cmp	r3, r0
 8001d3e:	d000      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x212>
 8001d40:	e72c      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d42:	20c0      	movs	r0, #192	; 0xc0
 8001d44:	0440      	lsls	r0, r0, #17
 8001d46:	4001      	ands	r1, r0
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001d4c:	e7ea      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4e:	2320      	movs	r3, #32
 8001d50:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001d52:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	4313      	orrs	r3, r2
 8001d56:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001d58:	e7b8      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x19c>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	07ffff00 	.word	0x07ffff00
 8001d60:	40012708 	.word	0x40012708
 8001d64:	b0001000 	.word	0xb0001000
 8001d68:	fe3fffff 	.word	0xfe3fffff
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	00030d40 	.word	0x00030d40
 8001d74:	b8004000 	.word	0xb8004000
 8001d78:	b4002000 	.word	0xb4002000

08001d7c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	2300      	movs	r3, #0
{
 8001d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d80:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001d82:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d84:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d86:	2001      	movs	r0, #1
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4202      	tst	r2, r0
 8001d8c:	d001      	beq.n	8001d92 <ADC_Enable+0x16>
  return HAL_OK;
 8001d8e:	2000      	movs	r0, #0
}
 8001d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <ADC_Enable+0xa4>)
 8001d96:	4211      	tst	r1, r2
 8001d98:	d007      	beq.n	8001daa <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001da4:	4303      	orrs	r3, r0
 8001da6:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001da8:	e7f2      	b.n	8001d90 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4d1d      	ldr	r5, [pc, #116]	; (8001e24 <ADC_Enable+0xa8>)
 8001dae:	402a      	ands	r2, r5
 8001db0:	4310      	orrs	r0, r2
 8001db2:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <ADC_Enable+0xac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	d423      	bmi.n	8001e04 <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dbc:	7e63      	ldrb	r3, [r4, #25]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d0e5      	beq.n	8001d8e <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fd29 	bl	8001818 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dc6:	2601      	movs	r6, #1
      tickstart = HAL_GetTick();
 8001dc8:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	4233      	tst	r3, r6
 8001dd0:	d1dd      	bne.n	8001d8e <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd2:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	4233      	tst	r3, r6
 8001dd6:	d103      	bne.n	8001de0 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8001dd8:	6893      	ldr	r3, [r2, #8]
 8001dda:	402b      	ands	r3, r5
 8001ddc:	4333      	orrs	r3, r6
 8001dde:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de0:	f7ff fd1a 	bl	8001818 <HAL_GetTick>
 8001de4:	1bc0      	subs	r0, r0, r7
 8001de6:	2802      	cmp	r0, #2
 8001de8:	d9ef      	bls.n	8001dca <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4233      	tst	r3, r6
 8001df0:	d1eb      	bne.n	8001dca <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	2310      	movs	r3, #16
 8001df4:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001dfe:	431e      	orrs	r6, r3
 8001e00:	65e6      	str	r6, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8001e02:	e7c5      	b.n	8001d90 <ADC_Enable+0x14>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <ADC_Enable+0xb0>)
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <ADC_Enable+0xb4>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f7fe f98d 	bl	8000128 <__udivsi3>
 8001e0e:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001e10:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001e12:	9b01      	ldr	r3, [sp, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0d1      	beq.n	8001dbc <ADC_Enable+0x40>
        wait_loop_index--;
 8001e18:	9b01      	ldr	r3, [sp, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	e7f8      	b.n	8001e12 <ADC_Enable+0x96>
 8001e20:	80000017 	.word	0x80000017
 8001e24:	7fffffe8 	.word	0x7fffffe8
 8001e28:	40012708 	.word	0x40012708
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	00030d40 	.word	0x00030d40

08001e34 <HAL_ADC_Start_DMA>:
{
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e38:	6800      	ldr	r0, [r0, #0]
{
 8001e3a:	000d      	movs	r5, r1
 8001e3c:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3e:	f7ff fd0b 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
    tmp_hal_status = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d140      	bne.n	8001eca <HAL_ADC_Start_DMA+0x96>
    __HAL_LOCK(hadc);
 8001e48:	0027      	movs	r7, r4
 8001e4a:	3754      	adds	r7, #84	; 0x54
 8001e4c:	783a      	ldrb	r2, [r7, #0]
 8001e4e:	2a01      	cmp	r2, #1
 8001e50:	d03b      	beq.n	8001eca <HAL_ADC_Start_DMA+0x96>
 8001e52:	2201      	movs	r2, #1
 8001e54:	703a      	strb	r2, [r7, #0]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	4211      	tst	r1, r2
 8001e5c:	d10c      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e5e:	6899      	ldr	r1, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e60:	4211      	tst	r1, r2
 8001e62:	d005      	beq.n	8001e70 <HAL_ADC_Start_DMA+0x3c>
  MODIFY_REG(ADCx->CR,
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <HAL_ADC_Start_DMA+0x9c>)
 8001e68:	4011      	ands	r1, r2
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001e70:	2201      	movs	r2, #1
 8001e72:	68d9      	ldr	r1, [r3, #12]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f7ff ff7f 	bl	8001d7c <ADC_Enable>
 8001e7e:	1e03      	subs	r3, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001e80:	d123      	bne.n	8001eca <HAL_ADC_Start_DMA+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001e82:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e84:	4913      	ldr	r1, [pc, #76]	; (8001ed4 <HAL_ADC_Start_DMA+0xa0>)
 8001e86:	4011      	ands	r1, r2
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	65a2      	str	r2, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_ADC_Start_DMA+0xa4>)
 8001e94:	6d20      	ldr	r0, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e96:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e98:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_ADC_Start_DMA+0xa8>)
 8001e9c:	6302      	str	r2, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_ADC_Start_DMA+0xac>)
 8001ea0:	6342      	str	r2, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ea2:	221c      	movs	r2, #28
 8001ea4:	600a      	str	r2, [r1, #0]
      __HAL_UNLOCK(hadc);
 8001ea6:	703b      	strb	r3, [r7, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ea8:	684a      	ldr	r2, [r1, #4]
 8001eaa:	3310      	adds	r3, #16
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb0:	002a      	movs	r2, r5
 8001eb2:	0033      	movs	r3, r6
 8001eb4:	3140      	adds	r1, #64	; 0x40
 8001eb6:	f000 f9d3 	bl	8002260 <HAL_DMA_Start_IT>
 8001eba:	0003      	movs	r3, r0
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ebc:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001ebe:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_ADC_Start_DMA+0x9c>)
 8001ec0:	6882      	ldr	r2, [r0, #8]
 8001ec2:	4011      	ands	r1, r2
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	6082      	str	r2, [r0, #8]
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	7fffffe8 	.word	0x7fffffe8
 8001ed4:	fffff0fe 	.word	0xfffff0fe
 8001ed8:	08001ab1 	.word	0x08001ab1
 8001edc:	08001a89 	.word	0x08001a89
 8001ee0:	08001a95 	.word	0x08001a95

08001ee4 <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ee4:	6803      	ldr	r3, [r0, #0]
{
 8001ee6:	b570      	push	{r4, r5, r6, lr}
 8001ee8:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eea:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eec:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eee:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ef0:	4202      	tst	r2, r0
 8001ef2:	d101      	bne.n	8001ef8 <ADC_Disable+0x14>
  return HAL_OK;
 8001ef4:	2000      	movs	r0, #0
}
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ef8:	2202      	movs	r2, #2
      && (tmp_adc_is_disable_on_going == 0UL)
 8001efa:	4211      	tst	r1, r2
 8001efc:	d1fa      	bne.n	8001ef4 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001efe:	2105      	movs	r1, #5
 8001f00:	689d      	ldr	r5, [r3, #8]
 8001f02:	400d      	ands	r5, r1
 8001f04:	2d01      	cmp	r5, #1
 8001f06:	d11f      	bne.n	8001f48 <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <ADC_Disable+0x74>)
 8001f0c:	4001      	ands	r1, r0
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f12:	2203      	movs	r2, #3
 8001f14:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f16:	f7ff fc7f 	bl	8001818 <HAL_GetTick>
 8001f1a:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	422b      	tst	r3, r5
 8001f22:	d0e7      	beq.n	8001ef4 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f24:	f7ff fc78 	bl	8001818 <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d9f6      	bls.n	8001f1c <ADC_Disable+0x38>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	422b      	tst	r3, r5
 8001f34:	d0f2      	beq.n	8001f1c <ADC_Disable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	2310      	movs	r3, #16
 8001f38:	6da2      	ldr	r2, [r4, #88]	; 0x58
          return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f42:	431d      	orrs	r5, r3
 8001f44:	65e5      	str	r5, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001f46:	e7d6      	b.n	8001ef6 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f48:	2310      	movs	r3, #16
 8001f4a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f52:	4303      	orrs	r3, r0
 8001f54:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001f56:	e7ce      	b.n	8001ef6 <ADC_Disable+0x12>
 8001f58:	7fffffe8 	.word	0x7fffffe8

08001f5c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f5e:	2300      	movs	r3, #0
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001f60:	0006      	movs	r6, r0
{
 8001f62:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8001f64:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001f66:	3654      	adds	r6, #84	; 0x54
 8001f68:	7833      	ldrb	r3, [r6, #0]
{
 8001f6a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001f6c:	2502      	movs	r5, #2
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d035      	beq.n	8001fde <HAL_ADCEx_Calibration_Start+0x82>
 8001f72:	2701      	movs	r7, #1
 8001f74:	7037      	strb	r7, [r6, #0]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f76:	f7ff ffb5 	bl	8001ee4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7a:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 8001f7c:	0005      	movs	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	000a      	movs	r2, r1
 8001f82:	403a      	ands	r2, r7
 8001f84:	9200      	str	r2, [sp, #0]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f86:	4239      	tst	r1, r7
 8001f88:	d000      	beq.n	8001f8c <HAL_ADCEx_Calibration_Start+0x30>
 8001f8a:	e071      	b.n	8002070 <HAL_ADCEx_Calibration_Start+0x114>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001f8e:	483b      	ldr	r0, [pc, #236]	; (800207c <HAL_ADCEx_Calibration_Start+0x120>)
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f90:	3707      	adds	r7, #7
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	4008      	ands	r0, r1
 8001f94:	2102      	movs	r1, #2
 8001f96:	4301      	orrs	r1, r0
 8001f98:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f9a:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f9c:	4838      	ldr	r0, [pc, #224]	; (8002080 <HAL_ADCEx_Calibration_Start+0x124>)
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001f9e:	9101      	str	r1, [sp, #4]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	4001      	ands	r1, r0
 8001fa4:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->CR,
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	6898      	ldr	r0, [r3, #8]
 8001faa:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_ADCEx_Calibration_Start+0x128>)
 8001fac:	0609      	lsls	r1, r1, #24
 8001fae:	4010      	ands	r0, r2
 8001fb0:	4308      	orrs	r0, r1

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
      {
        wait_loop_index++;
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fb2:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_ADCEx_Calibration_Start+0x12c>)
 8001fb4:	6098      	str	r0, [r3, #8]
 8001fb6:	468c      	mov	ip, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001fb8:	6898      	ldr	r0, [r3, #8]
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	da12      	bge.n	8001fe4 <HAL_ADCEx_Calibration_Start+0x88>
        wait_loop_index++;
 8001fbe:	9803      	ldr	r0, [sp, #12]
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	9003      	str	r0, [sp, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fc4:	9803      	ldr	r0, [sp, #12]
 8001fc6:	4560      	cmp	r0, ip
 8001fc8:	d9f6      	bls.n	8001fb8 <HAL_ADCEx_Calibration_Start+0x5c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fca:	2212      	movs	r2, #18
 8001fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fce:	4393      	bics	r3, r2
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	65a3      	str	r3, [r4, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	7033      	strb	r3, [r6, #0]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

          return HAL_ERROR;
 8001fdc:	2501      	movs	r5, #1
  }

  __HAL_UNLOCK(hadc);

  return tmp_hal_status;
}
 8001fde:	0028      	movs	r0, r5
 8001fe0:	b005      	add	sp, #20
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	227f      	movs	r2, #127	; 0x7f
 8001fe8:	30b4      	adds	r0, #180	; 0xb4
 8001fea:	6801      	ldr	r1, [r0, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001fec:	3f01      	subs	r7, #1
 8001fee:	4011      	ands	r1, r2
 8001ff0:	468c      	mov	ip, r1
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001ff2:	9a00      	ldr	r2, [sp, #0]
 8001ff4:	4462      	add	r2, ip
 8001ff6:	9200      	str	r2, [sp, #0]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001ff8:	2f00      	cmp	r7, #0
 8001ffa:	d1d4      	bne.n	8001fa6 <HAL_ADCEx_Calibration_Start+0x4a>
  MODIFY_REG(ADCx->CR,
 8001ffc:	2601      	movs	r6, #1
 8001ffe:	689f      	ldr	r7, [r3, #8]
 8002000:	4920      	ldr	r1, [pc, #128]	; (8002084 <HAL_ADCEx_Calibration_Start+0x128>)
    calibration_factor_accumulated /= calibration_index;
 8002002:	08d2      	lsrs	r2, r2, #3
 8002004:	400f      	ands	r7, r1
  MODIFY_REG(ADCx->CALFACT,
 8002006:	217f      	movs	r1, #127	; 0x7f
  MODIFY_REG(ADCx->CR,
 8002008:	4337      	orrs	r7, r6
 800200a:	609f      	str	r7, [r3, #8]
  MODIFY_REG(ADCx->CALFACT,
 800200c:	6807      	ldr	r7, [r0, #0]
 800200e:	438f      	bics	r7, r1
 8002010:	433a      	orrs	r2, r7
 8002012:	6002      	str	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	491b      	ldr	r1, [pc, #108]	; (8002084 <HAL_ADCEx_Calibration_Start+0x128>)
 8002018:	400a      	ands	r2, r1
 800201a:	2102      	movs	r1, #2
 800201c:	4311      	orrs	r1, r2
 800201e:	6099      	str	r1, [r3, #8]
    tickstart = HAL_GetTick();
 8002020:	f7ff fbfa 	bl	8001818 <HAL_GetTick>
 8002024:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002026:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	4233      	tst	r3, r6
 800202c:	d10f      	bne.n	800204e <HAL_ADCEx_Calibration_Start+0xf2>
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_ADCEx_Calibration_Start+0x130>)
 8002030:	9801      	ldr	r0, [sp, #4]
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002032:	68d1      	ldr	r1, [r2, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002034:	4018      	ands	r0, r3
 8002036:	0003      	movs	r3, r0
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002038:	430b      	orrs	r3, r1
 800203a:	60d3      	str	r3, [r2, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800203c:	2203      	movs	r2, #3
 800203e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002040:	4393      	bics	r3, r2
 8002042:	431e      	orrs	r6, r3
 8002044:	65a6      	str	r6, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8002046:	2300      	movs	r3, #0
 8002048:	3454      	adds	r4, #84	; 0x54
 800204a:	7023      	strb	r3, [r4, #0]
  return tmp_hal_status;
 800204c:	e7c7      	b.n	8001fde <HAL_ADCEx_Calibration_Start+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800204e:	f7ff fbe3 	bl	8001818 <HAL_GetTick>
 8002052:	1bc0      	subs	r0, r0, r7
 8002054:	2802      	cmp	r0, #2
 8002056:	d9e6      	bls.n	8002026 <HAL_ADCEx_Calibration_Start+0xca>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4233      	tst	r3, r6
 800205e:	d0e2      	beq.n	8002026 <HAL_ADCEx_Calibration_Start+0xca>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	2310      	movs	r3, #16
 8002062:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002064:	4313      	orrs	r3, r2
 8002066:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800206a:	431e      	orrs	r6, r3
 800206c:	65e6      	str	r6, [r4, #92]	; 0x5c
 800206e:	e7b5      	b.n	8001fdc <HAL_ADCEx_Calibration_Start+0x80>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002070:	2310      	movs	r3, #16
 8002072:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002074:	4313      	orrs	r3, r2
 8002076:	65a3      	str	r3, [r4, #88]	; 0x58
 8002078:	e7e5      	b.n	8002046 <HAL_ADCEx_Calibration_Start+0xea>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	fffffefd 	.word	0xfffffefd
 8002080:	ffff7ffc 	.word	0xffff7ffc
 8002084:	7fffffe8 	.word	0x7fffffe8
 8002088:	0002f1ff 	.word	0x0002f1ff
 800208c:	00008003 	.word	0x00008003

08002090 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002092:	25ff      	movs	r5, #255	; 0xff
 8002094:	2403      	movs	r4, #3
 8002096:	002a      	movs	r2, r5
 8002098:	4004      	ands	r4, r0
 800209a:	00e4      	lsls	r4, r4, #3
 800209c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209e:	0189      	lsls	r1, r1, #6
 80020a0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020a4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80020a8:	2800      	cmp	r0, #0
 80020aa:	db0a      	blt.n	80020c2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ac:	24c0      	movs	r4, #192	; 0xc0
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_NVIC_SetPriority+0x4c>)
 80020b0:	0880      	lsrs	r0, r0, #2
 80020b2:	0080      	lsls	r0, r0, #2
 80020b4:	18c0      	adds	r0, r0, r3
 80020b6:	00a4      	lsls	r4, r4, #2
 80020b8:	5903      	ldr	r3, [r0, r4]
 80020ba:	401a      	ands	r2, r3
 80020bc:	4311      	orrs	r1, r2
 80020be:	5101      	str	r1, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80020c0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c2:	200f      	movs	r0, #15
 80020c4:	4003      	ands	r3, r0
 80020c6:	3b08      	subs	r3, #8
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_NVIC_SetPriority+0x50>)
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	181b      	adds	r3, r3, r0
 80020d0:	69d8      	ldr	r0, [r3, #28]
 80020d2:	4002      	ands	r2, r0
 80020d4:	4311      	orrs	r1, r2
 80020d6:	61d9      	str	r1, [r3, #28]
 80020d8:	e7f2      	b.n	80020c0 <HAL_NVIC_SetPriority+0x30>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	db05      	blt.n	80020f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	231f      	movs	r3, #31
 80020ea:	4018      	ands	r0, r3
 80020ec:	3b1e      	subs	r3, #30
 80020ee:	4083      	lsls	r3, r0
 80020f0:	4a01      	ldr	r2, [pc, #4]	; (80020f8 <HAL_NVIC_EnableIRQ+0x14>)
 80020f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020f4:	4770      	bx	lr
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	e000e100 	.word	0xe000e100

080020fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	1e43      	subs	r3, r0, #1
 8002100:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	4293      	cmp	r3, r2
 8002106:	d20d      	bcs.n	8002124 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002108:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210c:	4807      	ldr	r0, [pc, #28]	; (800212c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002110:	6a03      	ldr	r3, [r0, #32]
 8002112:	0609      	lsls	r1, r1, #24
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	430b      	orrs	r3, r1
 800211a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002124:	4770      	bx	lr
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	e000e010 	.word	0xe000e010
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002132:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002134:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002136:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002138:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800213a:	2c00      	cmp	r4, #0
 800213c:	d002      	beq.n	8002144 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800213e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002140:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002142:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002144:	251c      	movs	r5, #28
 8002146:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002148:	4e08      	ldr	r6, [pc, #32]	; (800216c <DMA_SetConfig+0x3c>)
 800214a:	4025      	ands	r5, r4
 800214c:	2401      	movs	r4, #1
 800214e:	40ac      	lsls	r4, r5
 8002150:	6877      	ldr	r7, [r6, #4]
 8002152:	433c      	orrs	r4, r7
 8002154:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002156:	6804      	ldr	r4, [r0, #0]
 8002158:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215a:	6883      	ldr	r3, [r0, #8]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d102      	bne.n	8002166 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002160:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002162:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002166:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002168:	60e2      	str	r2, [r4, #12]
}
 800216a:	e7fb      	b.n	8002164 <DMA_SetConfig+0x34>
 800216c:	40020000 	.word	0x40020000

08002170 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002170:	b510      	push	{r4, lr}
 8002172:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002174:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002180:	6803      	ldr	r3, [r0, #0]
 8002182:	2114      	movs	r1, #20
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	3808      	subs	r0, #8
 8002188:	f7fd ffce 	bl	8000128 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800218e:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002190:	231f      	movs	r3, #31
 8002192:	4018      	ands	r0, r3
 8002194:	3b1e      	subs	r3, #30
 8002196:	4083      	lsls	r3, r0
 8002198:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800219a:	bd10      	pop	{r4, pc}
 800219c:	10008200 	.word	0x10008200
 80021a0:	40020880 	.word	0x40020880

080021a4 <HAL_DMA_Init>:
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
  if (hdma == NULL)
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	d049      	beq.n	8002242 <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021ae:	6825      	ldr	r5, [r4, #0]
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_DMA_Init+0xac>)
 80021b2:	2114      	movs	r1, #20
 80021b4:	18e8      	adds	r0, r5, r3
 80021b6:	f7fd ffb7 	bl	8000128 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ba:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021bc:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80021be:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021c0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c2:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80021c8:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021ca:	4013      	ands	r3, r2
 80021cc:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80021ce:	68a3      	ldr	r3, [r4, #8]
 80021d0:	682a      	ldr	r2, [r5, #0]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021d6:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80021d8:	430b      	orrs	r3, r1
 80021da:	6961      	ldr	r1, [r4, #20]
 80021dc:	430b      	orrs	r3, r1
 80021de:	69a1      	ldr	r1, [r4, #24]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	69e1      	ldr	r1, [r4, #28]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6a21      	ldr	r1, [r4, #32]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	4313      	orrs	r3, r2
 80021ec:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021ee:	f7ff ffbf 	bl	8002170 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	68a2      	ldr	r2, [r4, #8]
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d101      	bne.n	8002200 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021fc:	2300      	movs	r3, #0
 80021fe:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002200:	233f      	movs	r3, #63	; 0x3f
 8002202:	6862      	ldr	r2, [r4, #4]
 8002204:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002206:	4013      	ands	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800220a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800220c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800220e:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002210:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002212:	2a03      	cmp	r2, #3
 8002214:	d816      	bhi.n	8002244 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002218:	4810      	ldr	r0, [pc, #64]	; (800225c <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800221a:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800221c:	2203      	movs	r2, #3
 800221e:	3b01      	subs	r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	3a02      	subs	r2, #2
 8002224:	409a      	lsls	r2, r3
 8002226:	65a2      	str	r2, [r4, #88]	; 0x58
 8002228:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800222a:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800222c:	0089      	lsls	r1, r1, #2
 800222e:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002230:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002232:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002234:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002236:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002238:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 800223c:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8002240:	77e0      	strb	r0, [r4, #31]
}
 8002242:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002248:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800224a:	65a3      	str	r3, [r4, #88]	; 0x58
 800224c:	e7f3      	b.n	8002236 <HAL_DMA_Init+0x92>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	bffdfff8 	.word	0xbffdfff8
 8002254:	ffff800f 	.word	0xffff800f
 8002258:	1000823f 	.word	0x1000823f
 800225c:	40020940 	.word	0x40020940

08002260 <HAL_DMA_Start_IT>:
{
 8002260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002262:	1d45      	adds	r5, r0, #5
{
 8002264:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002266:	7fee      	ldrb	r6, [r5, #31]
{
 8002268:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800226a:	2002      	movs	r0, #2
 800226c:	2e01      	cmp	r6, #1
 800226e:	d034      	beq.n	80022da <HAL_DMA_Start_IT+0x7a>
 8002270:	3801      	subs	r0, #1
 8002272:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 8002274:	1da7      	adds	r7, r4, #6
 8002276:	7ffe      	ldrb	r6, [r7, #31]
 8002278:	46b4      	mov	ip, r6
 800227a:	4663      	mov	r3, ip
 800227c:	b2f6      	uxtb	r6, r6
 800227e:	9600      	str	r6, [sp, #0]
 8002280:	2600      	movs	r6, #0
 8002282:	4283      	cmp	r3, r0
 8002284:	d131      	bne.n	80022ea <HAL_DMA_Start_IT+0x8a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002286:	3001      	adds	r0, #1
 8002288:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 800228a:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800228e:	6828      	ldr	r0, [r5, #0]
 8002290:	9b00      	ldr	r3, [sp, #0]
 8002292:	4398      	bics	r0, r3
 8002294:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002296:	9b01      	ldr	r3, [sp, #4]
 8002298:	0020      	movs	r0, r4
 800229a:	f7ff ff49 	bl	8002130 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800229e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	42b2      	cmp	r2, r6
 80022a4:	d01a      	beq.n	80022dc <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a6:	220e      	movs	r2, #14
 80022a8:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022b0:	6811      	ldr	r1, [r2, #0]
 80022b2:	03c9      	lsls	r1, r1, #15
 80022b4:	d504      	bpl.n	80022c0 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	6810      	ldr	r0, [r2, #0]
 80022ba:	0049      	lsls	r1, r1, #1
 80022bc:	4301      	orrs	r1, r0
 80022be:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80022c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	6810      	ldr	r0, [r2, #0]
 80022ca:	0049      	lsls	r1, r1, #1
 80022cc:	4301      	orrs	r1, r0
 80022ce:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80022d0:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80022d2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022dc:	2104      	movs	r1, #4
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	438a      	bics	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	220a      	movs	r2, #10
 80022e8:	e7df      	b.n	80022aa <HAL_DMA_Start_IT+0x4a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80022ee:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 80022f0:	e7f3      	b.n	80022da <HAL_DMA_Start_IT+0x7a>
	...

080022f4 <HAL_DMA_IRQHandler>:
{
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022f6:	211c      	movs	r1, #28
 80022f8:	2704      	movs	r7, #4
 80022fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022fe:	4021      	ands	r1, r4
 8002300:	003c      	movs	r4, r7
 8002302:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8002304:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002306:	6803      	ldr	r3, [r0, #0]
 8002308:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800230a:	4226      	tst	r6, r4
 800230c:	d00f      	beq.n	800232e <HAL_DMA_IRQHandler+0x3a>
 800230e:	423d      	tst	r5, r7
 8002310:	d00d      	beq.n	800232e <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	0689      	lsls	r1, r1, #26
 8002316:	d402      	bmi.n	800231e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	43b9      	bics	r1, r7
 800231c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800231e:	6853      	ldr	r3, [r2, #4]
 8002320:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002322:	6b03      	ldr	r3, [r0, #48]	; 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002324:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01b      	beq.n	8002362 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800232a:	4798      	blx	r3
  return;
 800232c:	e019      	b.n	8002362 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800232e:	2702      	movs	r7, #2
 8002330:	003c      	movs	r4, r7
 8002332:	408c      	lsls	r4, r1
 8002334:	4226      	tst	r6, r4
 8002336:	d015      	beq.n	8002364 <HAL_DMA_IRQHandler+0x70>
 8002338:	423d      	tst	r5, r7
 800233a:	d013      	beq.n	8002364 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	0689      	lsls	r1, r1, #26
 8002340:	d406      	bmi.n	8002350 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002342:	250a      	movs	r5, #10
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	43a9      	bics	r1, r5
 8002348:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800234a:	2101      	movs	r1, #1
 800234c:	1d83      	adds	r3, r0, #6
 800234e:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002350:	6853      	ldr	r3, [r2, #4]
 8002352:	431c      	orrs	r4, r3
 8002354:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8002356:	2200      	movs	r2, #0
 8002358:	1d43      	adds	r3, r0, #5
 800235a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 800235c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800235e:	4293      	cmp	r3, r2
 8002360:	d1e3      	bne.n	800232a <HAL_DMA_IRQHandler+0x36>
}
 8002362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002364:	2408      	movs	r4, #8
 8002366:	0027      	movs	r7, r4
 8002368:	408f      	lsls	r7, r1
 800236a:	423e      	tst	r6, r7
 800236c:	d0f9      	beq.n	8002362 <HAL_DMA_IRQHandler+0x6e>
 800236e:	4225      	tst	r5, r4
 8002370:	d0f7      	beq.n	8002362 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	250e      	movs	r5, #14
 8002374:	681c      	ldr	r4, [r3, #0]
 8002376:	43ac      	bics	r4, r5
 8002378:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800237a:	2301      	movs	r3, #1
 800237c:	001d      	movs	r5, r3
 800237e:	408d      	lsls	r5, r1
 8002380:	0029      	movs	r1, r5
 8002382:	6854      	ldr	r4, [r2, #4]
 8002384:	4321      	orrs	r1, r4
 8002386:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002388:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800238a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800238c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800238e:	2200      	movs	r2, #0
 8002390:	1d43      	adds	r3, r0, #5
 8002392:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002394:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002396:	e7e2      	b.n	800235e <HAL_DMA_IRQHandler+0x6a>
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800239c:	2300      	movs	r3, #0
{
 800239e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a2:	680a      	ldr	r2, [r1, #0]
 80023a4:	0014      	movs	r4, r2
 80023a6:	40dc      	lsrs	r4, r3
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 80023aa:	b005      	add	sp, #20
 80023ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ae:	2501      	movs	r5, #1
 80023b0:	0014      	movs	r4, r2
 80023b2:	409d      	lsls	r5, r3
 80023b4:	402c      	ands	r4, r5
 80023b6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80023b8:	422a      	tst	r2, r5
 80023ba:	d100      	bne.n	80023be <HAL_GPIO_Init+0x22>
 80023bc:	e08e      	b.n	80024dc <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023be:	684a      	ldr	r2, [r1, #4]
 80023c0:	005e      	lsls	r6, r3, #1
 80023c2:	4694      	mov	ip, r2
 80023c4:	2203      	movs	r2, #3
 80023c6:	4664      	mov	r4, ip
 80023c8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023ca:	2403      	movs	r4, #3
 80023cc:	40b4      	lsls	r4, r6
 80023ce:	43e4      	mvns	r4, r4
 80023d0:	9402      	str	r4, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d2:	1e54      	subs	r4, r2, #1
 80023d4:	2c01      	cmp	r4, #1
 80023d6:	d82a      	bhi.n	800242e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80023d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023da:	9c02      	ldr	r4, [sp, #8]
 80023dc:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023de:	68cc      	ldr	r4, [r1, #12]
 80023e0:	40b4      	lsls	r4, r6
 80023e2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80023e4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80023e6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e8:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ea:	43ac      	bics	r4, r5
 80023ec:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	4664      	mov	r4, ip
 80023f0:	0924      	lsrs	r4, r4, #4
 80023f2:	403c      	ands	r4, r7
 80023f4:	409c      	lsls	r4, r3
 80023f6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80023f8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80023fa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023fc:	9c02      	ldr	r4, [sp, #8]
 80023fe:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002400:	688c      	ldr	r4, [r1, #8]
 8002402:	40b4      	lsls	r4, r6
 8002404:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002406:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002408:	2a02      	cmp	r2, #2
 800240a:	d112      	bne.n	8002432 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 800240c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800240e:	2507      	movs	r5, #7
 8002410:	00a4      	lsls	r4, r4, #2
 8002412:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8002414:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002416:	9403      	str	r4, [sp, #12]
 8002418:	240f      	movs	r4, #15
 800241a:	401d      	ands	r5, r3
 800241c:	00ad      	lsls	r5, r5, #2
 800241e:	40ac      	lsls	r4, r5
 8002420:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002422:	690c      	ldr	r4, [r1, #16]
 8002424:	40ac      	lsls	r4, r5
 8002426:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002428:	9c03      	ldr	r4, [sp, #12]
 800242a:	6227      	str	r7, [r4, #32]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242e:	2a03      	cmp	r2, #3
 8002430:	d1e3      	bne.n	80023fa <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8002432:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002434:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002436:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002438:	4025      	ands	r5, r4
 800243a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800243c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800243e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002440:	24c0      	movs	r4, #192	; 0xc0
 8002442:	4662      	mov	r2, ip
 8002444:	02a4      	lsls	r4, r4, #10
 8002446:	4222      	tst	r2, r4
 8002448:	d048      	beq.n	80024dc <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800244c:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 800244e:	089c      	lsrs	r4, r3, #2
 8002450:	00a4      	lsls	r4, r4, #2
 8002452:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002454:	220f      	movs	r2, #15
 8002456:	401d      	ands	r5, r3
 8002458:	00ed      	lsls	r5, r5, #3
 800245a:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800245c:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800245e:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002460:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002462:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002464:	2200      	movs	r2, #0
 8002466:	42b8      	cmp	r0, r7
 8002468:	d00c      	beq.n	8002484 <HAL_GPIO_Init+0xe8>
 800246a:	4f1e      	ldr	r7, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x148>)
 800246c:	3201      	adds	r2, #1
 800246e:	42b8      	cmp	r0, r7
 8002470:	d008      	beq.n	8002484 <HAL_GPIO_Init+0xe8>
 8002472:	4f1d      	ldr	r7, [pc, #116]	; (80024e8 <HAL_GPIO_Init+0x14c>)
 8002474:	3201      	adds	r2, #1
 8002476:	42b8      	cmp	r0, r7
 8002478:	d004      	beq.n	8002484 <HAL_GPIO_Init+0xe8>
 800247a:	4f1c      	ldr	r7, [pc, #112]	; (80024ec <HAL_GPIO_Init+0x150>)
 800247c:	3201      	adds	r2, #1
 800247e:	42b8      	cmp	r0, r7
 8002480:	d000      	beq.n	8002484 <HAL_GPIO_Init+0xe8>
 8002482:	3202      	adds	r2, #2
 8002484:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002486:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002488:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 800248a:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 800248c:	4c14      	ldr	r4, [pc, #80]	; (80024e0 <HAL_GPIO_Init+0x144>)
        temp &= ~(iocurrent);
 800248e:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR1;
 8002490:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8002492:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8002494:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8002496:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002498:	02ff      	lsls	r7, r7, #11
 800249a:	d401      	bmi.n	80024a0 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 800249c:	0035      	movs	r5, r6
 800249e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a0:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 80024a2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80024a4:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 80024a6:	9d01      	ldr	r5, [sp, #4]
 80024a8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024aa:	02bf      	lsls	r7, r7, #10
 80024ac:	d401      	bmi.n	80024b2 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 80024ae:	0035      	movs	r5, r6
 80024b0:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b2:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 80024b4:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 80024b6:	4c0e      	ldr	r4, [pc, #56]	; (80024f0 <HAL_GPIO_Init+0x154>)
          temp |= iocurrent;
 80024b8:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->EMR1;
 80024ba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80024bc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024be:	03bf      	lsls	r7, r7, #14
 80024c0:	d401      	bmi.n	80024c6 <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 80024c2:	0035      	movs	r5, r6
 80024c4:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c6:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 80024c8:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 80024ca:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 80024cc:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->IMR1;
 80024ce:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80024d0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d2:	03ff      	lsls	r7, r7, #15
 80024d4:	d401      	bmi.n	80024da <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 80024d6:	4015      	ands	r5, r2
 80024d8:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 80024da:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 80024dc:	3301      	adds	r3, #1
 80024de:	e760      	b.n	80023a2 <HAL_GPIO_Init+0x6>
 80024e0:	40021800 	.word	0x40021800
 80024e4:	50000400 	.word	0x50000400
 80024e8:	50000800 	.word	0x50000800
 80024ec:	50000c00 	.word	0x50000c00
 80024f0:	40021808 	.word	0x40021808
 80024f4:	40021804 	.word	0x40021804

080024f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d001      	beq.n	8002500 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fe:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002500:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002502:	e7fc      	b.n	80024fe <HAL_GPIO_WritePin+0x6>

08002504 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002504:	4770      	bx	lr
	...

08002508 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002508:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800250a:	4d08      	ldr	r5, [pc, #32]	; (800252c <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 800250c:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800250e:	68eb      	ldr	r3, [r5, #12]
 8002510:	4218      	tst	r0, r3
 8002512:	d002      	beq.n	800251a <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002514:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002516:	f7ff fff5 	bl	8002504 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800251a:	692b      	ldr	r3, [r5, #16]
 800251c:	4223      	tst	r3, r4
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002520:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002522:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002524:	f7ff f84e 	bl	80015c4 <HAL_GPIO_EXTI_Falling_Callback>
}
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40021800 	.word	0x40021800

08002530 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002530:	6803      	ldr	r3, [r0, #0]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	0792      	lsls	r2, r2, #30
 8002536:	d501      	bpl.n	800253c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253c:	2201      	movs	r2, #1
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	4211      	tst	r1, r2
 8002542:	d102      	bne.n	800254a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002544:	6999      	ldr	r1, [r3, #24]
 8002546:	430a      	orrs	r2, r1
 8002548:	619a      	str	r2, [r3, #24]
  }
}
 800254a:	4770      	bx	lr

0800254c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800254c:	b530      	push	{r4, r5, lr}
 800254e:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002550:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002552:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002554:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002556:	0589      	lsls	r1, r1, #22
 8002558:	431a      	orrs	r2, r3
 800255a:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <I2C_TransferConfig+0x28>)
 800255e:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002560:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002562:	0d64      	lsrs	r4, r4, #21
 8002564:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002566:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002568:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256a:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800256c:	432a      	orrs	r2, r5
 800256e:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002570:	bd30      	pop	{r4, r5, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	03ff63ff 	.word	0x03ff63ff

08002578 <I2C_IsErrorOccurred>:
{
 8002578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800257a:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800257c:	6802      	ldr	r2, [r0, #0]
{
 800257e:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002580:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002582:	2310      	movs	r3, #16
 8002584:	000f      	movs	r7, r1
{
 8002586:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002588:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800258c:	4219      	tst	r1, r3
 800258e:	d00e      	beq.n	80025ae <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002590:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002592:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002594:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	423a      	tst	r2, r7
 800259e:	d164      	bne.n	800266a <I2C_IsErrorOccurred+0xf2>
 80025a0:	9a01      	ldr	r2, [sp, #4]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d032      	beq.n	800260c <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80025a6:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80025aa:	9b00      	ldr	r3, [sp, #0]
 80025ac:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ae:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80025b0:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025b2:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80025b4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025b6:	420a      	tst	r2, r1
 80025b8:	d002      	beq.n	80025c0 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80025ba:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025bc:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80025be:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	00c9      	lsls	r1, r1, #3
 80025c4:	420a      	tst	r2, r1
 80025c6:	d003      	beq.n	80025d0 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80025c8:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025ca:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80025cc:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80025ce:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0089      	lsls	r1, r1, #2
 80025d4:	420a      	tst	r2, r1
 80025d6:	d04d      	beq.n	8002674 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80025d8:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025da:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80025dc:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80025de:	0020      	movs	r0, r4
 80025e0:	f7ff ffa6 	bl	8002530 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	4925      	ldr	r1, [pc, #148]	; (800267c <I2C_IsErrorOccurred+0x104>)
 80025e8:	6853      	ldr	r3, [r2, #4]
 80025ea:	400b      	ands	r3, r1
 80025ec:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	0023      	movs	r3, r4
 80025f0:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80025f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80025f6:	4307      	orrs	r7, r0
 80025f8:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	0022      	movs	r2, r4
 80025fe:	2300      	movs	r3, #0
 8002600:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002602:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002606:	2001      	movs	r0, #1
 8002608:	7023      	strb	r3, [r4, #0]
 800260a:	e035      	b.n	8002678 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 800260c:	1c72      	adds	r2, r6, #1
 800260e:	d0c4      	beq.n	800259a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7ff f902 	bl	8001818 <HAL_GetTick>
 8002614:	1b40      	subs	r0, r0, r5
 8002616:	42b0      	cmp	r0, r6
 8002618:	d801      	bhi.n	800261e <I2C_IsErrorOccurred+0xa6>
 800261a:	2e00      	cmp	r6, #0
 800261c:	d1bc      	bne.n	8002598 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 800261e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002620:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002622:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002624:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002626:	7811      	ldrb	r1, [r2, #0]
 8002628:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800262a:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 800262c:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	0209      	lsls	r1, r1, #8
 8002632:	420a      	tst	r2, r1
 8002634:	d00c      	beq.n	8002650 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800263a:	4210      	tst	r0, r2
 800263c:	d108      	bne.n	8002650 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 800263e:	4661      	mov	r1, ip
 8002640:	2920      	cmp	r1, #32
 8002642:	d005      	beq.n	8002650 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800264a:	f7ff f8e5 	bl	8001818 <HAL_GetTick>
 800264e:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	423b      	tst	r3, r7
 8002656:	d19f      	bne.n	8002598 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002658:	f7ff f8de 	bl	8001818 <HAL_GetTick>
 800265c:	1b40      	subs	r0, r0, r5
 800265e:	2819      	cmp	r0, #25
 8002660:	d9f6      	bls.n	8002650 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002664:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	e796      	b.n	8002598 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800266a:	9a01      	ldr	r2, [sp, #4]
 800266c:	2a00      	cmp	r2, #0
 800266e:	d19a      	bne.n	80025a6 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002670:	61df      	str	r7, [r3, #28]
 8002672:	e798      	b.n	80025a6 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8002674:	2800      	cmp	r0, #0
 8002676:	d1b2      	bne.n	80025de <I2C_IsErrorOccurred+0x66>
}
 8002678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	fe00e800 	.word	0xfe00e800

08002680 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	0004      	movs	r4, r0
 8002684:	000d      	movs	r5, r1
 8002686:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002688:	2702      	movs	r7, #2
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	423b      	tst	r3, r7
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002692:	2000      	movs	r0, #0
}
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002696:	0032      	movs	r2, r6
 8002698:	0029      	movs	r1, r5
 800269a:	0020      	movs	r0, r4
 800269c:	f7ff ff6c 	bl	8002578 <I2C_IsErrorOccurred>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d115      	bne.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80026a4:	1c6b      	adds	r3, r5, #1
 80026a6:	d0f0      	beq.n	800268a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7ff f8b6 	bl	8001818 <HAL_GetTick>
 80026ac:	1b80      	subs	r0, r0, r6
 80026ae:	42a8      	cmp	r0, r5
 80026b0:	d801      	bhi.n	80026b6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	d1e9      	bne.n	800268a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b6:	2220      	movs	r2, #32
 80026b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ba:	4313      	orrs	r3, r2
 80026bc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026be:	0023      	movs	r3, r4
 80026c0:	3341      	adds	r3, #65	; 0x41
 80026c2:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	0022      	movs	r2, r4
 80026c6:	2300      	movs	r3, #0
 80026c8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80026ca:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80026ce:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80026d0:	2001      	movs	r0, #1
 80026d2:	e7df      	b.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080026d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	0004      	movs	r4, r0
 80026d8:	000d      	movs	r5, r1
 80026da:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026dc:	2704      	movs	r7, #4
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	423b      	tst	r3, r7
 80026e4:	d111      	bne.n	800270a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e6:	0032      	movs	r2, r6
 80026e8:	0029      	movs	r1, r5
 80026ea:	0020      	movs	r0, r4
 80026ec:	f7ff ff44 	bl	8002578 <I2C_IsErrorOccurred>
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d124      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026f4:	2120      	movs	r1, #32
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	420a      	tst	r2, r1
 80026fc:	d023      	beq.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	423a      	tst	r2, r7
 8002702:	d004      	beq.n	800270e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002704:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002706:	2a00      	cmp	r2, #0
 8002708:	d001      	beq.n	800270e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 800270a:	2000      	movs	r0, #0
}
 800270c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	2210      	movs	r2, #16
 8002712:	0008      	movs	r0, r1
 8002714:	4010      	ands	r0, r2
 8002716:	4211      	tst	r1, r2
 8002718:	d013      	beq.n	8002742 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800271c:	3a0c      	subs	r2, #12
 800271e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002720:	2120      	movs	r1, #32
 8002722:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4810      	ldr	r0, [pc, #64]	; (8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>)
 8002728:	4002      	ands	r2, r0
 800272a:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800272c:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800272e:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002730:	3341      	adds	r3, #65	; 0x41
 8002732:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	2300      	movs	r3, #0
 8002736:	3242      	adds	r2, #66	; 0x42
 8002738:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800273a:	3440      	adds	r4, #64	; 0x40
      __HAL_UNLOCK(hi2c);
 800273c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e7e4      	b.n	800270c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	6460      	str	r0, [r4, #68]	; 0x44
 8002744:	e7ec      	b.n	8002720 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7ff f867 	bl	8001818 <HAL_GetTick>
 800274a:	1b80      	subs	r0, r0, r6
 800274c:	42a8      	cmp	r0, r5
 800274e:	d801      	bhi.n	8002754 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8002750:	2d00      	cmp	r5, #0
 8002752:	d1c4      	bne.n	80026de <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	2220      	movs	r2, #32
 8002756:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002758:	4313      	orrs	r3, r2
 800275a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800275c:	0023      	movs	r3, r4
 800275e:	3341      	adds	r3, #65	; 0x41
 8002760:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8002762:	3440      	adds	r4, #64	; 0x40
 8002764:	2300      	movs	r3, #0
 8002766:	e7e9      	b.n	800273c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8002768:	fe00e800 	.word	0xfe00e800

0800276c <I2C_WaitOnFlagUntilTimeout>:
{
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	0004      	movs	r4, r0
 8002770:	000e      	movs	r6, r1
 8002772:	0017      	movs	r7, r2
 8002774:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6993      	ldr	r3, [r2, #24]
 800277a:	4033      	ands	r3, r6
 800277c:	1b9b      	subs	r3, r3, r6
 800277e:	4259      	negs	r1, r3
 8002780:	414b      	adcs	r3, r1
 8002782:	42bb      	cmp	r3, r7
 8002784:	d001      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002786:	2000      	movs	r0, #0
 8002788:	e017      	b.n	80027ba <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800278a:	1c6b      	adds	r3, r5, #1
 800278c:	d0f4      	beq.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7ff f843 	bl	8001818 <HAL_GetTick>
 8002792:	9b06      	ldr	r3, [sp, #24]
 8002794:	1ac0      	subs	r0, r0, r3
 8002796:	42a8      	cmp	r0, r5
 8002798:	d801      	bhi.n	800279e <I2C_WaitOnFlagUntilTimeout+0x32>
 800279a:	2d00      	cmp	r5, #0
 800279c:	d1eb      	bne.n	8002776 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	2220      	movs	r2, #32
 80027a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80027a2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	4313      	orrs	r3, r2
 80027a6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	0023      	movs	r3, r4
 80027aa:	3341      	adds	r3, #65	; 0x41
 80027ac:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	0022      	movs	r2, r4
 80027b0:	2300      	movs	r3, #0
 80027b2:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80027b4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80027b8:	7023      	strb	r3, [r4, #0]
}
 80027ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	0004      	movs	r4, r0
 80027c0:	000d      	movs	r5, r1
 80027c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c4:	2720      	movs	r7, #32
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	423b      	tst	r3, r7
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
}
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	0032      	movs	r2, r6
 80027d4:	0029      	movs	r1, r5
 80027d6:	0020      	movs	r0, r4
 80027d8:	f7ff fece 	bl	8002578 <I2C_IsErrorOccurred>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d113      	bne.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7ff f81a 	bl	8001818 <HAL_GetTick>
 80027e4:	1b80      	subs	r0, r0, r6
 80027e6:	42a8      	cmp	r0, r5
 80027e8:	d801      	bhi.n	80027ee <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d1eb      	bne.n	80027c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ee:	2220      	movs	r2, #32
 80027f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027f2:	4313      	orrs	r3, r2
 80027f4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	0023      	movs	r3, r4
 80027f8:	3341      	adds	r3, #65	; 0x41
 80027fa:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	0022      	movs	r2, r4
 80027fe:	2300      	movs	r3, #0
 8002800:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002802:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002806:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002808:	2001      	movs	r0, #1
 800280a:	e7e1      	b.n	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

0800280c <HAL_I2C_Init>:
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002812:	2c00      	cmp	r4, #0
 8002814:	d03f      	beq.n	8002896 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	0025      	movs	r5, r4
 8002818:	3541      	adds	r5, #65	; 0x41
 800281a:	782b      	ldrb	r3, [r5, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	0023      	movs	r3, r4
 8002824:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002826:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002828:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800282a:	f7fe fc7d 	bl	8001128 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800282e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002830:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002832:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002834:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002836:	481d      	ldr	r0, [pc, #116]	; (80028ac <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8002838:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800283a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800283c:	438a      	bics	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002840:	6861      	ldr	r1, [r4, #4]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_I2C_Init+0xa4>)
 8002844:	400a      	ands	r2, r1
 8002846:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4002      	ands	r2, r0
 800284c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800284e:	68e2      	ldr	r2, [r4, #12]
 8002850:	2a01      	cmp	r2, #1
 8002852:	d121      	bne.n	8002898 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	0209      	lsls	r1, r1, #8
 8002858:	4331      	orrs	r1, r6
 800285a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4915      	ldr	r1, [pc, #84]	; (80028b4 <HAL_I2C_Init+0xa8>)
 8002860:	4311      	orrs	r1, r2
 8002862:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002864:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002866:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002868:	4002      	ands	r2, r0
 800286a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286c:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002870:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002872:	69a1      	ldr	r1, [r4, #24]
 8002874:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002876:	430a      	orrs	r2, r1
 8002878:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800287a:	6a21      	ldr	r1, [r4, #32]
 800287c:	69e2      	ldr	r2, [r4, #28]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002882:	2201      	movs	r2, #1
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800288a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800288e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002890:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	3442      	adds	r4, #66	; 0x42
 8002894:	7020      	strb	r0, [r4, #0]
}
 8002896:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002898:	2184      	movs	r1, #132	; 0x84
 800289a:	0209      	lsls	r1, r1, #8
 800289c:	4331      	orrs	r1, r6
 800289e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a0:	2a02      	cmp	r2, #2
 80028a2:	d1db      	bne.n	800285c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e7d7      	b.n	800285c <HAL_I2C_Init+0x50>
 80028ac:	ffff7fff 	.word	0xffff7fff
 80028b0:	f0ffffff 	.word	0xf0ffffff
 80028b4:	02008000 	.word	0x02008000

080028b8 <HAL_I2C_Master_Transmit>:
{
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ba:	b087      	sub	sp, #28
 80028bc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	0003      	movs	r3, r0
 80028c0:	3341      	adds	r3, #65	; 0x41
{
 80028c2:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	9303      	str	r3, [sp, #12]
 80028c6:	781b      	ldrb	r3, [r3, #0]
{
 80028c8:	0004      	movs	r4, r0
 80028ca:	000f      	movs	r7, r1
    return HAL_BUSY;
 80028cc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d114      	bne.n	80028fc <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 80028d2:	0023      	movs	r3, r4
 80028d4:	3340      	adds	r3, #64	; 0x40
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	2a01      	cmp	r2, #1
 80028da:	d00f      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x44>
 80028dc:	2601      	movs	r6, #1
 80028de:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80028e0:	f7fe ff9a 	bl	8001818 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e4:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80028e6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e8:	9000      	str	r0, [sp, #0]
 80028ea:	2319      	movs	r3, #25
 80028ec:	0032      	movs	r2, r6
 80028ee:	0020      	movs	r0, r4
 80028f0:	0209      	lsls	r1, r1, #8
 80028f2:	f7ff ff3b 	bl	800276c <I2C_WaitOnFlagUntilTimeout>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d002      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
}
 80028fc:	b007      	add	sp, #28
 80028fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002900:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002902:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002904:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002906:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002908:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800290a:	3b11      	subs	r3, #17
 800290c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800290e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002912:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002914:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002916:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002918:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800291a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_I2C_Master_Transmit+0x11c>)
 800291e:	2aff      	cmp	r2, #255	; 0xff
 8002920:	d920      	bls.n	8002964 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800292c:	0039      	movs	r1, r7
 800292e:	0020      	movs	r0, r4
 8002930:	f7ff fe0c 	bl	800254c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002934:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	002a      	movs	r2, r5
 8002938:	0020      	movs	r0, r4
 800293a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002940:	f7ff ff3c 	bl	80027bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002944:	2800      	cmp	r0, #0
 8002946:	d1d8      	bne.n	80028fa <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002948:	2120      	movs	r1, #32
 800294a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800294c:	4d22      	ldr	r5, [pc, #136]	; (80029d8 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	402a      	ands	r2, r5
 8002954:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002958:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	3341      	adds	r3, #65	; 0x41
 800295c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002960:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002962:	e7cb      	b.n	80028fc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002964:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002966:	b292      	uxth	r2, r2
 8002968:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	049b      	lsls	r3, r3, #18
 8002972:	e7db      	b.n	800292c <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	f7ff fe84 	bl	8002680 <I2C_WaitOnTXISFlagUntilTimeout>
 8002978:	2800      	cmp	r0, #0
 800297a:	d1be      	bne.n	80028fa <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800297c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002982:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002984:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002986:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800298a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800298c:	3b01      	subs	r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002992:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002996:	b292      	uxth	r2, r2
 8002998:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ca      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x7c>
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d1c8      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029a2:	2180      	movs	r1, #128	; 0x80
 80029a4:	0020      	movs	r0, r4
 80029a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029a8:	9500      	str	r5, [sp, #0]
 80029aa:	f7ff fedf 	bl	800276c <I2C_WaitOnFlagUntilTimeout>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d1a3      	bne.n	80028fa <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029b4:	2bff      	cmp	r3, #255	; 0xff
 80029b6:	d906      	bls.n	80029c6 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b8:	23ff      	movs	r3, #255	; 0xff
 80029ba:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	9000      	str	r0, [sp, #0]
 80029c2:	045b      	lsls	r3, r3, #17
 80029c4:	e7b2      	b.n	800292c <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80029c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029c8:	b292      	uxth	r2, r2
 80029ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	9000      	str	r0, [sp, #0]
 80029d0:	e7cd      	b.n	800296e <HAL_I2C_Master_Transmit+0xb6>
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	80002000 	.word	0x80002000
 80029d8:	fe00e800 	.word	0xfe00e800

080029dc <HAL_I2C_Master_Receive>:
{
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	0003      	movs	r3, r0
 80029e4:	3341      	adds	r3, #65	; 0x41
{
 80029e6:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	9303      	str	r3, [sp, #12]
 80029ea:	781b      	ldrb	r3, [r3, #0]
{
 80029ec:	0004      	movs	r4, r0
 80029ee:	000f      	movs	r7, r1
    return HAL_BUSY;
 80029f0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d114      	bne.n	8002a20 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 80029f6:	0023      	movs	r3, r4
 80029f8:	3340      	adds	r3, #64	; 0x40
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	2a01      	cmp	r2, #1
 80029fe:	d00f      	beq.n	8002a20 <HAL_I2C_Master_Receive+0x44>
 8002a00:	2601      	movs	r6, #1
 8002a02:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002a04:	f7fe ff08 	bl	8001818 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a08:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002a0a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a0c:	9000      	str	r0, [sp, #0]
 8002a0e:	2319      	movs	r3, #25
 8002a10:	0032      	movs	r2, r6
 8002a12:	0020      	movs	r0, r4
 8002a14:	0209      	lsls	r1, r1, #8
 8002a16:	f7ff fea9 	bl	800276c <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	b007      	add	sp, #28
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a24:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a26:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a28:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a2a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a2c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a2e:	3b12      	subs	r3, #18
 8002a30:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002a32:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a36:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a38:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002a3a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002a3c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_I2C_Master_Receive+0x11c>)
 8002a42:	2aff      	cmp	r2, #255	; 0xff
 8002a44:	d920      	bls.n	8002a88 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a50:	0039      	movs	r1, r7
 8002a52:	0020      	movs	r0, r4
 8002a54:	f7ff fd7a 	bl	800254c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	002a      	movs	r2, r5
 8002a5c:	0020      	movs	r0, r4
 8002a5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	f7ff feaa 	bl	80027bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d1d8      	bne.n	8002a1e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002a70:	4d22      	ldr	r5, [pc, #136]	; (8002afc <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a72:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	402a      	ands	r2, r5
 8002a78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002a7c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	3341      	adds	r3, #65	; 0x41
 8002a80:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a82:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002a84:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002a86:	e7cb      	b.n	8002a20 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002a88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	049b      	lsls	r3, r3, #18
 8002a96:	e7db      	b.n	8002a50 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a98:	f7ff fe1c 	bl	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d1be      	bne.n	8002a1e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002aaa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002aac:	3301      	adds	r3, #1
 8002aae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ab0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002abc:	b292      	uxth	r2, r2
 8002abe:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0c9      	beq.n	8002a58 <HAL_I2C_Master_Receive+0x7c>
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d1c7      	bne.n	8002a58 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0020      	movs	r0, r4
 8002acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ace:	9500      	str	r5, [sp, #0]
 8002ad0:	f7ff fe4c 	bl	800276c <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d1a2      	bne.n	8002a1e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d906      	bls.n	8002aec <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	23ff      	movs	r3, #255	; 0xff
 8002ae0:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	22ff      	movs	r2, #255	; 0xff
 8002ae6:	9000      	str	r0, [sp, #0]
 8002ae8:	045b      	lsls	r3, r3, #17
 8002aea:	e7b1      	b.n	8002a50 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002aec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002aee:	b292      	uxth	r2, r2
 8002af0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	9000      	str	r0, [sp, #0]
 8002af6:	e7cc      	b.n	8002a92 <HAL_I2C_Master_Receive+0xb6>
 8002af8:	80002400 	.word	0x80002400
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	0004      	movs	r4, r0
 8002b04:	3441      	adds	r4, #65	; 0x41
 8002b06:	7822      	ldrb	r2, [r4, #0]
{
 8002b08:	0003      	movs	r3, r0
 8002b0a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	b2d6      	uxtb	r6, r2
 8002b10:	2a20      	cmp	r2, #32
 8002b12:	d118      	bne.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002b14:	001d      	movs	r5, r3
 8002b16:	3540      	adds	r5, #64	; 0x40
 8002b18:	782a      	ldrb	r2, [r5, #0]
 8002b1a:	2a01      	cmp	r2, #1
 8002b1c:	d013      	beq.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3a23      	subs	r2, #35	; 0x23
 8002b26:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b28:	4807      	ldr	r0, [pc, #28]	; (8002b48 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002b2a:	4391      	bics	r1, r2
 8002b2c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002b32:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b34:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	4339      	orrs	r1, r7
 8002b3a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002b44:	7028      	strb	r0, [r5, #0]
  }
}
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b48:	ffffefff 	.word	0xffffefff

08002b4c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	0002      	movs	r2, r0
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b50:	3241      	adds	r2, #65	; 0x41
 8002b52:	7814      	ldrb	r4, [r2, #0]
{
 8002b54:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	2c20      	cmp	r4, #32
 8002b5c:	d117      	bne.n	8002b8e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002b5e:	001c      	movs	r4, r3
 8002b60:	3440      	adds	r4, #64	; 0x40
 8002b62:	7826      	ldrb	r6, [r4, #0]
 8002b64:	2e01      	cmp	r6, #1
 8002b66:	d012      	beq.n	8002b8e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	3022      	adds	r0, #34	; 0x22
 8002b6a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3823      	subs	r0, #35	; 0x23
 8002b70:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002b72:	4f07      	ldr	r7, [pc, #28]	; (8002b90 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002b74:	4386      	bics	r6, r0
 8002b76:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002b78:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002b7a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002b7c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002b7e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002b80:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	4308      	orrs	r0, r1
 8002b86:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002b88:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002b8c:	7020      	strb	r0, [r4, #0]
  }
}
 8002b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b90:	fffff0ff 	.word	0xfffff0ff

08002b94 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 8002b98:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 8002b9a:	2c00      	cmp	r4, #0
 8002b9c:	d017      	beq.n	8002bce <HAL_IWDG_Init+0x3a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	4a12      	ldr	r2, [pc, #72]	; (8002bec <HAL_IWDG_Init+0x58>)

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002ba2:	2507      	movs	r5, #7
  __HAL_IWDG_START(hiwdg);
 8002ba4:	601a      	str	r2, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <HAL_IWDG_Init+0x5c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002baa:	6862      	ldr	r2, [r4, #4]
 8002bac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002bae:	68a2      	ldr	r2, [r4, #8]
 8002bb0:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8002bb2:	f7fe fe31 	bl	8001818 <HAL_GetTick>
 8002bb6:	0006      	movs	r6, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	4028      	ands	r0, r5
 8002bc0:	422a      	tst	r2, r5
 8002bc2:	d105      	bne.n	8002bd0 <HAL_IWDG_Init+0x3c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	68e2      	ldr	r2, [r4, #12]
 8002bc8:	4291      	cmp	r1, r2
 8002bca:	d00c      	beq.n	8002be6 <HAL_IWDG_Init+0x52>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002bcc:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002bd0:	f7fe fe22 	bl	8001818 <HAL_GetTick>
 8002bd4:	1b80      	subs	r0, r0, r6
 8002bd6:	2831      	cmp	r0, #49	; 0x31
 8002bd8:	d9ee      	bls.n	8002bb8 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	422b      	tst	r3, r5
 8002be0:	d0ea      	beq.n	8002bb8 <HAL_IWDG_Init+0x24>
        return HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
 8002be4:	e7f3      	b.n	8002bce <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002be6:	4a03      	ldr	r2, [pc, #12]	; (8002bf4 <HAL_IWDG_Init+0x60>)
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e7f0      	b.n	8002bce <HAL_IWDG_Init+0x3a>
 8002bec:	0000cccc 	.word	0x0000cccc
 8002bf0:	00005555 	.word	0x00005555
 8002bf4:	0000aaaa 	.word	0x0000aaaa

08002bf8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002bf8:	6803      	ldr	r3, [r0, #0]
 8002bfa:	4a02      	ldr	r2, [pc, #8]	; (8002c04 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8002bfc:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	4770      	bx	lr
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	0000aaaa 	.word	0x0000aaaa

08002c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c08:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c0a:	4c11      	ldr	r4, [pc, #68]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002c0c:	4911      	ldr	r1, [pc, #68]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002c0e:	6823      	ldr	r3, [r4, #0]
{
 8002c10:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c12:	400b      	ands	r3, r1
 8002c14:	4303      	orrs	r3, r0
 8002c16:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c18:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10e      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002c24:	490d      	ldr	r1, [pc, #52]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	2306      	movs	r3, #6
 8002c2a:	4358      	muls	r0, r3
 8002c2c:	f7fd fa7c 	bl	8000128 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c30:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c32:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c34:	00d2      	lsls	r2, r2, #3
 8002c36:	6961      	ldr	r1, [r4, #20]
 8002c38:	0008      	movs	r0, r1
 8002c3a:	4010      	ands	r0, r2
 8002c3c:	4211      	tst	r1, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8002c40:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8002c46:	3b01      	subs	r3, #1
 8002c48:	e7f5      	b.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002c4a:	2003      	movs	r0, #3
 8002c4c:	e7f8      	b.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x38>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40007000 	.word	0x40007000
 8002c54:	fffff9ff 	.word	0xfffff9ff
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	000f4240 	.word	0x000f4240

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c62:	0004      	movs	r4, r0
 8002c64:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d023      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	6803      	ldr	r3, [r0, #0]
 8002c6c:	07db      	lsls	r3, r3, #31
 8002c6e:	d410      	bmi.n	8002c92 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	079b      	lsls	r3, r3, #30
 8002c74:	d45e      	bmi.n	8002d34 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	d500      	bpl.n	8002c7e <HAL_RCC_OscConfig+0x1e>
 8002c7c:	e0c3      	b.n	8002e06 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	075b      	lsls	r3, r3, #29
 8002c82:	d500      	bpl.n	8002c86 <HAL_RCC_OscConfig+0x26>
 8002c84:	e0f4      	b.n	8002e70 <HAL_RCC_OscConfig+0x210>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c86:	69e3      	ldr	r3, [r4, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d000      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2e>
 8002c8c:	e17a      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2000      	movs	r0, #0
 8002c90:	e029      	b.n	8002ce6 <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c92:	2238      	movs	r2, #56	; 0x38
 8002c94:	4daf      	ldr	r5, [pc, #700]	; (8002f54 <HAL_RCC_OscConfig+0x2f4>)
 8002c96:	68ab      	ldr	r3, [r5, #8]
 8002c98:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca0:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ca2:	0793      	lsls	r3, r2, #30
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	039b      	lsls	r3, r3, #14
 8002caa:	d5e1      	bpl.n	8002c70 <HAL_RCC_OscConfig+0x10>
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1de      	bne.n	8002c70 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e017      	b.n	8002ce6 <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d0f5      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	0252      	lsls	r2, r2, #9
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0x8a>
 8002cc4:	682a      	ldr	r2, [r5, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002cca:	f7fe fda5 	bl	8001818 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cce:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002cd0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	02bf      	lsls	r7, r7, #10
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	423b      	tst	r3, r7
 8002cd8:	d1ca      	bne.n	8002c70 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cda:	f7fe fd9d 	bl	8001818 <HAL_GetTick>
 8002cde:	1b80      	subs	r0, r0, r6
 8002ce0:	2864      	cmp	r0, #100	; 0x64
 8002ce2:	d9f7      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
}
 8002ce6:	b005      	add	sp, #20
 8002ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	21a0      	movs	r1, #160	; 0xa0
 8002cec:	02c9      	lsls	r1, r1, #11
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0xa4>
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	6829      	ldr	r1, [r5, #0]
 8002cf6:	02db      	lsls	r3, r3, #11
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	e7e2      	b.n	8002cca <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	682a      	ldr	r2, [r5, #0]
 8002d06:	4994      	ldr	r1, [pc, #592]	; (8002f58 <HAL_RCC_OscConfig+0x2f8>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	602a      	str	r2, [r5, #0]
 8002d0c:	682a      	ldr	r2, [r5, #0]
 8002d0e:	4993      	ldr	r1, [pc, #588]	; (8002f5c <HAL_RCC_OscConfig+0x2fc>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1d8      	bne.n	8002cca <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8002d18:	f7fe fd7e 	bl	8001818 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002d1e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d20:	02bf      	lsls	r7, r7, #10
 8002d22:	682b      	ldr	r3, [r5, #0]
 8002d24:	423b      	tst	r3, r7
 8002d26:	d0a3      	beq.n	8002c70 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fd76 	bl	8001818 <HAL_GetTick>
 8002d2c:	1b80      	subs	r0, r0, r6
 8002d2e:	2864      	cmp	r0, #100	; 0x64
 8002d30:	d9f7      	bls.n	8002d22 <HAL_RCC_OscConfig+0xc2>
 8002d32:	e7d7      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d34:	2338      	movs	r3, #56	; 0x38
 8002d36:	4d87      	ldr	r5, [pc, #540]	; (8002f54 <HAL_RCC_OscConfig+0x2f4>)
 8002d38:	68aa      	ldr	r2, [r5, #8]
 8002d3a:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3c:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d128      	bne.n	8002d94 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d42:	2103      	movs	r1, #3
 8002d44:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d46:	2a02      	cmp	r2, #2
 8002d48:	d126      	bne.n	8002d98 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4a:	682a      	ldr	r2, [r5, #0]
 8002d4c:	0552      	lsls	r2, r2, #21
 8002d4e:	d502      	bpl.n	8002d56 <HAL_RCC_OscConfig+0xf6>
 8002d50:	68e2      	ldr	r2, [r4, #12]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d0ad      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	6869      	ldr	r1, [r5, #4]
 8002d58:	6962      	ldr	r2, [r4, #20]
 8002d5a:	4881      	ldr	r0, [pc, #516]	; (8002f60 <HAL_RCC_OscConfig+0x300>)
 8002d5c:	0212      	lsls	r2, r2, #8
 8002d5e:	4001      	ands	r1, r0
 8002d60:	430a      	orrs	r2, r1
 8002d62:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x304>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	6922      	ldr	r2, [r4, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x308>)
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	0f5b      	lsrs	r3, r3, #29
 8002d7c:	40da      	lsrs	r2, r3
 8002d7e:	0013      	movs	r3, r2
 8002d80:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x30c>)
 8002d82:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d84:	4b7a      	ldr	r3, [pc, #488]	; (8002f70 <HAL_RCC_OscConfig+0x310>)
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	f7fe fcfe 	bl	8001788 <HAL_InitTick>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d100      	bne.n	8002d92 <HAL_RCC_OscConfig+0x132>
 8002d90:	e771      	b.n	8002c76 <HAL_RCC_OscConfig+0x16>
 8002d92:	e78e      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0d8      	beq.n	8002d4a <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d98:	68e3      	ldr	r3, [r4, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d020      	beq.n	8002de0 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	4a70      	ldr	r2, [pc, #448]	; (8002f64 <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002da4:	4013      	ands	r3, r2
 8002da6:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002daa:	4313      	orrs	r3, r2
 8002dac:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	682a      	ldr	r2, [r5, #0]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4313      	orrs	r3, r2
 8002db6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002db8:	f7fe fd2e 	bl	8001818 <HAL_GetTick>
 8002dbc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbe:	682b      	ldr	r3, [r5, #0]
 8002dc0:	423b      	tst	r3, r7
 8002dc2:	d007      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	686a      	ldr	r2, [r5, #4]
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	4965      	ldr	r1, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x300>)
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	400a      	ands	r2, r1
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	606b      	str	r3, [r5, #4]
 8002dd2:	e750      	b.n	8002c76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fd20 	bl	8001818 <HAL_GetTick>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9ef      	bls.n	8002dbe <HAL_RCC_OscConfig+0x15e>
 8002dde:	e781      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	4a64      	ldr	r2, [pc, #400]	; (8002f74 <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4013      	ands	r3, r2
 8002de8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dea:	f7fe fd15 	bl	8001818 <HAL_GetTick>
 8002dee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	00ff      	lsls	r7, r7, #3
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	423b      	tst	r3, r7
 8002df6:	d100      	bne.n	8002dfa <HAL_RCC_OscConfig+0x19a>
 8002df8:	e73d      	b.n	8002c76 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fd0d 	bl	8001818 <HAL_GetTick>
 8002dfe:	1b80      	subs	r0, r0, r6
 8002e00:	2802      	cmp	r0, #2
 8002e02:	d9f6      	bls.n	8002df2 <HAL_RCC_OscConfig+0x192>
 8002e04:	e76e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e06:	2238      	movs	r2, #56	; 0x38
 8002e08:	4d52      	ldr	r5, [pc, #328]	; (8002f54 <HAL_RCC_OscConfig+0x2f4>)
 8002e0a:	68ab      	ldr	r3, [r5, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b18      	cmp	r3, #24
 8002e10:	d108      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1c4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e12:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002e14:	079b      	lsls	r3, r3, #30
 8002e16:	d400      	bmi.n	8002e1a <HAL_RCC_OscConfig+0x1ba>
 8002e18:	e731      	b.n	8002c7e <HAL_RCC_OscConfig+0x1e>
 8002e1a:	69a3      	ldr	r3, [r4, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d000      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1c2>
 8002e20:	e72d      	b.n	8002c7e <HAL_RCC_OscConfig+0x1e>
 8002e22:	e746      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e24:	69a2      	ldr	r2, [r4, #24]
 8002e26:	2301      	movs	r3, #1
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d010      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_LSI_ENABLE();
 8002e2c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002e30:	4313      	orrs	r3, r2
 8002e32:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002e34:	f7fe fcf0 	bl	8001818 <HAL_GetTick>
 8002e38:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002e3c:	423b      	tst	r3, r7
 8002e3e:	d000      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1e2>
 8002e40:	e71d      	b.n	8002c7e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe fce9 	bl	8001818 <HAL_GetTick>
 8002e46:	1b80      	subs	r0, r0, r6
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d9f6      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1da>
 8002e4c:	e74a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8002e4e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e50:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002e52:	439a      	bics	r2, r3
 8002e54:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002e56:	f7fe fcdf 	bl	8001818 <HAL_GetTick>
 8002e5a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e5c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002e5e:	423b      	tst	r3, r7
 8002e60:	d100      	bne.n	8002e64 <HAL_RCC_OscConfig+0x204>
 8002e62:	e70c      	b.n	8002c7e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fcd8 	bl	8001818 <HAL_GetTick>
 8002e68:	1b80      	subs	r0, r0, r6
 8002e6a:	2802      	cmp	r0, #2
 8002e6c:	d9f6      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1fc>
 8002e6e:	e739      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e70:	2238      	movs	r2, #56	; 0x38
 8002e72:	4d38      	ldr	r5, [pc, #224]	; (8002f54 <HAL_RCC_OscConfig+0x2f4>)
 8002e74:	68ab      	ldr	r3, [r5, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d108      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e7c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002e7e:	079b      	lsls	r3, r3, #30
 8002e80:	d400      	bmi.n	8002e84 <HAL_RCC_OscConfig+0x224>
 8002e82:	e700      	b.n	8002c86 <HAL_RCC_OscConfig+0x26>
 8002e84:	68a3      	ldr	r3, [r4, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d000      	beq.n	8002e8c <HAL_RCC_OscConfig+0x22c>
 8002e8a:	e6fc      	b.n	8002c86 <HAL_RCC_OscConfig+0x26>
 8002e8c:	e711      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e8e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002e90:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002e94:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e98:	4213      	tst	r3, r2
 8002e9a:	d108      	bne.n	8002eae <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002ea2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	9303      	str	r3, [sp, #12]
 8002ea8:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	2780      	movs	r7, #128	; 0x80
 8002eb0:	4e31      	ldr	r6, [pc, #196]	; (8002f78 <HAL_RCC_OscConfig+0x318>)
 8002eb2:	007f      	lsls	r7, r7, #1
 8002eb4:	6833      	ldr	r3, [r6, #0]
 8002eb6:	423b      	tst	r3, r7
 8002eb8:	d015      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	68a3      	ldr	r3, [r4, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d122      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2a6>
 8002ec0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fca7 	bl	8001818 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002ecc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ece:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002ed0:	423b      	tst	r3, r7
 8002ed2:	d038      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2e6>
      if (pwrclkchanged == SET)
 8002ed4:	9b00      	ldr	r3, [sp, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d000      	beq.n	8002edc <HAL_RCC_OscConfig+0x27c>
 8002eda:	e6d4      	b.n	8002c86 <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ede:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <HAL_RCC_OscConfig+0x31c>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002ee4:	e6cf      	b.n	8002c86 <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	6833      	ldr	r3, [r6, #0]
 8002ee8:	433b      	orrs	r3, r7
 8002eea:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002eec:	f7fe fc94 	bl	8001818 <HAL_GetTick>
 8002ef0:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef2:	6833      	ldr	r3, [r6, #0]
 8002ef4:	423b      	tst	r3, r7
 8002ef6:	d1e0      	bne.n	8002eba <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fc8e 	bl	8001818 <HAL_GetTick>
 8002efc:	9b01      	ldr	r3, [sp, #4]
 8002efe:	1ac0      	subs	r0, r0, r3
 8002f00:	2802      	cmp	r0, #2
 8002f02:	d9f6      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x292>
 8002f04:	e6ee      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2b8>
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	65eb      	str	r3, [r5, #92]	; 0x5c
 8002f12:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002f14:	2301      	movs	r3, #1
 8002f16:	e7d4      	b.n	8002ec2 <HAL_RCC_OscConfig+0x262>
 8002f18:	2101      	movs	r1, #1
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	65ea      	str	r2, [r5, #92]	; 0x5c
 8002f1e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002f20:	3103      	adds	r1, #3
 8002f22:	438a      	bics	r2, r1
 8002f24:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1cd      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x266>
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fc75 	bl	8001818 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2e:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002f30:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f32:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002f34:	423b      	tst	r3, r7
 8002f36:	d0cd      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fc6e 	bl	8001818 <HAL_GetTick>
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_RCC_OscConfig+0x320>)
 8002f3e:	1b80      	subs	r0, r0, r6
 8002f40:	4298      	cmp	r0, r3
 8002f42:	d9f6      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2d2>
 8002f44:	e6ce      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fc67 	bl	8001818 <HAL_GetTick>
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_OscConfig+0x320>)
 8002f4c:	1b80      	subs	r0, r0, r6
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	d9bd      	bls.n	8002ece <HAL_RCC_OscConfig+0x26e>
 8002f52:	e6c7      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	fffeffff 	.word	0xfffeffff
 8002f5c:	fffbffff 	.word	0xfffbffff
 8002f60:	ffff80ff 	.word	0xffff80ff
 8002f64:	ffffc7ff 	.word	0xffffc7ff
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000008 	.word	0x20000008
 8002f74:	fffffeff 	.word	0xfffffeff
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	efffffff 	.word	0xefffffff
 8002f80:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	2138      	movs	r1, #56	; 0x38
 8002f86:	4d3f      	ldr	r5, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x424>)
 8002f88:	68aa      	ldr	r2, [r5, #8]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	2a10      	cmp	r2, #16
 8002f8e:	d053      	beq.n	8003038 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f90:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x428>)
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d138      	bne.n	8003008 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8002f96:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fc3b 	bl	8001818 <HAL_GetTick>
 8002fa2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	04bf      	lsls	r7, r7, #18
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	423b      	tst	r3, r7
 8002faa:	d127      	bne.n	8002ffc <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fae:	6a23      	ldr	r3, [r4, #32]
 8002fb0:	68ea      	ldr	r2, [r5, #12]
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	400a      	ands	r2, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fc8:	0212      	lsls	r2, r2, #8
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	682a      	ldr	r2, [r5, #0]
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	68ea      	ldr	r2, [r5, #12]
 8002fdc:	055b      	lsls	r3, r3, #21
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fc19 	bl	8001818 <HAL_GetTick>
 8002fe6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	4233      	tst	r3, r6
 8002fec:	d000      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x390>
 8002fee:	e64e      	b.n	8002c8e <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fc12 	bl	8001818 <HAL_GetTick>
 8002ff4:	1b00      	subs	r0, r0, r4
 8002ff6:	2802      	cmp	r0, #2
 8002ff8:	d9f6      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x388>
 8002ffa:	e673      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fc0c 	bl	8001818 <HAL_GetTick>
 8003000:	1b80      	subs	r0, r0, r6
 8003002:	2802      	cmp	r0, #2
 8003004:	d9cf      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x346>
 8003006:	e66d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8003008:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800300c:	4013      	ands	r3, r2
 800300e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003010:	f7fe fc02 	bl	8001818 <HAL_GetTick>
 8003014:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	04b6      	lsls	r6, r6, #18
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	4030      	ands	r0, r6
 800301e:	4233      	tst	r3, r6
 8003020:	d104      	bne.n	800302c <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003022:	68eb      	ldr	r3, [r5, #12]
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x430>)
 8003026:	4013      	ands	r3, r2
 8003028:	60eb      	str	r3, [r5, #12]
 800302a:	e65c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fbf4 	bl	8001818 <HAL_GetTick>
 8003030:	1b00      	subs	r0, r0, r4
 8003032:	2802      	cmp	r0, #2
 8003034:	d9f0      	bls.n	8003018 <HAL_RCC_OscConfig+0x3b8>
 8003036:	e655      	b.n	8002ce4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003038:	2b01      	cmp	r3, #1
 800303a:	d100      	bne.n	800303e <HAL_RCC_OscConfig+0x3de>
 800303c:	e639      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003040:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	6a21      	ldr	r1, [r4, #32]
 8003044:	401a      	ands	r2, r3
 8003046:	428a      	cmp	r2, r1
 8003048:	d000      	beq.n	800304c <HAL_RCC_OscConfig+0x3ec>
 800304a:	e632      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800304c:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003050:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	428a      	cmp	r2, r1
 8003054:	d000      	beq.n	8003058 <HAL_RCC_OscConfig+0x3f8>
 8003056:	e62c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003058:	21fe      	movs	r1, #254	; 0xfe
 800305a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800305c:	01c9      	lsls	r1, r1, #7
 800305e:	4019      	ands	r1, r3
 8003060:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003062:	4291      	cmp	r1, r2
 8003064:	d000      	beq.n	8003068 <HAL_RCC_OscConfig+0x408>
 8003066:	e624      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003068:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800306c:	0392      	lsls	r2, r2, #14
 800306e:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	428a      	cmp	r2, r1
 8003072:	d000      	beq.n	8003076 <HAL_RCC_OscConfig+0x416>
 8003074:	e61d      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003076:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003078:	0f5b      	lsrs	r3, r3, #29
 800307a:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d100      	bne.n	8003082 <HAL_RCC_OscConfig+0x422>
 8003080:	e605      	b.n	8002c8e <HAL_RCC_OscConfig+0x2e>
 8003082:	e616      	b.n	8002cb2 <HAL_RCC_OscConfig+0x52>
 8003084:	40021000 	.word	0x40021000
 8003088:	feffffff 	.word	0xfeffffff
 800308c:	1fc1808c 	.word	0x1fc1808c
 8003090:	effefffc 	.word	0xeffefffc

08003094 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003094:	2338      	movs	r3, #56	; 0x38
{
 8003096:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003098:	4c1e      	ldr	r4, [pc, #120]	; (8003114 <HAL_RCC_GetSysClockFreq+0x80>)
 800309a:	68a2      	ldr	r2, [r4, #8]
 800309c:	421a      	tst	r2, r3
 800309e:	d105      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030a0:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030a2:	481d      	ldr	r0, [pc, #116]	; (8003118 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030a4:	049b      	lsls	r3, r3, #18
 80030a6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030a8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ac:	68a2      	ldr	r2, [r4, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	2a08      	cmp	r2, #8
 80030b2:	d02a      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	68a2      	ldr	r2, [r4, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	2a10      	cmp	r2, #16
 80030ba:	d11a      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x5e>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030bc:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030be:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030c0:	43db      	mvns	r3, r3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030c2:	0649      	lsls	r1, r1, #25
 80030c4:	0f49      	lsrs	r1, r1, #29
 80030c6:	257f      	movs	r5, #127	; 0x7f
 80030c8:	3101      	adds	r1, #1
    switch (pllsource)
 80030ca:	079b      	lsls	r3, r3, #30
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ce:	68e3      	ldr	r3, [r4, #12]
 80030d0:	4812      	ldr	r0, [pc, #72]	; (800311c <HAL_RCC_GetSysClockFreq+0x88>)
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	401d      	ands	r5, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030d6:	f7fd f827 	bl	8000128 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030da:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030dc:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030de:	0f49      	lsrs	r1, r1, #29
 80030e0:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80030e2:	f7fd f821 	bl	8000128 <__udivsi3>
 80030e6:	e7e0      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030e8:	68e3      	ldr	r3, [r4, #12]
 80030ea:	480b      	ldr	r0, [pc, #44]	; (8003118 <HAL_RCC_GetSysClockFreq+0x84>)
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	401d      	ands	r5, r3
 80030f0:	e7f1      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030f2:	68a2      	ldr	r2, [r4, #8]
 80030f4:	401a      	ands	r2, r3
 80030f6:	2a20      	cmp	r2, #32
 80030f8:	d009      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030fa:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 80030fc:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030fe:	4013      	ands	r3, r2
 8003100:	2b18      	cmp	r3, #24
 8003102:	d1d2      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8003104:	20fa      	movs	r0, #250	; 0xfa
 8003106:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8003108:	e7cf      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <HAL_RCC_GetSysClockFreq+0x88>)
 800310c:	e7cd      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800310e:	2080      	movs	r0, #128	; 0x80
 8003110:	0200      	lsls	r0, r0, #8
 8003112:	e7ca      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x16>
 8003114:	40021000 	.word	0x40021000
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200

08003120 <HAL_RCC_ClockConfig>:
{
 8003120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003122:	0004      	movs	r4, r0
 8003124:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003126:	2800      	cmp	r0, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
}
 800312c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312e:	2707      	movs	r7, #7
 8003130:	4e4a      	ldr	r6, [pc, #296]	; (800325c <HAL_RCC_ClockConfig+0x13c>)
 8003132:	6833      	ldr	r3, [r6, #0]
 8003134:	403b      	ands	r3, r7
 8003136:	428b      	cmp	r3, r1
 8003138:	d32a      	bcc.n	8003190 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313a:	6821      	ldr	r1, [r4, #0]
 800313c:	078b      	lsls	r3, r1, #30
 800313e:	d43b      	bmi.n	80031b8 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003140:	07cb      	lsls	r3, r1, #31
 8003142:	d448      	bmi.n	80031d6 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	2707      	movs	r7, #7
 8003146:	6833      	ldr	r3, [r6, #0]
 8003148:	403b      	ands	r3, r7
 800314a:	42ab      	cmp	r3, r5
 800314c:	d90a      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	6833      	ldr	r3, [r6, #0]
 8003150:	43bb      	bics	r3, r7
 8003152:	432b      	orrs	r3, r5
 8003154:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003156:	f7fe fb5f 	bl	8001818 <HAL_GetTick>
 800315a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800315c:	6833      	ldr	r3, [r6, #0]
 800315e:	403b      	ands	r3, r7
 8003160:	42ab      	cmp	r3, r5
 8003162:	d16b      	bne.n	800323c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	4d3e      	ldr	r5, [pc, #248]	; (8003260 <HAL_RCC_ClockConfig+0x140>)
 8003168:	075b      	lsls	r3, r3, #29
 800316a:	d46f      	bmi.n	800324c <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800316c:	f7ff ff92 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003170:	68ab      	ldr	r3, [r5, #8]
 8003172:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <HAL_RCC_ClockConfig+0x144>)
 8003174:	051b      	lsls	r3, r3, #20
 8003176:	0f1b      	lsrs	r3, r3, #28
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	589b      	ldr	r3, [r3, r2]
 800317c:	221f      	movs	r2, #31
 800317e:	4013      	ands	r3, r2
 8003180:	40d8      	lsrs	r0, r3
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_ClockConfig+0x148>)
 8003184:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_ClockConfig+0x14c>)
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f7fe fafd 	bl	8001788 <HAL_InitTick>
 800318e:	e7cd      	b.n	800312c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003190:	6833      	ldr	r3, [r6, #0]
 8003192:	43bb      	bics	r3, r7
 8003194:	430b      	orrs	r3, r1
 8003196:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003198:	f7fe fb3e 	bl	8001818 <HAL_GetTick>
 800319c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800319e:	6833      	ldr	r3, [r6, #0]
 80031a0:	403b      	ands	r3, r7
 80031a2:	42ab      	cmp	r3, r5
 80031a4:	d0c9      	beq.n	800313a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f7fe fb37 	bl	8001818 <HAL_GetTick>
 80031aa:	9b01      	ldr	r3, [sp, #4]
 80031ac:	1ac0      	subs	r0, r0, r3
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_RCC_ClockConfig+0x150>)
 80031b0:	4298      	cmp	r0, r3
 80031b2:	d9f4      	bls.n	800319e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80031b4:	2003      	movs	r0, #3
 80031b6:	e7b9      	b.n	800312c <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_RCC_ClockConfig+0x140>)
 80031ba:	074b      	lsls	r3, r1, #29
 80031bc:	d504      	bpl.n	80031c8 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031be:	23e0      	movs	r3, #224	; 0xe0
 80031c0:	6890      	ldr	r0, [r2, #8]
 80031c2:	01db      	lsls	r3, r3, #7
 80031c4:	4303      	orrs	r3, r0
 80031c6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	6893      	ldr	r3, [r2, #8]
 80031ca:	482a      	ldr	r0, [pc, #168]	; (8003274 <HAL_RCC_ClockConfig+0x154>)
 80031cc:	4003      	ands	r3, r0
 80031ce:	68a0      	ldr	r0, [r4, #8]
 80031d0:	4303      	orrs	r3, r0
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	e7b4      	b.n	8003140 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	4f21      	ldr	r7, [pc, #132]	; (8003260 <HAL_RCC_ClockConfig+0x140>)
 80031da:	2a01      	cmp	r2, #1
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	039b      	lsls	r3, r3, #14
 80031e2:	d5a2      	bpl.n	800312a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e4:	2107      	movs	r1, #7
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	438b      	bics	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80031ee:	f7fe fb13 	bl	8001818 <HAL_GetTick>
 80031f2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	2338      	movs	r3, #56	; 0x38
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	401a      	ands	r2, r3
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	429a      	cmp	r2, r3
 8003200:	d0a0      	beq.n	8003144 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fe fb09 	bl	8001818 <HAL_GetTick>
 8003206:	9b01      	ldr	r3, [sp, #4]
 8003208:	1ac0      	subs	r0, r0, r3
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x150>)
 800320c:	4298      	cmp	r0, r3
 800320e:	d9f1      	bls.n	80031f4 <HAL_RCC_ClockConfig+0xd4>
 8003210:	e7d0      	b.n	80031b4 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003212:	2a02      	cmp	r2, #2
 8003214:	d103      	bne.n	800321e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	d4e3      	bmi.n	80031e4 <HAL_RCC_ClockConfig+0xc4>
 800321c:	e785      	b.n	800312a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800321e:	2a00      	cmp	r2, #0
 8003220:	d103      	bne.n	800322a <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	055b      	lsls	r3, r3, #21
 8003226:	d4dd      	bmi.n	80031e4 <HAL_RCC_ClockConfig+0xc4>
 8003228:	e77f      	b.n	800312a <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800322a:	2302      	movs	r3, #2
 800322c:	2a03      	cmp	r2, #3
 800322e:	d103      	bne.n	8003238 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003230:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4219      	tst	r1, r3
 8003234:	d1d6      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xc4>
 8003236:	e778      	b.n	800312a <HAL_RCC_ClockConfig+0xa>
 8003238:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800323a:	e7fa      	b.n	8003232 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe faec 	bl	8001818 <HAL_GetTick>
 8003240:	9b01      	ldr	r3, [sp, #4]
 8003242:	1ac0      	subs	r0, r0, r3
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x150>)
 8003246:	4298      	cmp	r0, r3
 8003248:	d988      	bls.n	800315c <HAL_RCC_ClockConfig+0x3c>
 800324a:	e7b3      	b.n	80031b4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	68ab      	ldr	r3, [r5, #8]
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x158>)
 8003250:	4013      	ands	r3, r2
 8003252:	68e2      	ldr	r2, [r4, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60ab      	str	r3, [r5, #8]
 8003258:	e788      	b.n	800316c <HAL_RCC_ClockConfig+0x4c>
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	0800569c 	.word	0x0800569c
 8003268:	20000000 	.word	0x20000000
 800326c:	20000008 	.word	0x20000008
 8003270:	00001388 	.word	0x00001388
 8003274:	fffff0ff 	.word	0xfffff0ff
 8003278:	ffff8fff 	.word	0xffff8fff

0800327c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	045b      	lsls	r3, r3, #17
 8003284:	0f5b      	lsrs	r3, r3, #29
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	589b      	ldr	r3, [r3, r2]
 800328a:	221f      	movs	r2, #31
 800328c:	4013      	ands	r3, r2
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003290:	6810      	ldr	r0, [r2, #0]
 8003292:	40d8      	lsrs	r0, r3
}
 8003294:	4770      	bx	lr
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	080056dc 	.word	0x080056dc
 80032a0:	20000000 	.word	0x20000000

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a6:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a8:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032aa:	2000      	movs	r0, #0
{
 80032ac:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ae:	039b      	lsls	r3, r3, #14
 80032b0:	d53b      	bpl.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	4c48      	ldr	r4, [pc, #288]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032b6:	0552      	lsls	r2, r2, #21
 80032b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032bc:	4213      	tst	r3, r2
 80032be:	d108      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c2:	4313      	orrs	r3, r2
 80032c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80032c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c8:	4013      	ands	r3, r2
 80032ca:	9303      	str	r3, [sp, #12]
 80032cc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d2:	2780      	movs	r7, #128	; 0x80
 80032d4:	4e41      	ldr	r6, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80032d6:	007f      	lsls	r7, r7, #1
 80032d8:	6833      	ldr	r3, [r6, #0]
 80032da:	433b      	orrs	r3, r7
 80032dc:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032de:	f7fe fa9b 	bl	8001818 <HAL_GetTick>
 80032e2:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	423b      	tst	r3, r7
 80032e8:	d011      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032ec:	23c0      	movs	r3, #192	; 0xc0
 80032ee:	0011      	movs	r1, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4e3b      	ldr	r6, [pc, #236]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032f4:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032f6:	421a      	tst	r2, r3
 80032f8:	d002      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032fa:	696b      	ldr	r3, [r5, #20]
 80032fc:	4299      	cmp	r1, r3
 80032fe:	d14d      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003300:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003302:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003304:	401e      	ands	r6, r3
 8003306:	696b      	ldr	r3, [r5, #20]
 8003308:	431e      	orrs	r6, r3
 800330a:	65e6      	str	r6, [r4, #92]	; 0x5c
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe fa83 	bl	8001818 <HAL_GetTick>
 8003312:	9b01      	ldr	r3, [sp, #4]
 8003314:	1ac0      	subs	r0, r0, r3
 8003316:	2802      	cmp	r0, #2
 8003318:	d9e4      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 800331a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800331c:	9b00      	ldr	r3, [sp, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d103      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003324:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003326:	4013      	ands	r3, r2
 8003328:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332a:	682a      	ldr	r2, [r5, #0]
 800332c:	07d3      	lsls	r3, r2, #31
 800332e:	d506      	bpl.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003330:	2403      	movs	r4, #3
 8003332:	4929      	ldr	r1, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003334:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003336:	43a3      	bics	r3, r4
 8003338:	686c      	ldr	r4, [r5, #4]
 800333a:	4323      	orrs	r3, r4
 800333c:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333e:	0693      	lsls	r3, r2, #26
 8003340:	d506      	bpl.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003342:	4925      	ldr	r1, [pc, #148]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003344:	4c28      	ldr	r4, [pc, #160]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8003346:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003348:	4023      	ands	r3, r4
 800334a:	68ac      	ldr	r4, [r5, #8]
 800334c:	4323      	orrs	r3, r4
 800334e:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003350:	0453      	lsls	r3, r2, #17
 8003352:	d50f      	bpl.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003354:	4920      	ldr	r1, [pc, #128]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003356:	692c      	ldr	r4, [r5, #16]
 8003358:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	4323      	orrs	r3, r4
 8003360:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	429c      	cmp	r4, r3
 8003368:	d104      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	68cc      	ldr	r4, [r1, #12]
 800336e:	025b      	lsls	r3, r3, #9
 8003370:	4323      	orrs	r3, r4
 8003372:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003374:	0513      	lsls	r3, r2, #20
 8003376:	d50f      	bpl.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003378:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800337a:	4c1c      	ldr	r4, [pc, #112]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800337c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800337e:	68e9      	ldr	r1, [r5, #12]
 8003380:	4023      	ands	r3, r4
 8003382:	430b      	orrs	r3, r1
 8003384:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	01db      	lsls	r3, r3, #7
 800338a:	4299      	cmp	r1, r3
 800338c:	d104      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	68d1      	ldr	r1, [r2, #12]
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	430b      	orrs	r3, r1
 8003396:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8003398:	b005      	add	sp, #20
 800339a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 800339c:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a2:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a4:	025b      	lsls	r3, r3, #9
 80033a6:	4303      	orrs	r3, r0
 80033a8:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033ac:	4810      	ldr	r0, [pc, #64]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ae:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4003      	ands	r3, r0
 80033b2:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 80033b4:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033b6:	07d3      	lsls	r3, r2, #31
 80033b8:	d5a2      	bpl.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 80033ba:	f7fe fa2d 	bl	8001818 <HAL_GetTick>
 80033be:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c0:	2202      	movs	r2, #2
 80033c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033c4:	4213      	tst	r3, r2
 80033c6:	d19b      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa26 	bl	8001818 <HAL_GetTick>
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033ce:	1bc0      	subs	r0, r0, r7
 80033d0:	4298      	cmp	r0, r3
 80033d2:	d9f5      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80033d4:	e7a1      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	fffffcff 	.word	0xfffffcff
 80033e4:	efffffff 	.word	0xefffffff
 80033e8:	ffffcfff 	.word	0xffffcfff
 80033ec:	ffff3fff 	.word	0xffff3fff
 80033f0:	fffeffff 	.word	0xfffeffff
 80033f4:	00001388 	.word	0x00001388

080033f8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f8:	2201      	movs	r2, #1
 80033fa:	6a03      	ldr	r3, [r0, #32]
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fe:	4393      	bics	r3, r2
 8003400:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003404:	4a16      	ldr	r2, [pc, #88]	; (8003460 <TIM_OC1_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003406:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003408:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800340a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003410:	2202      	movs	r2, #2
 8003412:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003414:	688a      	ldr	r2, [r1, #8]
 8003416:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003418:	4a12      	ldr	r2, [pc, #72]	; (8003464 <TIM_OC1_SetConfig+0x6c>)
 800341a:	4290      	cmp	r0, r2
 800341c:	d005      	beq.n	800342a <TIM_OC1_SetConfig+0x32>
 800341e:	4e12      	ldr	r6, [pc, #72]	; (8003468 <TIM_OC1_SetConfig+0x70>)
 8003420:	42b0      	cmp	r0, r6
 8003422:	d002      	beq.n	800342a <TIM_OC1_SetConfig+0x32>
 8003424:	4e11      	ldr	r6, [pc, #68]	; (800346c <TIM_OC1_SetConfig+0x74>)
 8003426:	42b0      	cmp	r0, r6
 8003428:	d113      	bne.n	8003452 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800342a:	2608      	movs	r6, #8
 800342c:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800342e:	68ce      	ldr	r6, [r1, #12]
 8003430:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003432:	2604      	movs	r6, #4
 8003434:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	4290      	cmp	r0, r2
 8003438:	d005      	beq.n	8003446 <TIM_OC1_SetConfig+0x4e>
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <TIM_OC1_SetConfig+0x70>)
 800343c:	4290      	cmp	r0, r2
 800343e:	d002      	beq.n	8003446 <TIM_OC1_SetConfig+0x4e>
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <TIM_OC1_SetConfig+0x74>)
 8003442:	4290      	cmp	r0, r2
 8003444:	d105      	bne.n	8003452 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <TIM_OC1_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003448:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800344c:	694c      	ldr	r4, [r1, #20]
 800344e:	4334      	orrs	r4, r6
 8003450:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003452:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003454:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003456:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003458:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	6203      	str	r3, [r0, #32]
}
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	fffeff8c 	.word	0xfffeff8c
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	fffffcff 	.word	0xfffffcff

08003474 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003474:	6a03      	ldr	r3, [r0, #32]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <TIM_OC3_SetConfig+0x60>)
{
 8003478:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800347a:	4013      	ands	r3, r2
 800347c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	4d15      	ldr	r5, [pc, #84]	; (80034d8 <TIM_OC3_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003482:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003484:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003486:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	680d      	ldr	r5, [r1, #0]
 800348a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800348c:	4d13      	ldr	r5, [pc, #76]	; (80034dc <TIM_OC3_SetConfig+0x68>)
 800348e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003490:	688d      	ldr	r5, [r1, #8]
 8003492:	022d      	lsls	r5, r5, #8
 8003494:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	4d12      	ldr	r5, [pc, #72]	; (80034e0 <TIM_OC3_SetConfig+0x6c>)
 8003498:	42a8      	cmp	r0, r5
 800349a:	d10e      	bne.n	80034ba <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349c:	4d11      	ldr	r5, [pc, #68]	; (80034e4 <TIM_OC3_SetConfig+0x70>)
 800349e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a0:	68cb      	ldr	r3, [r1, #12]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a6:	4d10      	ldr	r5, [pc, #64]	; (80034e8 <TIM_OC3_SetConfig+0x74>)
 80034a8:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034aa:	4d10      	ldr	r5, [pc, #64]	; (80034ec <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ac:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ae:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b0:	698a      	ldr	r2, [r1, #24]
 80034b2:	4332      	orrs	r2, r6
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	432a      	orrs	r2, r5
 80034b8:	e005      	b.n	80034c6 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	4d0d      	ldr	r5, [pc, #52]	; (80034f0 <TIM_OC3_SetConfig+0x7c>)
 80034bc:	42a8      	cmp	r0, r5
 80034be:	d0f4      	beq.n	80034aa <TIM_OC3_SetConfig+0x36>
 80034c0:	4d0c      	ldr	r5, [pc, #48]	; (80034f4 <TIM_OC3_SetConfig+0x80>)
 80034c2:	42a8      	cmp	r0, r5
 80034c4:	d0f1      	beq.n	80034aa <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80034ca:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80034cc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	6203      	str	r3, [r0, #32]
}
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	fffffeff 	.word	0xfffffeff
 80034d8:	fffeff8c 	.word	0xfffeff8c
 80034dc:	fffffdff 	.word	0xfffffdff
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	fffff7ff 	.word	0xfffff7ff
 80034e8:	fffffbff 	.word	0xfffffbff
 80034ec:	ffffcfff 	.word	0xffffcfff
 80034f0:	40014400 	.word	0x40014400
 80034f4:	40014800 	.word	0x40014800

080034f8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f8:	6a03      	ldr	r3, [r0, #32]
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <TIM_OC4_SetConfig+0x4c>)
{
 80034fc:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034fe:	4013      	ands	r3, r2
 8003500:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003504:	4c10      	ldr	r4, [pc, #64]	; (8003548 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003506:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003508:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800350a:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350c:	680c      	ldr	r4, [r1, #0]
 800350e:	0224      	lsls	r4, r4, #8
 8003510:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003512:	4c0e      	ldr	r4, [pc, #56]	; (800354c <TIM_OC4_SetConfig+0x54>)
 8003514:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003516:	688c      	ldr	r4, [r1, #8]
 8003518:	0324      	lsls	r4, r4, #12
 800351a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351c:	4c0c      	ldr	r4, [pc, #48]	; (8003550 <TIM_OC4_SetConfig+0x58>)
 800351e:	42a0      	cmp	r0, r4
 8003520:	d005      	beq.n	800352e <TIM_OC4_SetConfig+0x36>
 8003522:	4c0c      	ldr	r4, [pc, #48]	; (8003554 <TIM_OC4_SetConfig+0x5c>)
 8003524:	42a0      	cmp	r0, r4
 8003526:	d002      	beq.n	800352e <TIM_OC4_SetConfig+0x36>
 8003528:	4c0b      	ldr	r4, [pc, #44]	; (8003558 <TIM_OC4_SetConfig+0x60>)
 800352a:	42a0      	cmp	r0, r4
 800352c:	d104      	bne.n	8003538 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800352e:	4c0b      	ldr	r4, [pc, #44]	; (800355c <TIM_OC4_SetConfig+0x64>)
 8003530:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003532:	694c      	ldr	r4, [r1, #20]
 8003534:	01a4      	lsls	r4, r4, #6
 8003536:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800353a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800353c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800353e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	6202      	str	r2, [r0, #32]
}
 8003542:	bd30      	pop	{r4, r5, pc}
 8003544:	ffffefff 	.word	0xffffefff
 8003548:	feff8cff 	.word	0xfeff8cff
 800354c:	ffffdfff 	.word	0xffffdfff
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	ffffbfff 	.word	0xffffbfff

08003560 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003560:	6a03      	ldr	r3, [r0, #32]
{
 8003562:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003564:	4e10      	ldr	r6, [pc, #64]	; (80035a8 <TIM_OC5_SetConfig+0x48>)
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003566:	4c11      	ldr	r4, [pc, #68]	; (80035ac <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003568:	4033      	ands	r3, r6
 800356a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800356c:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800356e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003570:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003572:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	680c      	ldr	r4, [r1, #0]
 8003576:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003578:	4c0d      	ldr	r4, [pc, #52]	; (80035b0 <TIM_OC5_SetConfig+0x50>)
 800357a:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800357c:	688c      	ldr	r4, [r1, #8]
 800357e:	0424      	lsls	r4, r4, #16
 8003580:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	4c0c      	ldr	r4, [pc, #48]	; (80035b4 <TIM_OC5_SetConfig+0x54>)
 8003584:	42a0      	cmp	r0, r4
 8003586:	d005      	beq.n	8003594 <TIM_OC5_SetConfig+0x34>
 8003588:	4c0b      	ldr	r4, [pc, #44]	; (80035b8 <TIM_OC5_SetConfig+0x58>)
 800358a:	42a0      	cmp	r0, r4
 800358c:	d002      	beq.n	8003594 <TIM_OC5_SetConfig+0x34>
 800358e:	4c0b      	ldr	r4, [pc, #44]	; (80035bc <TIM_OC5_SetConfig+0x5c>)
 8003590:	42a0      	cmp	r0, r4
 8003592:	d103      	bne.n	800359c <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003594:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003596:	4033      	ands	r3, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003598:	0224      	lsls	r4, r4, #8
 800359a:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800359e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80035a0:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80035a2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	6202      	str	r2, [r0, #32]
}
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	fffeffff 	.word	0xfffeffff
 80035ac:	fffeff8f 	.word	0xfffeff8f
 80035b0:	fffdffff 	.word	0xfffdffff
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035c0:	6a03      	ldr	r3, [r0, #32]
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <TIM_OC6_SetConfig+0x4c>)
{
 80035c4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035c6:	4013      	ands	r3, r2
 80035c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035cc:	4c10      	ldr	r4, [pc, #64]	; (8003610 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80035ce:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80035d0:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035d2:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	680c      	ldr	r4, [r1, #0]
 80035d6:	0224      	lsls	r4, r4, #8
 80035d8:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035da:	4c0e      	ldr	r4, [pc, #56]	; (8003614 <TIM_OC6_SetConfig+0x54>)
 80035dc:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035de:	688c      	ldr	r4, [r1, #8]
 80035e0:	0524      	lsls	r4, r4, #20
 80035e2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	4c0c      	ldr	r4, [pc, #48]	; (8003618 <TIM_OC6_SetConfig+0x58>)
 80035e6:	42a0      	cmp	r0, r4
 80035e8:	d005      	beq.n	80035f6 <TIM_OC6_SetConfig+0x36>
 80035ea:	4c0c      	ldr	r4, [pc, #48]	; (800361c <TIM_OC6_SetConfig+0x5c>)
 80035ec:	42a0      	cmp	r0, r4
 80035ee:	d002      	beq.n	80035f6 <TIM_OC6_SetConfig+0x36>
 80035f0:	4c0b      	ldr	r4, [pc, #44]	; (8003620 <TIM_OC6_SetConfig+0x60>)
 80035f2:	42a0      	cmp	r0, r4
 80035f4:	d104      	bne.n	8003600 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035f6:	4c0b      	ldr	r4, [pc, #44]	; (8003624 <TIM_OC6_SetConfig+0x64>)
 80035f8:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035fa:	694c      	ldr	r4, [r1, #20]
 80035fc:	02a4      	lsls	r4, r4, #10
 80035fe:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003602:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003604:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003606:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	6202      	str	r2, [r0, #32]
}
 800360a:	bd30      	pop	{r4, r5, pc}
 800360c:	ffefffff 	.word	0xffefffff
 8003610:	feff8fff 	.word	0xfeff8fff
 8003614:	ffdfffff 	.word	0xffdfffff
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800
 8003624:	fffbffff 	.word	0xfffbffff

08003628 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	0002      	movs	r2, r0
{
 800362a:	0003      	movs	r3, r0
    return HAL_ERROR;
 800362c:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800362e:	323d      	adds	r2, #61	; 0x3d
 8003630:	7811      	ldrb	r1, [r2, #0]
 8003632:	4281      	cmp	r1, r0
 8003634:	d115      	bne.n	8003662 <HAL_TIM_Base_Start+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003636:	2102      	movs	r1, #2
 8003638:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <HAL_TIM_Base_Start+0x48>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d002      	beq.n	8003648 <HAL_TIM_Base_Start+0x20>
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_TIM_Base_Start+0x4c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10d      	bne.n	8003664 <HAL_TIM_Base_Start+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	490b      	ldr	r1, [pc, #44]	; (8003678 <HAL_TIM_Base_Start+0x50>)
  return HAL_OK;
 800364c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	2a06      	cmp	r2, #6
 8003652:	d006      	beq.n	8003662 <HAL_TIM_Base_Start+0x3a>
 8003654:	3907      	subs	r1, #7
 8003656:	428a      	cmp	r2, r1
 8003658:	d003      	beq.n	8003662 <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
 800365a:	2201      	movs	r2, #1
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4310      	orrs	r0, r2
 8003668:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	e7f9      	b.n	8003662 <HAL_TIM_Base_Start+0x3a>
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	00010007 	.word	0x00010007

0800367c <HAL_TIM_PWM_MspInit>:
 800367c:	4770      	bx	lr
	...

08003680 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <TIM_Base_SetConfig+0x68>)
{
 8003682:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003684:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003686:	4290      	cmp	r0, r2
 8003688:	d002      	beq.n	8003690 <TIM_Base_SetConfig+0x10>
 800368a:	4c18      	ldr	r4, [pc, #96]	; (80036ec <TIM_Base_SetConfig+0x6c>)
 800368c:	42a0      	cmp	r0, r4
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	2470      	movs	r4, #112	; 0x70
 8003692:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003694:	684c      	ldr	r4, [r1, #4]
 8003696:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003698:	4290      	cmp	r0, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_Base_SetConfig+0x34>
 800369c:	4c13      	ldr	r4, [pc, #76]	; (80036ec <TIM_Base_SetConfig+0x6c>)
 800369e:	42a0      	cmp	r0, r4
 80036a0:	d008      	beq.n	80036b4 <TIM_Base_SetConfig+0x34>
 80036a2:	4c13      	ldr	r4, [pc, #76]	; (80036f0 <TIM_Base_SetConfig+0x70>)
 80036a4:	42a0      	cmp	r0, r4
 80036a6:	d005      	beq.n	80036b4 <TIM_Base_SetConfig+0x34>
 80036a8:	4c12      	ldr	r4, [pc, #72]	; (80036f4 <TIM_Base_SetConfig+0x74>)
 80036aa:	42a0      	cmp	r0, r4
 80036ac:	d002      	beq.n	80036b4 <TIM_Base_SetConfig+0x34>
 80036ae:	4c12      	ldr	r4, [pc, #72]	; (80036f8 <TIM_Base_SetConfig+0x78>)
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b4:	4c11      	ldr	r4, [pc, #68]	; (80036fc <TIM_Base_SetConfig+0x7c>)
 80036b6:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b8:	68cc      	ldr	r4, [r1, #12]
 80036ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036bc:	2480      	movs	r4, #128	; 0x80
 80036be:	43a3      	bics	r3, r4
 80036c0:	694c      	ldr	r4, [r1, #20]
 80036c2:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80036c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c6:	688b      	ldr	r3, [r1, #8]
 80036c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ca:	680b      	ldr	r3, [r1, #0]
 80036cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ce:	4290      	cmp	r0, r2
 80036d0:	d005      	beq.n	80036de <TIM_Base_SetConfig+0x5e>
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <TIM_Base_SetConfig+0x74>)
 80036d4:	4298      	cmp	r0, r3
 80036d6:	d002      	beq.n	80036de <TIM_Base_SetConfig+0x5e>
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <TIM_Base_SetConfig+0x78>)
 80036da:	4298      	cmp	r0, r3
 80036dc:	d101      	bne.n	80036e2 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80036de:	690b      	ldr	r3, [r1, #16]
 80036e0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80036e2:	2301      	movs	r3, #1
 80036e4:	6143      	str	r3, [r0, #20]
}
 80036e6:	bd10      	pop	{r4, pc}
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40002000 	.word	0x40002000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	fffffcff 	.word	0xfffffcff

08003700 <HAL_TIM_Base_Init>:
{
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003704:	2001      	movs	r0, #1
  if (htim == NULL)
 8003706:	2c00      	cmp	r4, #0
 8003708:	d023      	beq.n	8003752 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	0025      	movs	r5, r4
 800370c:	353d      	adds	r5, #61	; 0x3d
 800370e:	782b      	ldrb	r3, [r5, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003716:	0023      	movs	r3, r4
 8003718:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800371a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800371c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800371e:	f7fd fe7d 	bl	800141c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	1d21      	adds	r1, r4, #4
 800372a:	f7ff ffa9 	bl	8003680 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372e:	0022      	movs	r2, r4
 8003730:	2301      	movs	r3, #1
  return HAL_OK;
 8003732:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	3248      	adds	r2, #72	; 0x48
 8003736:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	3a0a      	subs	r2, #10
 800373c:	7013      	strb	r3, [r2, #0]
 800373e:	7053      	strb	r3, [r2, #1]
 8003740:	7093      	strb	r3, [r2, #2]
 8003742:	70d3      	strb	r3, [r2, #3]
 8003744:	7113      	strb	r3, [r2, #4]
 8003746:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	7193      	strb	r3, [r2, #6]
 800374a:	71d3      	strb	r3, [r2, #7]
 800374c:	7213      	strb	r3, [r2, #8]
 800374e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003750:	702b      	strb	r3, [r5, #0]
}
 8003752:	bd70      	pop	{r4, r5, r6, pc}

08003754 <HAL_TIM_PWM_Init>:
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003758:	2001      	movs	r0, #1
  if (htim == NULL)
 800375a:	2c00      	cmp	r4, #0
 800375c:	d023      	beq.n	80037a6 <HAL_TIM_PWM_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	0025      	movs	r5, r4
 8003760:	353d      	adds	r5, #61	; 0x3d
 8003762:	782b      	ldrb	r3, [r5, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800376a:	0023      	movs	r3, r4
 800376c:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800376e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003770:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003772:	f7ff ff83 	bl	800367c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	1d21      	adds	r1, r4, #4
 800377e:	f7ff ff7f 	bl	8003680 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003782:	0022      	movs	r2, r4
 8003784:	2301      	movs	r3, #1
  return HAL_OK;
 8003786:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	3248      	adds	r2, #72	; 0x48
 800378a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	3a0a      	subs	r2, #10
 8003790:	7013      	strb	r3, [r2, #0]
 8003792:	7053      	strb	r3, [r2, #1]
 8003794:	7093      	strb	r3, [r2, #2]
 8003796:	70d3      	strb	r3, [r2, #3]
 8003798:	7113      	strb	r3, [r2, #4]
 800379a:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	7193      	strb	r3, [r2, #6]
 800379e:	71d3      	strb	r3, [r2, #7]
 80037a0:	7213      	strb	r3, [r2, #8]
 80037a2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	702b      	strb	r3, [r5, #0]
}
 80037a6:	bd70      	pop	{r4, r5, r6, pc}

080037a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a8:	2210      	movs	r2, #16
 80037aa:	6a03      	ldr	r3, [r0, #32]
{
 80037ac:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ae:	4393      	bics	r3, r2
 80037b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80037b2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b4:	4c15      	ldr	r4, [pc, #84]	; (800380c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80037b6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80037b8:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037ba:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	680c      	ldr	r4, [r1, #0]
 80037be:	0224      	lsls	r4, r4, #8
 80037c0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80037c2:	2420      	movs	r4, #32
 80037c4:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037c6:	688c      	ldr	r4, [r1, #8]
 80037c8:	0124      	lsls	r4, r4, #4
 80037ca:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037cc:	4c10      	ldr	r4, [pc, #64]	; (8003810 <TIM_OC2_SetConfig+0x68>)
 80037ce:	42a0      	cmp	r0, r4
 80037d0:	d10f      	bne.n	80037f2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80037d2:	2480      	movs	r4, #128	; 0x80
 80037d4:	43a2      	bics	r2, r4
 80037d6:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037d8:	68ca      	ldr	r2, [r1, #12]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80037de:	2440      	movs	r4, #64	; 0x40
 80037e0:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e2:	4e0c      	ldr	r6, [pc, #48]	; (8003814 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e6:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e8:	698b      	ldr	r3, [r1, #24]
 80037ea:	4323      	orrs	r3, r4
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4333      	orrs	r3, r6
 80037f0:	e005      	b.n	80037fe <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	4c09      	ldr	r4, [pc, #36]	; (8003818 <TIM_OC2_SetConfig+0x70>)
 80037f4:	42a0      	cmp	r0, r4
 80037f6:	d0f4      	beq.n	80037e2 <TIM_OC2_SetConfig+0x3a>
 80037f8:	4c08      	ldr	r4, [pc, #32]	; (800381c <TIM_OC2_SetConfig+0x74>)
 80037fa:	42a0      	cmp	r0, r4
 80037fc:	d0f1      	beq.n	80037e2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80037fe:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003800:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003802:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003804:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003806:	6202      	str	r2, [r0, #32]
}
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	feff8cff 	.word	0xfeff8cff
 8003810:	40012c00 	.word	0x40012c00
 8003814:	fffff3ff 	.word	0xfffff3ff
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <HAL_TIM_PWM_ConfigChannel>:
{
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003822:	0007      	movs	r7, r0
 8003824:	373c      	adds	r7, #60	; 0x3c
 8003826:	783b      	ldrb	r3, [r7, #0]
{
 8003828:	0004      	movs	r4, r0
 800382a:	000d      	movs	r5, r1
 800382c:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800382e:	2002      	movs	r0, #2
 8003830:	2b01      	cmp	r3, #1
 8003832:	d00c      	beq.n	800384e <HAL_TIM_PWM_ConfigChannel+0x2e>
 8003834:	3801      	subs	r0, #1
 8003836:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8003838:	2a0c      	cmp	r2, #12
 800383a:	d051      	beq.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0xc0>
 800383c:	d808      	bhi.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x30>
 800383e:	2a04      	cmp	r2, #4
 8003840:	d02d      	beq.n	800389e <HAL_TIM_PWM_ConfigChannel+0x7e>
 8003842:	2a08      	cmp	r2, #8
 8003844:	d03c      	beq.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8003846:	2a00      	cmp	r2, #0
 8003848:	d017      	beq.n	800387a <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_UNLOCK(htim);
 800384a:	2300      	movs	r3, #0
 800384c:	703b      	strb	r3, [r7, #0]
}
 800384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003850:	2a10      	cmp	r2, #16
 8003852:	d056      	beq.n	8003902 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8003854:	2a14      	cmp	r2, #20
 8003856:	d1f8      	bne.n	800384a <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	f7ff feb1 	bl	80035c0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003866:	430a      	orrs	r2, r1
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800386a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386c:	492d      	ldr	r1, [pc, #180]	; (8003924 <HAL_TIM_PWM_ConfigChannel+0x104>)
 800386e:	400a      	ands	r2, r1
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003872:	692a      	ldr	r2, [r5, #16]
 8003874:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003876:	0212      	lsls	r2, r2, #8
 8003878:	e051      	b.n	800391e <HAL_TIM_PWM_ConfigChannel+0xfe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f7ff fdbc 	bl	80033f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003880:	2208      	movs	r2, #8
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	6999      	ldr	r1, [r3, #24]
 8003886:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003888:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800388a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	438a      	bics	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2000      	movs	r0, #0
      break;
 800389c:	e7d5      	b.n	800384a <HAL_TIM_PWM_ConfigChannel+0x2a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800389e:	6820      	ldr	r0, [r4, #0]
 80038a0:	f7ff ff82 	bl	80037a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	6999      	ldr	r1, [r3, #24]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	491c      	ldr	r1, [pc, #112]	; (8003924 <HAL_TIM_PWM_ConfigChannel+0x104>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b8:	692a      	ldr	r2, [r5, #16]
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	0212      	lsls	r2, r2, #8
 80038be:	e7ea      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	f7ff fdd7 	bl	8003474 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	4316      	orrs	r6, r2
 80038ce:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	438a      	bics	r2, r1
 80038d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038da:	430a      	orrs	r2, r1
 80038dc:	61da      	str	r2, [r3, #28]
      break;
 80038de:	e7dc      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x7a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	f7ff fe09 	bl	80034f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	69d9      	ldr	r1, [r3, #28]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	490b      	ldr	r1, [pc, #44]	; (8003924 <HAL_TIM_PWM_ConfigChannel+0x104>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038fa:	692a      	ldr	r2, [r5, #16]
 80038fc:	69d9      	ldr	r1, [r3, #28]
 80038fe:	0212      	lsls	r2, r2, #8
 8003900:	e7eb      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0xba>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	f7ff fe2c 	bl	8003560 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003908:	2208      	movs	r2, #8
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800390e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003910:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	438a      	bics	r2, r1
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800391a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800391e:	430a      	orrs	r2, r1
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
 8003922:	e7ba      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x7a>
 8003924:	fffffbff 	.word	0xfffffbff

08003928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003928:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	4d03      	ldr	r5, [pc, #12]	; (800393c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800392e:	430a      	orrs	r2, r1
 8003930:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003932:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003934:	4313      	orrs	r3, r2
 8003936:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003938:	6083      	str	r3, [r0, #8]
}
 800393a:	bd30      	pop	{r4, r5, pc}
 800393c:	ffff00ff 	.word	0xffff00ff

08003940 <HAL_TIM_ConfigClockSource>:
{
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003942:	0005      	movs	r5, r0
 8003944:	2302      	movs	r3, #2
 8003946:	353c      	adds	r5, #60	; 0x3c
{
 8003948:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800394a:	7828      	ldrb	r0, [r5, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	2801      	cmp	r0, #1
 8003950:	d01d      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003952:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8003954:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003956:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8003958:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800395a:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800395c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395e:	4a47      	ldr	r2, [pc, #284]	; (8003a7c <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr = htim->Instance->SMCR;
 8003960:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003962:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003964:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003966:	680b      	ldr	r3, [r1, #0]
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d058      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xde>
 800396c:	d834      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x98>
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d100      	bne.n	8003974 <HAL_TIM_ConfigClockSource+0x34>
 8003972:	e06c      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x10e>
 8003974:	d815      	bhi.n	80039a2 <HAL_TIM_ConfigClockSource+0x62>
 8003976:	2b20      	cmp	r3, #32
 8003978:	d00d      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x56>
 800397a:	d80a      	bhi.n	8003992 <HAL_TIM_ConfigClockSource+0x52>
 800397c:	2210      	movs	r2, #16
 800397e:	0019      	movs	r1, r3
 8003980:	4391      	bics	r1, r2
 8003982:	d008      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x56>
 8003984:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 8003986:	2301      	movs	r3, #1
 8003988:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800398a:	2300      	movs	r3, #0
 800398c:	702b      	strb	r3, [r5, #0]
}
 800398e:	0010      	movs	r0, r2
 8003990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d1f6      	bne.n	8003984 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003996:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003998:	4939      	ldr	r1, [pc, #228]	; (8003a80 <HAL_TIM_ConfigClockSource+0x140>)
 800399a:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399c:	4313      	orrs	r3, r2
 800399e:	2207      	movs	r2, #7
 80039a0:	e017      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80039a2:	2b50      	cmp	r3, #80	; 0x50
 80039a4:	d1ee      	bne.n	8003984 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	68ca      	ldr	r2, [r1, #12]
 80039a8:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 80039aa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b0:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b6:	43bb      	bics	r3, r7
 80039b8:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ba:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039bc:	220a      	movs	r2, #10
 80039be:	4391      	bics	r1, r2
 80039c0:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c2:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 80039c4:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 80039c6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039c8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039cc:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <HAL_TIM_ConfigClockSource+0x140>)
 80039ce:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039d0:	2357      	movs	r3, #87	; 0x57
 80039d2:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80039d4:	6083      	str	r3, [r0, #8]
 80039d6:	e016      	b.n	8003a06 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	0152      	lsls	r2, r2, #5
 80039dc:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 80039e0:	4563      	cmp	r3, ip
 80039e2:	d0d0      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x46>
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	0192      	lsls	r2, r2, #6
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xca>
 80039ec:	003a      	movs	r2, r7
 80039ee:	2b70      	cmp	r3, #112	; 0x70
 80039f0:	d1c9      	bne.n	8003986 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	68cb      	ldr	r3, [r1, #12]
 80039f4:	684a      	ldr	r2, [r1, #4]
 80039f6:	6889      	ldr	r1, [r1, #8]
 80039f8:	f7ff ff96 	bl	8003928 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fc:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2200      	movs	r2, #0
}
 8003a08:	e7bd      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	68cb      	ldr	r3, [r1, #12]
 8003a0c:	684a      	ldr	r2, [r1, #4]
 8003a0e:	6889      	ldr	r1, [r1, #8]
 8003a10:	f7ff ff8a 	bl	8003928 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	01db      	lsls	r3, r3, #7
 8003a1a:	6891      	ldr	r1, [r2, #8]
 8003a1c:	e7f1      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	684a      	ldr	r2, [r1, #4]
 8003a20:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a22:	2110      	movs	r1, #16
 8003a24:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	4c17      	ldr	r4, [pc, #92]	; (8003a84 <HAL_TIM_ConfigClockSource+0x144>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a28:	438b      	bics	r3, r1
 8003a2a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2c:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8003a2e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a30:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a32:	24a0      	movs	r4, #160	; 0xa0
 8003a34:	43a3      	bics	r3, r4
 8003a36:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a38:	033f      	lsls	r7, r7, #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3a:	0113      	lsls	r3, r2, #4
 8003a3c:	4323      	orrs	r3, r4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3e:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8003a40:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a42:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <HAL_TIM_ConfigClockSource+0x140>)
 8003a48:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4a:	2367      	movs	r3, #103	; 0x67
 8003a4c:	e7c1      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4e:	68ca      	ldr	r2, [r1, #12]
 8003a50:	684c      	ldr	r4, [r1, #4]
  tmpccer = TIMx->CCER;
 8003a52:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a54:	6a03      	ldr	r3, [r0, #32]
 8003a56:	43bb      	bics	r3, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a58:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5e:	43bb      	bics	r3, r7
 8003a60:	001f      	movs	r7, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a62:	0113      	lsls	r3, r2, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a64:	220a      	movs	r2, #10
 8003a66:	4391      	bics	r1, r2
 8003a68:	000a      	movs	r2, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a6a:	433b      	orrs	r3, r7
  tmpccer |= TIM_ICPolarity;
 8003a6c:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a70:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a72:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a74:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_TIM_ConfigClockSource+0x140>)
 8003a76:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a78:	2347      	movs	r3, #71	; 0x47
 8003a7a:	e7aa      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x92>
 8003a7c:	ffce0088 	.word	0xffce0088
 8003a80:	ffcfff8f 	.word	0xffcfff8f
 8003a84:	ffff0fff 	.word	0xffff0fff

08003a88 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a88:	231f      	movs	r3, #31
{
 8003a8a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a8c:	2401      	movs	r4, #1
 8003a8e:	4019      	ands	r1, r3
 8003a90:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a92:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003a94:	6a03      	ldr	r3, [r0, #32]
 8003a96:	43a3      	bics	r3, r4
 8003a98:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9a:	6a03      	ldr	r3, [r0, #32]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	6202      	str	r2, [r0, #32]
}
 8003aa0:	bd10      	pop	{r4, pc}
	...

08003aa4 <HAL_TIM_OC_Start>:
{
 8003aa4:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aa6:	0003      	movs	r3, r0
{
 8003aa8:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	d105      	bne.n	8003aba <HAL_TIM_OC_Start+0x16>
 8003aae:	333e      	adds	r3, #62	; 0x3e
    return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	4282      	cmp	r2, r0
 8003ab6:	d020      	beq.n	8003afa <HAL_TIM_OC_Start+0x56>
}
 8003ab8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aba:	2904      	cmp	r1, #4
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_OC_Start+0x1e>
 8003abe:	333f      	adds	r3, #63	; 0x3f
 8003ac0:	e7f6      	b.n	8003ab0 <HAL_TIM_OC_Start+0xc>
 8003ac2:	2908      	cmp	r1, #8
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_TIM_OC_Start+0x42>
 8003ac6:	3340      	adds	r3, #64	; 0x40
 8003ac8:	781b      	ldrb	r3, [r3, #0]
    return HAL_ERROR;
 8003aca:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003acc:	3b01      	subs	r3, #1
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	4193      	sbcs	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad8:	2302      	movs	r3, #2
 8003ada:	0022      	movs	r2, r4
 8003adc:	2908      	cmp	r1, #8
 8003ade:	d12d      	bne.n	8003b3c <HAL_TIM_OC_Start+0x98>
 8003ae0:	3240      	adds	r2, #64	; 0x40
 8003ae2:	7013      	strb	r3, [r2, #0]
 8003ae4:	e00b      	b.n	8003afe <HAL_TIM_OC_Start+0x5a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ae6:	290c      	cmp	r1, #12
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_OC_Start+0x4a>
 8003aea:	3341      	adds	r3, #65	; 0x41
 8003aec:	e7ec      	b.n	8003ac8 <HAL_TIM_OC_Start+0x24>
 8003aee:	2910      	cmp	r1, #16
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_OC_Start+0x52>
 8003af2:	3342      	adds	r3, #66	; 0x42
 8003af4:	e7e8      	b.n	8003ac8 <HAL_TIM_OC_Start+0x24>
 8003af6:	3343      	adds	r3, #67	; 0x43
 8003af8:	e7e6      	b.n	8003ac8 <HAL_TIM_OC_Start+0x24>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003afe:	2201      	movs	r2, #1
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	f7ff ffc1 	bl	8003a88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	4918      	ldr	r1, [pc, #96]	; (8003b6c <HAL_TIM_OC_Start+0xc8>)
 8003b0a:	428b      	cmp	r3, r1
 8003b0c:	d020      	beq.n	8003b50 <HAL_TIM_OC_Start+0xac>
 8003b0e:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_TIM_OC_Start+0xcc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_OC_Start+0xac>
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_TIM_OC_Start+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01a      	beq.n	8003b50 <HAL_TIM_OC_Start+0xac>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_TIM_OC_Start+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d11f      	bne.n	8003b60 <HAL_TIM_OC_Start+0xbc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_TIM_OC_Start+0xd8>)
  return HAL_OK;
 8003b24:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	2a06      	cmp	r2, #6
 8003b2a:	d0c5      	beq.n	8003ab8 <HAL_TIM_OC_Start+0x14>
 8003b2c:	3907      	subs	r1, #7
 8003b2e:	428a      	cmp	r2, r1
 8003b30:	d0c2      	beq.n	8003ab8 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8003b32:	2201      	movs	r2, #1
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e7bd      	b.n	8003ab8 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3c:	290c      	cmp	r1, #12
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_OC_Start+0xa0>
 8003b40:	3241      	adds	r2, #65	; 0x41
 8003b42:	e7ce      	b.n	8003ae2 <HAL_TIM_OC_Start+0x3e>
 8003b44:	2910      	cmp	r1, #16
 8003b46:	d101      	bne.n	8003b4c <HAL_TIM_OC_Start+0xa8>
 8003b48:	3242      	adds	r2, #66	; 0x42
 8003b4a:	e7ca      	b.n	8003ae2 <HAL_TIM_OC_Start+0x3e>
 8003b4c:	3243      	adds	r2, #67	; 0x43
 8003b4e:	e7c8      	b.n	8003ae2 <HAL_TIM_OC_Start+0x3e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003b54:	0212      	lsls	r2, r2, #8
 8003b56:	4302      	orrs	r2, r0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d1dd      	bne.n	8003b1a <HAL_TIM_OC_Start+0x76>
 8003b5e:	e7df      	b.n	8003b20 <HAL_TIM_OC_Start+0x7c>
    __HAL_TIM_ENABLE(htim);
 8003b60:	2201      	movs	r2, #1
 8003b62:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8003b64:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e7a5      	b.n	8003ab8 <HAL_TIM_OC_Start+0x14>
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	00010007 	.word	0x00010007

08003b80 <HAL_TIM_PWM_Start>:
 8003b80:	b510      	push	{r4, lr}
 8003b82:	f7ff ff8f 	bl	8003aa4 <HAL_TIM_OC_Start>
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8a:	0004      	movs	r4, r0
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	343c      	adds	r4, #60	; 0x3c
 8003b90:	7825      	ldrb	r5, [r4, #0]
{
 8003b92:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003b94:	0010      	movs	r0, r2
 8003b96:	2d01      	cmp	r5, #1
 8003b98:	d01f      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9a:	001d      	movs	r5, r3
 8003b9c:	353d      	adds	r5, #61	; 0x3d
 8003b9e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba0:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ba2:	4e0e      	ldr	r6, [pc, #56]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 8003ba4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003ba6:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ba8:	42b2      	cmp	r2, r6
 8003baa:	d103      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bac:	4f0c      	ldr	r7, [pc, #48]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003bae:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb0:	684f      	ldr	r7, [r1, #4]
 8003bb2:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb4:	2770      	movs	r7, #112	; 0x70
 8003bb6:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb8:	680f      	ldr	r7, [r1, #0]
 8003bba:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bbc:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	42b2      	cmp	r2, r6
 8003bc0:	d002      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bcc:	688b      	ldr	r3, [r1, #8]
 8003bce:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd0:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003bd4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003bd6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003bd8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	ff0fffff 	.word	0xff0fffff
 8003be4:	40000400 	.word	0x40000400

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bec:	6925      	ldr	r5, [r4, #16]
 8003bee:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf2:	4329      	orrs	r1, r5
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	69c3      	ldr	r3, [r0, #28]
 8003bf8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfa:	6810      	ldr	r0, [r2, #0]
 8003bfc:	4d48      	ldr	r5, [pc, #288]	; (8003d20 <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfe:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c00:	4028      	ands	r0, r5
 8003c02:	4301      	orrs	r1, r0
 8003c04:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	6851      	ldr	r1, [r2, #4]
 8003c08:	4846      	ldr	r0, [pc, #280]	; (8003d24 <UART_SetConfig+0x13c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c0a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	68e0      	ldr	r0, [r4, #12]
 8003c10:	4301      	orrs	r1, r0
 8003c12:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8003c14:	69a1      	ldr	r1, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c16:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003c18:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1a:	4d43      	ldr	r5, [pc, #268]	; (8003d28 <UART_SetConfig+0x140>)
 8003c1c:	4028      	ands	r0, r5
 8003c1e:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c20:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c22:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c26:	4381      	bics	r1, r0
 8003c28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c2a:	4301      	orrs	r1, r0
 8003c2c:	62d1      	str	r1, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2e:	493f      	ldr	r1, [pc, #252]	; (8003d2c <UART_SetConfig+0x144>)
 8003c30:	428a      	cmp	r2, r1
 8003c32:	d115      	bne.n	8003c60 <UART_SetConfig+0x78>
 8003c34:	2103      	movs	r1, #3
 8003c36:	4a3e      	ldr	r2, [pc, #248]	; (8003d30 <UART_SetConfig+0x148>)
 8003c38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0209      	lsls	r1, r1, #8
 8003c42:	2a02      	cmp	r2, #2
 8003c44:	d85f      	bhi.n	8003d06 <UART_SetConfig+0x11e>
 8003c46:	483b      	ldr	r0, [pc, #236]	; (8003d34 <UART_SetConfig+0x14c>)
 8003c48:	5c80      	ldrb	r0, [r0, r2]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	d014      	beq.n	8003c78 <UART_SetConfig+0x90>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c4e:	2808      	cmp	r0, #8
 8003c50:	d857      	bhi.n	8003d02 <UART_SetConfig+0x11a>
 8003c52:	f7fc fa55 	bl	8000100 <__gnu_thumb1_case_uqi>
 8003c56:	560c      	.short	0x560c
 8003c58:	56515654 	.word	0x56515654
 8003c5c:	5656      	.short	0x5656
 8003c5e:	3b          	.byte	0x3b
 8003c5f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c60:	4935      	ldr	r1, [pc, #212]	; (8003d38 <UART_SetConfig+0x150>)
 8003c62:	428a      	cmp	r2, r1
 8003c64:	d14d      	bne.n	8003d02 <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0212      	lsls	r2, r2, #8
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04d      	beq.n	8003d0a <UART_SetConfig+0x122>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6e:	f7ff fb05 	bl	800327c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d04d      	beq.n	8003d12 <UART_SetConfig+0x12a>
 8003c76:	e02b      	b.n	8003cd0 <UART_SetConfig+0xe8>
    switch (clocksource)
 8003c78:	2808      	cmp	r0, #8
 8003c7a:	d842      	bhi.n	8003d02 <UART_SetConfig+0x11a>
 8003c7c:	f7fc fa40 	bl	8000100 <__gnu_thumb1_case_uqi>
 8003c80:	41084145 	.word	0x41084145
 8003c84:	41414105 	.word	0x41414105
 8003c88:	09          	.byte	0x09
 8003c89:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7ff fa03 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003c8e:	e03e      	b.n	8003d0e <UART_SetConfig+0x126>
    switch (clocksource)
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <UART_SetConfig+0x154>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c94:	492a      	ldr	r1, [pc, #168]	; (8003d40 <UART_SetConfig+0x158>)
 8003c96:	0052      	lsls	r2, r2, #1
 8003c98:	5a51      	ldrh	r1, [r2, r1]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fc fa44 	bl	8000128 <__udivsi3>
 8003ca0:	6865      	ldr	r5, [r4, #4]
 8003ca2:	0040      	lsls	r0, r0, #1
 8003ca4:	086b      	lsrs	r3, r5, #1
 8003ca6:	18c0      	adds	r0, r0, r3
 8003ca8:	0029      	movs	r1, r5
 8003caa:	f7fc fa3d 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cae:	0002      	movs	r2, r0
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <UART_SetConfig+0x15c>)
 8003cb2:	3a10      	subs	r2, #16
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d824      	bhi.n	8003d02 <UART_SetConfig+0x11a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb8:	230f      	movs	r3, #15
 8003cba:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cbc:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cbe:	439a      	bics	r2, r3
 8003cc0:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc2:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	4318      	orrs	r0, r3
 8003cc8:	60d0      	str	r0, [r2, #12]
 8003cca:	e022      	b.n	8003d12 <UART_SetConfig+0x12a>
    switch (clocksource)
 8003ccc:	2080      	movs	r0, #128	; 0x80
 8003cce:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <UART_SetConfig+0x158>)
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	5a99      	ldrh	r1, [r3, r2]
 8003cd8:	f7fc fa26 	bl	8000128 <__udivsi3>
 8003cdc:	6865      	ldr	r5, [r4, #4]
 8003cde:	086b      	lsrs	r3, r5, #1
 8003ce0:	18c0      	adds	r0, r0, r3
 8003ce2:	0029      	movs	r1, r5
 8003ce4:	f7fc fa20 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce8:	0002      	movs	r2, r0
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <UART_SetConfig+0x15c>)
 8003cec:	3a10      	subs	r2, #16
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d807      	bhi.n	8003d02 <UART_SetConfig+0x11a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	60d8      	str	r0, [r3, #12]
 8003cf6:	e00c      	b.n	8003d12 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf8:	f7ff f9cc 	bl	8003094 <HAL_RCC_GetSysClockFreq>
        break;
 8003cfc:	e7b9      	b.n	8003c72 <UART_SetConfig+0x8a>
        pclk = (uint32_t) HSI_VALUE;
 8003cfe:	480f      	ldr	r0, [pc, #60]	; (8003d3c <UART_SetConfig+0x154>)
 8003d00:	e7e6      	b.n	8003cd0 <UART_SetConfig+0xe8>
    switch (clocksource)
 8003d02:	2001      	movs	r0, #1
 8003d04:	e006      	b.n	8003d14 <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d06:	428b      	cmp	r3, r1
 8003d08:	d1b1      	bne.n	8003c6e <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0a:	f7ff fab7 	bl	800327c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0e:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003d10:	d1bf      	bne.n	8003c92 <UART_SetConfig+0xaa>
 8003d12:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <UART_SetConfig+0x160>)
 8003d16:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8003d1c:	67a3      	str	r3, [r4, #120]	; 0x78

  return ret;
}
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	cfff69f3 	.word	0xcfff69f3
 8003d24:	ffffcfff 	.word	0xffffcfff
 8003d28:	11fff4ff 	.word	0x11fff4ff
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40021000 	.word	0x40021000
 8003d34:	0800570e 	.word	0x0800570e
 8003d38:	40004400 	.word	0x40004400
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	08005712 	.word	0x08005712
 8003d44:	0000ffef 	.word	0x0000ffef
 8003d48:	00010001 	.word	0x00010001

08003d4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8003d4e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d50:	07da      	lsls	r2, r3, #31
 8003d52:	d506      	bpl.n	8003d62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d54:	6801      	ldr	r1, [r0, #0]
 8003d56:	4c28      	ldr	r4, [pc, #160]	; (8003df8 <UART_AdvFeatureConfig+0xac>)
 8003d58:	684a      	ldr	r2, [r1, #4]
 8003d5a:	4022      	ands	r2, r4
 8003d5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d5e:	4322      	orrs	r2, r4
 8003d60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d62:	079a      	lsls	r2, r3, #30
 8003d64:	d506      	bpl.n	8003d74 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d66:	6801      	ldr	r1, [r0, #0]
 8003d68:	4c24      	ldr	r4, [pc, #144]	; (8003dfc <UART_AdvFeatureConfig+0xb0>)
 8003d6a:	684a      	ldr	r2, [r1, #4]
 8003d6c:	4022      	ands	r2, r4
 8003d6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d70:	4322      	orrs	r2, r4
 8003d72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	075a      	lsls	r2, r3, #29
 8003d76:	d506      	bpl.n	8003d86 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d78:	6801      	ldr	r1, [r0, #0]
 8003d7a:	4c21      	ldr	r4, [pc, #132]	; (8003e00 <UART_AdvFeatureConfig+0xb4>)
 8003d7c:	684a      	ldr	r2, [r1, #4]
 8003d7e:	4022      	ands	r2, r4
 8003d80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d82:	4322      	orrs	r2, r4
 8003d84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	071a      	lsls	r2, r3, #28
 8003d88:	d506      	bpl.n	8003d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d8a:	6801      	ldr	r1, [r0, #0]
 8003d8c:	4c1d      	ldr	r4, [pc, #116]	; (8003e04 <UART_AdvFeatureConfig+0xb8>)
 8003d8e:	684a      	ldr	r2, [r1, #4]
 8003d90:	4022      	ands	r2, r4
 8003d92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d94:	4322      	orrs	r2, r4
 8003d96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d98:	06da      	lsls	r2, r3, #27
 8003d9a:	d506      	bpl.n	8003daa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d9c:	6801      	ldr	r1, [r0, #0]
 8003d9e:	4c1a      	ldr	r4, [pc, #104]	; (8003e08 <UART_AdvFeatureConfig+0xbc>)
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	4022      	ands	r2, r4
 8003da4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003da6:	4322      	orrs	r2, r4
 8003da8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	069a      	lsls	r2, r3, #26
 8003dac:	d506      	bpl.n	8003dbc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dae:	6801      	ldr	r1, [r0, #0]
 8003db0:	4c16      	ldr	r4, [pc, #88]	; (8003e0c <UART_AdvFeatureConfig+0xc0>)
 8003db2:	688a      	ldr	r2, [r1, #8]
 8003db4:	4022      	ands	r2, r4
 8003db6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003db8:	4322      	orrs	r2, r4
 8003dba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dbc:	065a      	lsls	r2, r3, #25
 8003dbe:	d510      	bpl.n	8003de2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc0:	6801      	ldr	r1, [r0, #0]
 8003dc2:	4d13      	ldr	r5, [pc, #76]	; (8003e10 <UART_AdvFeatureConfig+0xc4>)
 8003dc4:	684a      	ldr	r2, [r1, #4]
 8003dc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003dc8:	402a      	ands	r2, r5
 8003dca:	4322      	orrs	r2, r4
 8003dcc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	0352      	lsls	r2, r2, #13
 8003dd2:	4294      	cmp	r4, r2
 8003dd4:	d105      	bne.n	8003de2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd6:	684a      	ldr	r2, [r1, #4]
 8003dd8:	4c0e      	ldr	r4, [pc, #56]	; (8003e14 <UART_AdvFeatureConfig+0xc8>)
 8003dda:	4022      	ands	r2, r4
 8003ddc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003dde:	4322      	orrs	r2, r4
 8003de0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	d506      	bpl.n	8003df4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de6:	6802      	ldr	r2, [r0, #0]
 8003de8:	490b      	ldr	r1, [pc, #44]	; (8003e18 <UART_AdvFeatureConfig+0xcc>)
 8003dea:	6853      	ldr	r3, [r2, #4]
 8003dec:	400b      	ands	r3, r1
 8003dee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6053      	str	r3, [r2, #4]
  }
}
 8003df4:	bd30      	pop	{r4, r5, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	fffdffff 	.word	0xfffdffff
 8003dfc:	fffeffff 	.word	0xfffeffff
 8003e00:	fffbffff 	.word	0xfffbffff
 8003e04:	ffff7fff 	.word	0xffff7fff
 8003e08:	ffffefff 	.word	0xffffefff
 8003e0c:	ffffdfff 	.word	0xffffdfff
 8003e10:	ffefffff 	.word	0xffefffff
 8003e14:	ff9fffff 	.word	0xff9fffff
 8003e18:	fff7ffff 	.word	0xfff7ffff

08003e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e1e:	2780      	movs	r7, #128	; 0x80
{
 8003e20:	0004      	movs	r4, r0
 8003e22:	000d      	movs	r5, r1
 8003e24:	0016      	movs	r6, r2
 8003e26:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e28:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	69d3      	ldr	r3, [r2, #28]
 8003e2e:	402b      	ands	r3, r5
 8003e30:	1b5b      	subs	r3, r3, r5
 8003e32:	4259      	negs	r1, r3
 8003e34:	414b      	adcs	r3, r1
 8003e36:	42b3      	cmp	r3, r6
 8003e38:	d001      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e02a      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	9b08      	ldr	r3, [sp, #32]
 8003e40:	3301      	adds	r3, #1
 8003e42:	d0f3      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fd fce8 	bl	8001818 <HAL_GetTick>
 8003e48:	9b01      	ldr	r3, [sp, #4]
 8003e4a:	1ac0      	subs	r0, r0, r3
 8003e4c:	9b08      	ldr	r3, [sp, #32]
 8003e4e:	4298      	cmp	r0, r3
 8003e50:	d801      	bhi.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x3a>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11f      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e56:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e60:	6821      	ldr	r1, [r4, #0]
 8003e62:	4d20      	ldr	r5, [pc, #128]	; (8003ee4 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8003e64:	680b      	ldr	r3, [r1, #0]
 8003e66:	402b      	ands	r3, r5
 8003e68:	600b      	str	r3, [r1, #0]
 8003e6a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	688b      	ldr	r3, [r1, #8]
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
 8003e7e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003e82:	0022      	movs	r2, r4
 8003e84:	2320      	movs	r3, #32
 8003e86:	3288      	adds	r2, #136	; 0x88
 8003e88:	6013      	str	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	6053      	str	r3, [r2, #4]
          __HAL_UNLOCK(huart);
 8003e8c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003e8e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003e90:	3484      	adds	r4, #132	; 0x84
 8003e92:	7023      	strb	r3, [r4, #0]
}
 8003e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e96:	2104      	movs	r1, #4
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	420a      	tst	r2, r1
 8003e9e:	d0c4      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	423a      	tst	r2, r7
 8003ea4:	d0c1      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea6:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	2201      	movs	r2, #1
 8003eae:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003eb2:	6821      	ldr	r1, [r4, #0]
 8003eb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ee4 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8003eb6:	680b      	ldr	r3, [r1, #0]
 8003eb8:	402b      	ands	r3, r5
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	688b      	ldr	r3, [r1, #8]
 8003ecc:	4393      	bics	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]
 8003ed0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003ed4:	0022      	movs	r2, r4
 8003ed6:	2320      	movs	r3, #32
 8003ed8:	3288      	adds	r2, #136	; 0x88
 8003eda:	6013      	str	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 8003edc:	6053      	str	r3, [r2, #4]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ede:	6093      	str	r3, [r2, #8]
 8003ee0:	e7d4      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x70>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	fffffe5f 	.word	0xfffffe5f

08003ee8 <HAL_UART_Transmit>:
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eea:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	0002      	movs	r2, r0
{
 8003eee:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef0:	3288      	adds	r2, #136	; 0x88
{
 8003ef2:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef4:	6813      	ldr	r3, [r2, #0]
{
 8003ef6:	0004      	movs	r4, r0
 8003ef8:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003efa:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d146      	bne.n	8003f8e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8003f00:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d043      	beq.n	8003f8e <HAL_UART_Transmit+0xa6>
 8003f06:	2e00      	cmp	r6, #0
 8003f08:	d041      	beq.n	8003f8e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	68a1      	ldr	r1, [r4, #8]
 8003f0e:	015b      	lsls	r3, r3, #5
 8003f10:	4299      	cmp	r1, r3
 8003f12:	d104      	bne.n	8003f1e <HAL_UART_Transmit+0x36>
 8003f14:	6923      	ldr	r3, [r4, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f1a:	4205      	tst	r5, r0
 8003f1c:	d137      	bne.n	8003f8e <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	0023      	movs	r3, r4
 8003f20:	2100      	movs	r1, #0
 8003f22:	3390      	adds	r3, #144	; 0x90
 8003f24:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f26:	2321      	movs	r3, #33	; 0x21
 8003f28:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f2a:	f7fd fc75 	bl	8001818 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003f2e:	0023      	movs	r3, r4
 8003f30:	3354      	adds	r3, #84	; 0x54
 8003f32:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003f34:	3302      	adds	r3, #2
 8003f36:	801e      	strh	r6, [r3, #0]
 8003f38:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003f3e:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003f40:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_Transmit+0x6a>
 8003f48:	6923      	ldr	r3, [r4, #16]
 8003f4a:	42b3      	cmp	r3, r6
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Transmit+0x6a>
 8003f4e:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003f50:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003f52:	0023      	movs	r3, r4
 8003f54:	3356      	adds	r3, #86	; 0x56
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0020      	movs	r0, r4
 8003f66:	003b      	movs	r3, r7
 8003f68:	f7ff ff58 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	3488      	adds	r4, #136	; 0x88
 8003f74:	6023      	str	r3, [r4, #0]
    return HAL_OK;
 8003f76:	e00a      	b.n	8003f8e <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	003b      	movs	r3, r7
 8003f82:	0020      	movs	r0, r4
 8003f84:	f7ff ff4a 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8003f8c:	2003      	movs	r0, #3
}
 8003f8e:	b005      	add	sp, #20
 8003f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f92:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f98:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003f9a:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9c:	05db      	lsls	r3, r3, #23
 8003f9e:	0ddb      	lsrs	r3, r3, #23
 8003fa0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003fa2:	9b02      	ldr	r3, [sp, #8]
 8003fa4:	9a02      	ldr	r2, [sp, #8]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
 8003fae:	e7d0      	b.n	8003f52 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb0:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003fb2:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003fb6:	e7f4      	b.n	8003fa2 <HAL_UART_Transmit+0xba>

08003fb8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	0003      	movs	r3, r0
{
 8003fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	2600      	movs	r6, #0
{
 8003fbe:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	3390      	adds	r3, #144	; 0x90
 8003fc2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003fc4:	f7fd fc28 	bl	8001818 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003fca:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	071b      	lsls	r3, r3, #28
 8003fd0:	d419      	bmi.n	8004006 <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	075b      	lsls	r3, r3, #29
 8003fd8:	d50a      	bpl.n	8003ff0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <UART_CheckIdleState+0x68>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	002b      	movs	r3, r5
 8003fe6:	03c9      	lsls	r1, r1, #15
 8003fe8:	f7ff ff18 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d115      	bne.n	800401c <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	3288      	adds	r2, #136	; 0x88
 8003ff8:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	6053      	str	r3, [r2, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffe:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8004000:	3484      	adds	r4, #132	; 0x84
 8004002:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004004:	e00b      	b.n	800401e <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <UART_CheckIdleState+0x68>)
 800400a:	0032      	movs	r2, r6
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0389      	lsls	r1, r1, #14
 8004010:	0003      	movs	r3, r0
 8004012:	0020      	movs	r0, r4
 8004014:	f7ff ff02 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8004018:	2800      	cmp	r0, #0
 800401a:	d0da      	beq.n	8003fd2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800401c:	2003      	movs	r0, #3
}
 800401e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004020:	01ffffff 	.word	0x01ffffff

08004024 <HAL_UART_Init>:
{
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800402a:	2001      	movs	r0, #1
}
 800402c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	0005      	movs	r5, r0
 8004030:	3588      	adds	r5, #136	; 0x88
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8004038:	0002      	movs	r2, r0
 800403a:	3284      	adds	r2, #132	; 0x84
 800403c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800403e:	f7fd fb39 	bl	80016b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004042:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004044:	2101      	movs	r1, #1
 8004046:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004048:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800404a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800404e:	438b      	bics	r3, r1
 8004050:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004052:	f7ff fdc9 	bl	8003be8 <UART_SetConfig>
 8004056:	2801      	cmp	r0, #1
 8004058:	d0e7      	beq.n	800402a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8004060:	0020      	movs	r0, r4
 8004062:	f7ff fe73 	bl	8003d4c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	4907      	ldr	r1, [pc, #28]	; (8004088 <HAL_UART_Init+0x64>)
 800406a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800406c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004070:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	438a      	bics	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800407a:	2201      	movs	r2, #1
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004082:	f7ff ff99 	bl	8003fb8 <UART_CheckIdleState>
 8004086:	e7d1      	b.n	800402c <HAL_UART_Init+0x8>
 8004088:	ffffb7ff 	.word	0xffffb7ff

0800408c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800408e:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8004090:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <UARTEx_SetNbDataToProcess+0x40>)
 8004098:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800409c:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800409e:	4e0c      	ldr	r6, [pc, #48]	; (80040d0 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040a0:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040a2:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040a6:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040a8:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80040aa:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040ac:	00c0      	lsls	r0, r0, #3
 80040ae:	f7fc f8c5 	bl	800023c <__divsi3>
 80040b2:	0023      	movs	r3, r4
 80040b4:	336a      	adds	r3, #106	; 0x6a
 80040b6:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040b8:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040ba:	0f5b      	lsrs	r3, r3, #29
 80040bc:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80040be:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040c0:	00c0      	lsls	r0, r0, #3
 80040c2:	f7fc f8bb 	bl	800023c <__divsi3>
 80040c6:	3468      	adds	r4, #104	; 0x68
 80040c8:	8020      	strh	r0, [r4, #0]
}
 80040ca:	e7e6      	b.n	800409a <UARTEx_SetNbDataToProcess+0xe>
 80040cc:	00010001 	.word	0x00010001
 80040d0:	08005732 	.word	0x08005732
 80040d4:	0800572a 	.word	0x0800572a

080040d8 <HAL_UARTEx_DisableFifoMode>:
{
 80040d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80040da:	0004      	movs	r4, r0
 80040dc:	3484      	adds	r4, #132	; 0x84
 80040de:	7822      	ldrb	r2, [r4, #0]
{
 80040e0:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80040e2:	2002      	movs	r0, #2
 80040e4:	2a01      	cmp	r2, #1
 80040e6:	d011      	beq.n	800410c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	001d      	movs	r5, r3
 80040ea:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80040ec:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80040ee:	3588      	adds	r5, #136	; 0x88
 80040f0:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80040f6:	6810      	ldr	r0, [r2, #0]
 80040f8:	43b0      	bics	r0, r6
 80040fa:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040fc:	4804      	ldr	r0, [pc, #16]	; (8004110 <HAL_UARTEx_DisableFifoMode+0x38>)
 80040fe:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004100:	2000      	movs	r0, #0
 8004102:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8004104:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004106:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004108:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 800410a:	7020      	strb	r0, [r4, #0]
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	dfffffff 	.word	0xdfffffff

08004114 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004118:	0025      	movs	r5, r4
 800411a:	3584      	adds	r5, #132	; 0x84
 800411c:	782a      	ldrb	r2, [r5, #0]
{
 800411e:	0008      	movs	r0, r1
  __HAL_LOCK(huart);
 8004120:	2302      	movs	r3, #2
 8004122:	2a01      	cmp	r2, #1
 8004124:	d018      	beq.n	8004158 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8004126:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004128:	0026      	movs	r6, r4
  __HAL_LOCK(huart);
 800412a:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800412c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800412e:	3688      	adds	r6, #136	; 0x88
 8004130:	3322      	adds	r3, #34	; 0x22
 8004132:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004134:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	438b      	bics	r3, r1
 800413a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800413c:	6893      	ldr	r3, [r2, #8]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	08d9      	lsrs	r1, r3, #3
 8004142:	4301      	orrs	r1, r0
 8004144:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004146:	0020      	movs	r0, r4
 8004148:	f7ff ffa0 	bl	800408c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004150:	2320      	movs	r3, #32
 8004152:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8004154:	2300      	movs	r3, #0
 8004156:	702b      	strb	r3, [r5, #0]
}
 8004158:	0018      	movs	r0, r3
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800415c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800415e:	0005      	movs	r5, r0
 8004160:	3584      	adds	r5, #132	; 0x84
 8004162:	782b      	ldrb	r3, [r5, #0]
{
 8004164:	0004      	movs	r4, r0
 8004166:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004168:	2002      	movs	r0, #2
 800416a:	2b01      	cmp	r3, #1
 800416c:	d018      	beq.n	80041a0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 800416e:	0026      	movs	r6, r4
 8004170:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8004172:	3801      	subs	r0, #1
 8004174:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	3688      	adds	r6, #136	; 0x88
 8004178:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	4381      	bics	r1, r0
 8004182:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	4807      	ldr	r0, [pc, #28]	; (80041a4 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8004188:	4001      	ands	r1, r0
 800418a:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 800418c:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800418e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004190:	f7ff ff7c 	bl	800408c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004194:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004196:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004198:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800419a:	2320      	movs	r3, #32
 800419c:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 800419e:	7028      	strb	r0, [r5, #0]
}
 80041a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	f1ffffff 	.word	0xf1ffffff

080041a8 <VL53L4CD_ClearInterrupt>:
    status |= VL53L4CD_SetRangeTiming(dev, 50, 0);

    return status;
}

VL53L4CD_Error VL53L4CD_ClearInterrupt(Dev_t dev) {
 80041a8:	b510      	push	{r4, lr}
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

    status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 80041aa:	2201      	movs	r2, #1
 80041ac:	2186      	movs	r1, #134	; 0x86
 80041ae:	f000 f9d7 	bl	8004560 <VL53L4CD_WrByte>

    return status;
}
 80041b2:	bd10      	pop	{r4, pc}

080041b4 <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(Dev_t dev) {
 80041b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
    uint32_t tmp;

    status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80041b6:	216c      	movs	r1, #108	; 0x6c
 80041b8:	aa01      	add	r2, sp, #4
VL53L4CD_Error VL53L4CD_StartRanging(Dev_t dev) {
 80041ba:	0005      	movs	r5, r0
    status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80041bc:	f000 f96e 	bl	800449c <VL53L4CD_RdDWord>

    /* Sensor runs in continuous mode */
    if (tmp == (uint32_t)0) {
 80041c0:	9b01      	ldr	r3, [sp, #4]
    status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80041c2:	0004      	movs	r4, r0
        status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 80041c4:	2221      	movs	r2, #33	; 0x21
    if (tmp == (uint32_t)0) {
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d000      	beq.n	80041cc <VL53L4CD_StartRanging+0x18>
    }
    /* Sensor runs in autonomous mode */
    else {
        status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 80041ca:	2240      	movs	r2, #64	; 0x40
 80041cc:	0028      	movs	r0, r5
 80041ce:	2187      	movs	r1, #135	; 0x87
 80041d0:	f000 f9c6 	bl	8004560 <VL53L4CD_WrByte>
 80041d4:	4320      	orrs	r0, r4
 80041d6:	b2c0      	uxtb	r0, r0
    }

    return status;
}
 80041d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080041da <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(Dev_t dev) {
 80041da:	b510      	push	{r4, lr}
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

    status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 80041dc:	2200      	movs	r2, #0
 80041de:	2187      	movs	r1, #135	; 0x87
 80041e0:	f000 f9be 	bl	8004560 <VL53L4CD_WrByte>
    return status;
}
 80041e4:	bd10      	pop	{r4, pc}

080041e6 <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(Dev_t dev, uint8_t *p_is_data_ready) {
 80041e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e8:	b085      	sub	sp, #20
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
    uint8_t temp;
    uint8_t int_pol;

    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80041ea:	ab02      	add	r3, sp, #8
 80041ec:	1ddd      	adds	r5, r3, #7
 80041ee:	002a      	movs	r2, r5
VL53L4CD_Error VL53L4CD_CheckForDataReady(Dev_t dev, uint8_t *p_is_data_ready) {
 80041f0:	9100      	str	r1, [sp, #0]
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80041f2:	2130      	movs	r1, #48	; 0x30
VL53L4CD_Error VL53L4CD_CheckForDataReady(Dev_t dev, uint8_t *p_is_data_ready) {
 80041f4:	0006      	movs	r6, r0
    temp = temp & (uint8_t)0x10;
    temp = temp >> 4;
 80041f6:	2701      	movs	r7, #1
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80041f8:	f000 f992 	bl	8004520 <VL53L4CD_RdByte>
    temp = temp >> 4;
 80041fc:	782c      	ldrb	r4, [r5, #0]
        int_pol = (uint8_t)0;
    } else {
        int_pol = (uint8_t)1;
    }

    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80041fe:	002a      	movs	r2, r5
    temp = temp >> 4;
 8004200:	0924      	lsrs	r4, r4, #4
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8004202:	9001      	str	r0, [sp, #4]
    temp = temp >> 4;
 8004204:	403c      	ands	r4, r7
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8004206:	2131      	movs	r1, #49	; 0x31
 8004208:	0030      	movs	r0, r6
    temp = temp >> 4;
 800420a:	702c      	strb	r4, [r5, #0]
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 800420c:	f000 f988 	bl	8004520 <VL53L4CD_RdByte>

    if ((temp & (uint8_t)1) == int_pol) {
 8004210:	4262      	negs	r2, r4
 8004212:	4154      	adcs	r4, r2
 8004214:	782b      	ldrb	r3, [r5, #0]
 8004216:	401f      	ands	r7, r3
 8004218:	1be4      	subs	r4, r4, r7
 800421a:	4263      	negs	r3, r4
 800421c:	415c      	adcs	r4, r3
 800421e:	9b00      	ldr	r3, [sp, #0]
 8004220:	701c      	strb	r4, [r3, #0]
    status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8004222:	9b01      	ldr	r3, [sp, #4]
 8004224:	4303      	orrs	r3, r0
        *p_is_data_ready = (uint8_t)1;
    } else {
        *p_is_data_ready = (uint8_t)0;
    }

    return status;
 8004226:	b2d8      	uxtb	r0, r3
}
 8004228:	b005      	add	sp, #20
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800422c <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(Dev_t dev, uint32_t timing_budget_ms, uint32_t inter_measurement_ms) {
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	b085      	sub	sp, #20
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
    uint16_t clock_pll, osc_frequency, ms_byte;
    uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
    float_t inter_measurement_factor = (float_t)1.055;

    status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8004230:	ab02      	add	r3, sp, #8
 8004232:	1d9c      	adds	r4, r3, #6
VL53L4CD_Error VL53L4CD_SetRangeTiming(Dev_t dev, uint32_t timing_budget_ms, uint32_t inter_measurement_ms) {
 8004234:	9101      	str	r1, [sp, #4]
 8004236:	0016      	movs	r6, r2
    status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8004238:	2106      	movs	r1, #6
 800423a:	0022      	movs	r2, r4
VL53L4CD_Error VL53L4CD_SetRangeTiming(Dev_t dev, uint32_t timing_budget_ms, uint32_t inter_measurement_ms) {
 800423c:	0005      	movs	r5, r0
    status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 800423e:	f000 f94d 	bl	80044dc <VL53L4CD_RdWord>
    if (osc_frequency != (uint16_t)0) {
 8004242:	8821      	ldrh	r1, [r4, #0]
    status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8004244:	0007      	movs	r7, r0
    if (osc_frequency != (uint16_t)0) {
 8004246:	2900      	cmp	r1, #0
 8004248:	d045      	beq.n	80042d6 <VL53L4CD_SetRangeTiming+0xaa>
        timing_budget_us = timing_budget_ms * (uint32_t)1000;
 800424a:	24fa      	movs	r4, #250	; 0xfa
        macro_period_us = (uint32_t)((uint32_t)2304 * ((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 800424c:	2080      	movs	r0, #128	; 0x80
        timing_budget_us = timing_budget_ms * (uint32_t)1000;
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	00a4      	lsls	r4, r4, #2
        macro_period_us = (uint32_t)((uint32_t)2304 * ((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8004252:	05c0      	lsls	r0, r0, #23
        timing_budget_us = timing_budget_ms * (uint32_t)1000;
 8004254:	435c      	muls	r4, r3
        macro_period_us = (uint32_t)((uint32_t)2304 * ((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8004256:	f7fb ff67 	bl	8000128 <__udivsi3>
 800425a:	2190      	movs	r1, #144	; 0x90
 800425c:	0109      	lsls	r1, r1, #4
 800425e:	4341      	muls	r1, r0
 8004260:	098b      	lsrs	r3, r1, #6
 8004262:	9300      	str	r3, [sp, #0]
    } else {
        status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
    }

    /* Timing budget check validity */
    if ((timing_budget_ms < (uint32_t)10) || (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0)) {
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	3b0a      	subs	r3, #10
 8004268:	2bbe      	cmp	r3, #190	; 0xbe
 800426a:	d801      	bhi.n	8004270 <VL53L4CD_SetRangeTiming+0x44>
 800426c:	2f00      	cmp	r7, #0
 800426e:	d039      	beq.n	80042e4 <VL53L4CD_SetRangeTiming+0xb8>
        status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8004270:	2002      	movs	r0, #2
 8004272:	4240      	negs	r0, r0
 8004274:	4307      	orrs	r7, r0
 8004276:	b2ff      	uxtb	r7, r7
    /* Invalid case */
    else {
        status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
    }

    if (status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT) {
 8004278:	2ffe      	cmp	r7, #254	; 0xfe
 800427a:	d041      	beq.n	8004300 <VL53L4CD_SetRangeTiming+0xd4>
        ms_byte = 0;
        timing_budget_us = timing_budget_us << 12;
        tmp = macro_period_us * (uint32_t)16;
        ls_byte = ((timing_budget_us + ((tmp >> 6) >> 1)) / (tmp >> 6)) - (uint32_t)1;
 800427c:	9b00      	ldr	r3, [sp, #0]
        timing_budget_us = timing_budget_us << 12;
 800427e:	0324      	lsls	r4, r4, #12
        ls_byte = ((timing_budget_us + ((tmp >> 6) >> 1)) / (tmp >> 6)) - (uint32_t)1;
 8004280:	08d8      	lsrs	r0, r3, #3
 8004282:	0899      	lsrs	r1, r3, #2
 8004284:	1900      	adds	r0, r0, r4
 8004286:	f7fb ff4f 	bl	8000128 <__udivsi3>
        ms_byte = 0;
 800428a:	2200      	movs	r2, #0

        while ((ls_byte & 0xFFFFFF00U) > 0U) {
 800428c:	23ff      	movs	r3, #255	; 0xff
        ls_byte = ((timing_budget_us + ((tmp >> 6) >> 1)) / (tmp >> 6)) - (uint32_t)1;
 800428e:	3801      	subs	r0, #1
        while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8004290:	0006      	movs	r6, r0
 8004292:	439e      	bics	r6, r3
 8004294:	d15e      	bne.n	8004354 <VL53L4CD_SetRangeTiming+0x128>
            ls_byte = ls_byte >> 1;
            ms_byte++;
        }
        ms_byte = (uint16_t)(ms_byte << 8) + (uint16_t)(ls_byte & (uint32_t)0xFF);
 8004296:	0212      	lsls	r2, r2, #8
 8004298:	1812      	adds	r2, r2, r0
        status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A, ms_byte);
 800429a:	b292      	uxth	r2, r2
 800429c:	215e      	movs	r1, #94	; 0x5e
 800429e:	0028      	movs	r0, r5
 80042a0:	f000 f970 	bl	8004584 <VL53L4CD_WrWord>

        ms_byte = 0;
        tmp = macro_period_us * (uint32_t)12;
 80042a4:	210c      	movs	r1, #12
 80042a6:	9b00      	ldr	r3, [sp, #0]
        status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A, ms_byte);
 80042a8:	4307      	orrs	r7, r0
        tmp = macro_period_us * (uint32_t)12;
 80042aa:	4359      	muls	r1, r3
        ls_byte = ((timing_budget_us + ((tmp >> 6) >> 1)) / (tmp >> 6)) - (uint32_t)1;
 80042ac:	09c8      	lsrs	r0, r1, #7
 80042ae:	1900      	adds	r0, r0, r4
 80042b0:	0989      	lsrs	r1, r1, #6
 80042b2:	f7fb ff39 	bl	8000128 <__udivsi3>

        while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80042b6:	21ff      	movs	r1, #255	; 0xff
        status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A, ms_byte);
 80042b8:	b2ff      	uxtb	r7, r7
        ls_byte = ((timing_budget_us + ((tmp >> 6) >> 1)) / (tmp >> 6)) - (uint32_t)1;
 80042ba:	1e42      	subs	r2, r0, #1
        while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80042bc:	0013      	movs	r3, r2
 80042be:	438b      	bics	r3, r1
 80042c0:	d14c      	bne.n	800435c <VL53L4CD_SetRangeTiming+0x130>
            ls_byte = ls_byte >> 1;
            ms_byte++;
        }
        ms_byte = (uint16_t)(ms_byte << 8) + (uint16_t)(ls_byte & (uint32_t)0xFF);
 80042c2:	0236      	lsls	r6, r6, #8
 80042c4:	18b2      	adds	r2, r6, r2
        status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B, ms_byte);
 80042c6:	2161      	movs	r1, #97	; 0x61
 80042c8:	0028      	movs	r0, r5
 80042ca:	b292      	uxth	r2, r2
 80042cc:	f000 f95a 	bl	8004584 <VL53L4CD_WrWord>
 80042d0:	4338      	orrs	r0, r7
 80042d2:	b2c0      	uxtb	r0, r0
 80042d4:	e015      	b.n	8004302 <VL53L4CD_SetRangeTiming+0xd6>
        status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80042d6:	2002      	movs	r0, #2
 80042d8:	4240      	negs	r0, r0
 80042da:	4307      	orrs	r7, r0
    uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80042dc:	000c      	movs	r4, r1
        status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80042de:	b2ff      	uxtb	r7, r7
    uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80042e0:	9100      	str	r1, [sp, #0]
 80042e2:	e7bf      	b.n	8004264 <VL53L4CD_SetRangeTiming+0x38>
    else if (inter_measurement_ms == (uint32_t)0) {
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	d108      	bne.n	80042fa <VL53L4CD_SetRangeTiming+0xce>
        status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, 0);
 80042e8:	0032      	movs	r2, r6
 80042ea:	216c      	movs	r1, #108	; 0x6c
 80042ec:	0028      	movs	r0, r5
 80042ee:	f000 f95d 	bl	80045ac <VL53L4CD_WrDWord>
        timing_budget_us -= (uint32_t)2500;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <VL53L4CD_SetRangeTiming+0x138>)
        status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, 0);
 80042f4:	0007      	movs	r7, r0
        timing_budget_us -= (uint32_t)2500;
 80042f6:	18e4      	adds	r4, r4, r3
 80042f8:	e7be      	b.n	8004278 <VL53L4CD_SetRangeTiming+0x4c>
    else if (inter_measurement_ms > timing_budget_ms) {
 80042fa:	9b01      	ldr	r3, [sp, #4]
 80042fc:	42b3      	cmp	r3, r6
 80042fe:	d302      	bcc.n	8004306 <VL53L4CD_SetRangeTiming+0xda>
        status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8004300:	20fe      	movs	r0, #254	; 0xfe
    }

    return status;
}
 8004302:	b005      	add	sp, #20
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
 8004306:	aa03      	add	r2, sp, #12
 8004308:	21de      	movs	r1, #222	; 0xde
 800430a:	0028      	movs	r0, r5
 800430c:	f000 f8e6 	bl	80044dc <VL53L4CD_RdWord>
        clock_pll = clock_pll & (uint16_t)0x3FF;
 8004310:	ab02      	add	r3, sp, #8
 8004312:	889f      	ldrh	r7, [r3, #4]
        status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
 8004314:	9001      	str	r0, [sp, #4]
        clock_pll = clock_pll & (uint16_t)0x3FF;
 8004316:	05bf      	lsls	r7, r7, #22
 8004318:	0dbf      	lsrs	r7, r7, #22
 800431a:	809f      	strh	r7, [r3, #4]
        inter_measurement_factor = inter_measurement_factor * (float_t)inter_measurement_ms * (float_t)clock_pll;
 800431c:	0030      	movs	r0, r6
 800431e:	f7fc fc6f 	bl	8000c00 <__aeabi_ui2f>
 8004322:	4911      	ldr	r1, [pc, #68]	; (8004368 <VL53L4CD_SetRangeTiming+0x13c>)
 8004324:	f7fc f978 	bl	8000618 <__aeabi_fmul>
 8004328:	1c06      	adds	r6, r0, #0
 800432a:	0038      	movs	r0, r7
 800432c:	f7fc fc68 	bl	8000c00 <__aeabi_ui2f>
 8004330:	1c01      	adds	r1, r0, #0
 8004332:	1c30      	adds	r0, r6, #0
 8004334:	f7fc f970 	bl	8000618 <__aeabi_fmul>
        status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, (uint32_t)inter_measurement_factor);
 8004338:	f7fc f8a6 	bl	8000488 <__aeabi_f2uiz>
 800433c:	216c      	movs	r1, #108	; 0x6c
 800433e:	0002      	movs	r2, r0
 8004340:	0028      	movs	r0, r5
 8004342:	f000 f933 	bl	80045ac <VL53L4CD_WrDWord>
 8004346:	9b01      	ldr	r3, [sp, #4]
 8004348:	4303      	orrs	r3, r0
 800434a:	b2df      	uxtb	r7, r3
        timing_budget_us -= (uint32_t)4300;
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <VL53L4CD_SetRangeTiming+0x140>)
 800434e:	18e4      	adds	r4, r4, r3
        timing_budget_us /= (uint32_t)2;
 8004350:	0864      	lsrs	r4, r4, #1
 8004352:	e791      	b.n	8004278 <VL53L4CD_SetRangeTiming+0x4c>
            ms_byte++;
 8004354:	3201      	adds	r2, #1
            ls_byte = ls_byte >> 1;
 8004356:	0840      	lsrs	r0, r0, #1
            ms_byte++;
 8004358:	b292      	uxth	r2, r2
 800435a:	e799      	b.n	8004290 <VL53L4CD_SetRangeTiming+0x64>
            ms_byte++;
 800435c:	3601      	adds	r6, #1
            ls_byte = ls_byte >> 1;
 800435e:	0852      	lsrs	r2, r2, #1
            ms_byte++;
 8004360:	b2b6      	uxth	r6, r6
 8004362:	e7ab      	b.n	80042bc <VL53L4CD_SetRangeTiming+0x90>
 8004364:	fffff63c 	.word	0xfffff63c
 8004368:	3f870a3d 	.word	0x3f870a3d
 800436c:	ffffef34 	.word	0xffffef34

08004370 <VL53L4CD_SensorInit>:
VL53L4CD_Error VL53L4CD_SensorInit(Dev_t dev) {
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t i = 0;
 8004372:	2600      	movs	r6, #0
VL53L4CD_Error VL53L4CD_SensorInit(Dev_t dev) {
 8004374:	0004      	movs	r4, r0
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8004376:	0035      	movs	r5, r6
 8004378:	2701      	movs	r7, #1
VL53L4CD_Error VL53L4CD_SensorInit(Dev_t dev) {
 800437a:	b085      	sub	sp, #20
        status |= VL53L4CD_RdByte(dev, VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);
 800437c:	ab02      	add	r3, sp, #8
 800437e:	1dda      	adds	r2, r3, #7
 8004380:	21e5      	movs	r1, #229	; 0xe5
 8004382:	0020      	movs	r0, r4
 8004384:	f000 f8cc 	bl	8004520 <VL53L4CD_RdByte>
            continue_loop = (uint8_t)0;
 8004388:	2200      	movs	r2, #0
        if (tmp == (uint8_t)0x3) /* Sensor booted */
 800438a:	ab02      	add	r3, sp, #8
 800438c:	79db      	ldrb	r3, [r3, #7]
        status |= VL53L4CD_RdByte(dev, VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);
 800438e:	4305      	orrs	r5, r0
 8004390:	b2ed      	uxtb	r5, r5
            continue_loop = (uint8_t)0;
 8004392:	9200      	str	r2, [sp, #0]
        if (tmp == (uint8_t)0x3) /* Sensor booted */
 8004394:	2b03      	cmp	r3, #3
 8004396:	d006      	beq.n	80043a6 <VL53L4CD_SensorInit+0x36>
        } else if (i < (uint16_t)1000) /* Wait for boot */
 8004398:	23fa      	movs	r3, #250	; 0xfa
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	429e      	cmp	r6, r3
 800439e:	d264      	bcs.n	800446a <VL53L4CD_SensorInit+0xfa>
            i++;
 80043a0:	3601      	adds	r6, #1
 80043a2:	b2b6      	uxth	r6, r6
 80043a4:	9700      	str	r7, [sp, #0]
        WaitMs(dev, 1);
 80043a6:	0039      	movs	r1, r7
 80043a8:	0020      	movs	r0, r4
 80043aa:	f000 f917 	bl	80045dc <WaitMs>
    } while (continue_loop == (uint8_t)1);
 80043ae:	9b00      	ldr	r3, [sp, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d0e3      	beq.n	800437c <VL53L4CD_SensorInit+0xc>
 80043b4:	2600      	movs	r6, #0
        status |= VL53L4CD_WrByte(dev, Addr, VL53L4CD_DEFAULT_CONFIGURATION[Addr - (uint8_t)0x2D]);
 80043b6:	0031      	movs	r1, r6
 80043b8:	4b2f      	ldr	r3, [pc, #188]	; (8004478 <VL53L4CD_SensorInit+0x108>)
 80043ba:	312d      	adds	r1, #45	; 0x2d
 80043bc:	5cf2      	ldrb	r2, [r6, r3]
 80043be:	0020      	movs	r0, r4
 80043c0:	b289      	uxth	r1, r1
 80043c2:	f000 f8cd 	bl	8004560 <VL53L4CD_WrByte>
    for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++) {
 80043c6:	3601      	adds	r6, #1
        status |= VL53L4CD_WrByte(dev, Addr, VL53L4CD_DEFAULT_CONFIGURATION[Addr - (uint8_t)0x2D]);
 80043c8:	4305      	orrs	r5, r0
 80043ca:	b2ed      	uxtb	r5, r5
    for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++) {
 80043cc:	2e5b      	cmp	r6, #91	; 0x5b
 80043ce:	d1f2      	bne.n	80043b6 <VL53L4CD_SensorInit+0x46>
    status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80043d0:	2240      	movs	r2, #64	; 0x40
 80043d2:	2187      	movs	r1, #135	; 0x87
 80043d4:	0020      	movs	r0, r4
 80043d6:	f000 f8c3 	bl	8004560 <VL53L4CD_WrByte>
    i = (uint8_t)0;
 80043da:	2700      	movs	r7, #0
    status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80043dc:	4305      	orrs	r5, r0
 80043de:	b2ed      	uxtb	r5, r5
    continue_loop = (uint8_t)1;
 80043e0:	3e5a      	subs	r6, #90	; 0x5a
        status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80043e2:	ab02      	add	r3, sp, #8
 80043e4:	1dd9      	adds	r1, r3, #7
 80043e6:	0020      	movs	r0, r4
 80043e8:	f7ff fefd 	bl	80041e6 <VL53L4CD_CheckForDataReady>
        if (tmp == (uint8_t)1) /* Data ready */
 80043ec:	ab02      	add	r3, sp, #8
            continue_loop = (uint8_t)0;
 80043ee:	9a00      	ldr	r2, [sp, #0]
        if (tmp == (uint8_t)1) /* Data ready */
 80043f0:	79db      	ldrb	r3, [r3, #7]
        status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80043f2:	4305      	orrs	r5, r0
 80043f4:	b2ed      	uxtb	r5, r5
            continue_loop = (uint8_t)0;
 80043f6:	9201      	str	r2, [sp, #4]
        if (tmp == (uint8_t)1) /* Data ready */
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d006      	beq.n	800440a <VL53L4CD_SensorInit+0x9a>
        } else if (i < (uint16_t)1000) /* Wait for answer */
 80043fc:	23fa      	movs	r3, #250	; 0xfa
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	429f      	cmp	r7, r3
 8004402:	d236      	bcs.n	8004472 <VL53L4CD_SensorInit+0x102>
            i++;
 8004404:	3701      	adds	r7, #1
 8004406:	b2bf      	uxth	r7, r7
 8004408:	9601      	str	r6, [sp, #4]
        WaitMs(dev, 1);
 800440a:	0031      	movs	r1, r6
 800440c:	0020      	movs	r0, r4
 800440e:	f000 f8e5 	bl	80045dc <WaitMs>
    } while (continue_loop == (uint8_t)1);
 8004412:	9b01      	ldr	r3, [sp, #4]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d0e4      	beq.n	80043e2 <VL53L4CD_SensorInit+0x72>
    status |= VL53L4CD_ClearInterrupt(dev);
 8004418:	0020      	movs	r0, r4
 800441a:	f7ff fec5 	bl	80041a8 <VL53L4CD_ClearInterrupt>
 800441e:	0006      	movs	r6, r0
    status |= VL53L4CD_StopRanging(dev);
 8004420:	0020      	movs	r0, r4
 8004422:	f7ff feda 	bl	80041da <VL53L4CD_StopRanging>
 8004426:	4335      	orrs	r5, r6
    status |= VL53L4CD_WrByte(dev, VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, (uint8_t)0x09);
 8004428:	2209      	movs	r2, #9
 800442a:	2108      	movs	r1, #8
    status |= VL53L4CD_StopRanging(dev);
 800442c:	4305      	orrs	r5, r0
    status |= VL53L4CD_WrByte(dev, VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, (uint8_t)0x09);
 800442e:	0020      	movs	r0, r4
 8004430:	f000 f896 	bl	8004560 <VL53L4CD_WrByte>
    status |= VL53L4CD_StopRanging(dev);
 8004434:	b2ed      	uxtb	r5, r5
    status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8004436:	2200      	movs	r2, #0
 8004438:	210b      	movs	r1, #11
    status |= VL53L4CD_WrByte(dev, VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, (uint8_t)0x09);
 800443a:	4305      	orrs	r5, r0
    status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 800443c:	0020      	movs	r0, r4
 800443e:	f000 f88f 	bl	8004560 <VL53L4CD_WrByte>
    status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8004442:	22a0      	movs	r2, #160	; 0xa0
    status |= VL53L4CD_WrByte(dev, VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, (uint8_t)0x09);
 8004444:	b2ed      	uxtb	r5, r5
    status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8004446:	2124      	movs	r1, #36	; 0x24
    status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8004448:	4305      	orrs	r5, r0
    status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 800444a:	00d2      	lsls	r2, r2, #3
 800444c:	0020      	movs	r0, r4
 800444e:	f000 f899 	bl	8004584 <VL53L4CD_WrWord>
    status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8004452:	b2ed      	uxtb	r5, r5
    status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8004454:	2200      	movs	r2, #0
 8004456:	2132      	movs	r1, #50	; 0x32
    status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8004458:	4305      	orrs	r5, r0
    status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 800445a:	0020      	movs	r0, r4
 800445c:	f7ff fee6 	bl	800422c <VL53L4CD_SetRangeTiming>
    status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8004460:	b2ed      	uxtb	r5, r5
    status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8004462:	4328      	orrs	r0, r5
    return status;
 8004464:	b2c0      	uxtb	r0, r0
}
 8004466:	b005      	add	sp, #20
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
            continue_loop = (uint8_t)0;
 800446a:	2300      	movs	r3, #0
            status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800446c:	25ff      	movs	r5, #255	; 0xff
            continue_loop = (uint8_t)0;
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	e799      	b.n	80043a6 <VL53L4CD_SensorInit+0x36>
            status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8004472:	25ff      	movs	r5, #255	; 0xff
 8004474:	e7c9      	b.n	800440a <VL53L4CD_SensorInit+0x9a>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	0800573a 	.word	0x0800573a

0800447c <VL53L4CD_GetResult>:
    *p_timing_budget_ms = *p_timing_budget_ms / (uint32_t)1000;

    return status;
}

VL53L4CD_Error VL53L4CD_GetResult(Dev_t dev, VL53L4CD_ResultsData_t *p_result) {
 800447c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
    uint16_t temp_16;

    status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE, &temp_16);
 800447e:	466b      	mov	r3, sp
 8004480:	1d9d      	adds	r5, r3, #6
VL53L4CD_Error VL53L4CD_GetResult(Dev_t dev, VL53L4CD_ResultsData_t *p_result) {
 8004482:	000c      	movs	r4, r1
    status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE, &temp_16);
 8004484:	002a      	movs	r2, r5
 8004486:	2196      	movs	r1, #150	; 0x96
 8004488:	f000 f828 	bl	80044dc <VL53L4CD_RdWord>

    // stabilization algorithm implemented by Bold
    p_result->distance_mm = (p_result->distance_mm * 7 + temp_16) >> 3;
 800448c:	2307      	movs	r3, #7
 800448e:	8862      	ldrh	r2, [r4, #2]
 8004490:	4353      	muls	r3, r2
 8004492:	882a      	ldrh	r2, [r5, #0]
 8004494:	189b      	adds	r3, r3, r2
 8004496:	10db      	asrs	r3, r3, #3
 8004498:	8063      	strh	r3, [r4, #2]

    return status;
}
 800449a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800449c <VL53L4CD_RdDWord>:
#include "i2c.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	0015      	movs	r5, r2
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
	data_write[1] = RegisterAdress & 0xFF;
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044a2:	2764      	movs	r7, #100	; 0x64
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80044a4:	466a      	mov	r2, sp
{
 80044a6:	0004      	movs	r4, r0
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044a8:	4e0b      	ldr	r6, [pc, #44]	; (80044d8 <VL53L4CD_RdDWord+0x3c>)
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80044aa:	0a0b      	lsrs	r3, r1, #8
 80044ac:	7213      	strb	r3, [r2, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80044ae:	7251      	strb	r1, [r2, #9]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044b0:	2302      	movs	r3, #2
 80044b2:	0001      	movs	r1, r0
 80044b4:	aa02      	add	r2, sp, #8
 80044b6:	0030      	movs	r0, r6
 80044b8:	9700      	str	r7, [sp, #0]
 80044ba:	f7fe f9fd 	bl	80028b8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 80044be:	2304      	movs	r3, #4
 80044c0:	0021      	movs	r1, r4
 80044c2:	0030      	movs	r0, r6
 80044c4:	9700      	str	r7, [sp, #0]
 80044c6:	aa03      	add	r2, sp, #12
 80044c8:	f7fe fa88 	bl	80029dc <HAL_I2C_Master_Receive>
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	ba1b      	rev	r3, r3
 80044d0:	602b      	str	r3, [r5, #0]
			(data_read[2]<<8)| (data_read[3]));
	return status;
}
 80044d2:	b005      	add	sp, #20
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	20000290 	.word	0x20000290

080044dc <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
	data_write[1] = RegisterAdress & 0xFF;
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044de:	2764      	movs	r7, #100	; 0x64
{
 80044e0:	0004      	movs	r4, r0
 80044e2:	b087      	sub	sp, #28
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044e4:	4e0d      	ldr	r6, [pc, #52]	; (800451c <VL53L4CD_RdWord+0x40>)
{
 80044e6:	9203      	str	r2, [sp, #12]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80044e8:	0a0b      	lsrs	r3, r1, #8
 80044ea:	aa02      	add	r2, sp, #8
 80044ec:	7213      	strb	r3, [r2, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80044ee:	7251      	strb	r1, [r2, #9]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 80044f0:	ad05      	add	r5, sp, #20
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80044f2:	0001      	movs	r1, r0
 80044f4:	aa04      	add	r2, sp, #16
 80044f6:	2302      	movs	r3, #2
 80044f8:	0030      	movs	r0, r6
 80044fa:	9700      	str	r7, [sp, #0]
 80044fc:	f7fe f9dc 	bl	80028b8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8004500:	002a      	movs	r2, r5
 8004502:	2302      	movs	r3, #2
 8004504:	0021      	movs	r1, r4
 8004506:	0030      	movs	r0, r6
 8004508:	9700      	str	r7, [sp, #0]
 800450a:	f7fe fa67 	bl	80029dc <HAL_I2C_Master_Receive>
	*value = (data_read[0] << 8) | (data_read[1]);
 800450e:	882b      	ldrh	r3, [r5, #0]
 8004510:	9a03      	ldr	r2, [sp, #12]
 8004512:	ba5b      	rev16	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
	return status;
}
 8004516:	b007      	add	sp, #28
 8004518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	20000290 	.word	0x20000290

08004520 <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
	data_write[1] = RegisterAdress & 0xFF;
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004522:	2764      	movs	r7, #100	; 0x64
{
 8004524:	0004      	movs	r4, r0
 8004526:	b087      	sub	sp, #28
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004528:	4e0c      	ldr	r6, [pc, #48]	; (800455c <VL53L4CD_RdByte+0x3c>)
{
 800452a:	9203      	str	r2, [sp, #12]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800452c:	0a0b      	lsrs	r3, r1, #8
 800452e:	aa02      	add	r2, sp, #8
 8004530:	7313      	strb	r3, [r2, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8004532:	7351      	strb	r1, [r2, #13]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8004534:	ad04      	add	r5, sp, #16
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8004536:	0001      	movs	r1, r0
 8004538:	aa05      	add	r2, sp, #20
 800453a:	2302      	movs	r3, #2
 800453c:	0030      	movs	r0, r6
 800453e:	9700      	str	r7, [sp, #0]
 8004540:	f7fe f9ba 	bl	80028b8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8004544:	002a      	movs	r2, r5
 8004546:	2301      	movs	r3, #1
 8004548:	0021      	movs	r1, r4
 800454a:	0030      	movs	r0, r6
 800454c:	9700      	str	r7, [sp, #0]
 800454e:	f7fe fa45 	bl	80029dc <HAL_I2C_Master_Receive>
	*value = data_read[0];
 8004552:	782b      	ldrb	r3, [r5, #0]
 8004554:	9a03      	ldr	r2, [sp, #12]
 8004556:	7013      	strb	r3, [r2, #0]
	return status;
}
 8004558:	b007      	add	sp, #28
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	20000290 	.word	0x20000290

08004560 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8004560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data_write[3];
	uint8_t status = 0;

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004562:	0a0b      	lsrs	r3, r1, #8
 8004564:	ac03      	add	r4, sp, #12
 8004566:	7023      	strb	r3, [r4, #0]
	data_write[1] = RegisterAdress & 0xFF;
	data_write[2] = value & 0xFF;
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8004568:	2364      	movs	r3, #100	; 0x64
	data_write[1] = RegisterAdress & 0xFF;
 800456a:	7061      	strb	r1, [r4, #1]
	data_write[2] = value & 0xFF;
 800456c:	70a2      	strb	r2, [r4, #2]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 800456e:	0001      	movs	r1, r0
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	0022      	movs	r2, r4
 8004574:	3b61      	subs	r3, #97	; 0x61
 8004576:	4802      	ldr	r0, [pc, #8]	; (8004580 <VL53L4CD_WrByte+0x20>)
 8004578:	f7fe f99e 	bl	80028b8 <HAL_I2C_Master_Transmit>
	return status;
}
 800457c:	b004      	add	sp, #16
 800457e:	bd10      	pop	{r4, pc}
 8004580:	20000290 	.word	0x20000290

08004584 <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8004584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004586:	0013      	movs	r3, r2
	uint8_t data_write[4];
	uint8_t status = 0;
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004588:	aa03      	add	r2, sp, #12
	data_write[1] = RegisterAdress & 0xFF;
 800458a:	7051      	strb	r1, [r2, #1]
	data_write[2] = (value >> 8) & 0xFF;
	data_write[3] = value & 0xFF;
 800458c:	70d3      	strb	r3, [r2, #3]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800458e:	0a0c      	lsrs	r4, r1, #8
	data_write[2] = (value >> 8) & 0xFF;
 8004590:	0a19      	lsrs	r1, r3, #8
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8004592:	2364      	movs	r3, #100	; 0x64
	data_write[2] = (value >> 8) & 0xFF;
 8004594:	7091      	strb	r1, [r2, #2]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8004596:	7014      	strb	r4, [r2, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8004598:	0001      	movs	r1, r0
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4802      	ldr	r0, [pc, #8]	; (80045a8 <VL53L4CD_WrWord+0x24>)
 800459e:	3b60      	subs	r3, #96	; 0x60
 80045a0:	f7fe f98a 	bl	80028b8 <HAL_I2C_Master_Transmit>
	return status;
}
 80045a4:	b004      	add	sp, #16
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	20000290 	.word	0x20000290

080045ac <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 80045ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ae:	0013      	movs	r3, r2
	uint8_t data_write[6];
	uint8_t status = 0;

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80045b0:	aa02      	add	r2, sp, #8
	data_write[1] = RegisterAdress & 0xFF;
 80045b2:	7051      	strb	r1, [r2, #1]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80045b4:	0a0c      	lsrs	r4, r1, #8
	data_write[2] = (value >> 24) & 0xFF;
 80045b6:	0e19      	lsrs	r1, r3, #24
 80045b8:	7091      	strb	r1, [r2, #2]
	data_write[3] = (value >> 16) & 0xFF;
 80045ba:	0c19      	lsrs	r1, r3, #16
 80045bc:	70d1      	strb	r1, [r2, #3]
	data_write[4] = (value >> 8) & 0xFF;
	data_write[5] = value & 0xFF;
 80045be:	7153      	strb	r3, [r2, #5]
	data_write[4] = (value >> 8) & 0xFF;
 80045c0:	0a19      	lsrs	r1, r3, #8
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 80045c2:	2364      	movs	r3, #100	; 0x64
	data_write[4] = (value >> 8) & 0xFF;
 80045c4:	7111      	strb	r1, [r2, #4]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80045c6:	7014      	strb	r4, [r2, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 80045c8:	0001      	movs	r1, r0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <VL53L4CD_WrDWord+0x2c>)
 80045ce:	3b5e      	subs	r3, #94	; 0x5e
 80045d0:	f7fe f972 	bl	80028b8 <HAL_I2C_Master_Transmit>
	return status;
}
 80045d4:	b004      	add	sp, #16
 80045d6:	bd10      	pop	{r4, pc}
 80045d8:	20000290 	.word	0x20000290

080045dc <WaitMs>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 80045dc:	b510      	push	{r4, lr}
 80045de:	0008      	movs	r0, r1
	HAL_Delay(time_ms);
 80045e0:	f7fd f920 	bl	8001824 <HAL_Delay>
	return 0;
}
 80045e4:	2000      	movs	r0, #0
 80045e6:	bd10      	pop	{r4, pc}

080045e8 <__errno>:
 80045e8:	4b01      	ldr	r3, [pc, #4]	; (80045f0 <__errno+0x8>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	4770      	bx	lr
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	2600      	movs	r6, #0
 80045f8:	4d0c      	ldr	r5, [pc, #48]	; (800462c <__libc_init_array+0x38>)
 80045fa:	4c0d      	ldr	r4, [pc, #52]	; (8004630 <__libc_init_array+0x3c>)
 80045fc:	1b64      	subs	r4, r4, r5
 80045fe:	10a4      	asrs	r4, r4, #2
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	2600      	movs	r6, #0
 8004606:	f000 fff9 	bl	80055fc <_init>
 800460a:	4d0a      	ldr	r5, [pc, #40]	; (8004634 <__libc_init_array+0x40>)
 800460c:	4c0a      	ldr	r4, [pc, #40]	; (8004638 <__libc_init_array+0x44>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	00b3      	lsls	r3, r6, #2
 800461a:	58eb      	ldr	r3, [r5, r3]
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	00b3      	lsls	r3, r6, #2
 8004624:	58eb      	ldr	r3, [r5, r3]
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	08005830 	.word	0x08005830
 8004630:	08005830 	.word	0x08005830
 8004634:	08005830 	.word	0x08005830
 8004638:	08005834 	.word	0x08005834

0800463c <memset>:
 800463c:	0003      	movs	r3, r0
 800463e:	1882      	adds	r2, r0, r2
 8004640:	4293      	cmp	r3, r2
 8004642:	d100      	bne.n	8004646 <memset+0xa>
 8004644:	4770      	bx	lr
 8004646:	7019      	strb	r1, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	e7f9      	b.n	8004640 <memset+0x4>

0800464c <iprintf>:
 800464c:	b40f      	push	{r0, r1, r2, r3}
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <iprintf+0x30>)
 8004650:	b513      	push	{r0, r1, r4, lr}
 8004652:	681c      	ldr	r4, [r3, #0]
 8004654:	2c00      	cmp	r4, #0
 8004656:	d005      	beq.n	8004664 <iprintf+0x18>
 8004658:	69a3      	ldr	r3, [r4, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <iprintf+0x18>
 800465e:	0020      	movs	r0, r4
 8004660:	f000 f870 	bl	8004744 <__sinit>
 8004664:	ab05      	add	r3, sp, #20
 8004666:	0020      	movs	r0, r4
 8004668:	9a04      	ldr	r2, [sp, #16]
 800466a:	68a1      	ldr	r1, [r4, #8]
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	f000 f9cd 	bl	8004a0c <_vfiprintf_r>
 8004672:	bc16      	pop	{r1, r2, r4}
 8004674:	bc08      	pop	{r3}
 8004676:	b004      	add	sp, #16
 8004678:	4718      	bx	r3
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	2000000c 	.word	0x2000000c

08004680 <std>:
 8004680:	2300      	movs	r3, #0
 8004682:	b510      	push	{r4, lr}
 8004684:	0004      	movs	r4, r0
 8004686:	6003      	str	r3, [r0, #0]
 8004688:	6043      	str	r3, [r0, #4]
 800468a:	6083      	str	r3, [r0, #8]
 800468c:	8181      	strh	r1, [r0, #12]
 800468e:	6643      	str	r3, [r0, #100]	; 0x64
 8004690:	0019      	movs	r1, r3
 8004692:	81c2      	strh	r2, [r0, #14]
 8004694:	6103      	str	r3, [r0, #16]
 8004696:	6143      	str	r3, [r0, #20]
 8004698:	6183      	str	r3, [r0, #24]
 800469a:	2208      	movs	r2, #8
 800469c:	305c      	adds	r0, #92	; 0x5c
 800469e:	f7ff ffcd 	bl	800463c <memset>
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <std+0x38>)
 80046a4:	6224      	str	r4, [r4, #32]
 80046a6:	6263      	str	r3, [r4, #36]	; 0x24
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <std+0x3c>)
 80046aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <std+0x40>)
 80046ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <std+0x44>)
 80046b2:	6323      	str	r3, [r4, #48]	; 0x30
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	08004fa9 	.word	0x08004fa9
 80046bc:	08004fd1 	.word	0x08004fd1
 80046c0:	08005009 	.word	0x08005009
 80046c4:	08005035 	.word	0x08005035

080046c8 <_cleanup_r>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	4902      	ldr	r1, [pc, #8]	; (80046d4 <_cleanup_r+0xc>)
 80046cc:	f000 f8ba 	bl	8004844 <_fwalk_reent>
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	08005341 	.word	0x08005341

080046d8 <__sfmoreglue>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	2568      	movs	r5, #104	; 0x68
 80046dc:	1e4a      	subs	r2, r1, #1
 80046de:	4355      	muls	r5, r2
 80046e0:	000e      	movs	r6, r1
 80046e2:	0029      	movs	r1, r5
 80046e4:	3174      	adds	r1, #116	; 0x74
 80046e6:	f000 f8f3 	bl	80048d0 <_malloc_r>
 80046ea:	1e04      	subs	r4, r0, #0
 80046ec:	d008      	beq.n	8004700 <__sfmoreglue+0x28>
 80046ee:	2100      	movs	r1, #0
 80046f0:	002a      	movs	r2, r5
 80046f2:	6001      	str	r1, [r0, #0]
 80046f4:	6046      	str	r6, [r0, #4]
 80046f6:	300c      	adds	r0, #12
 80046f8:	60a0      	str	r0, [r4, #8]
 80046fa:	3268      	adds	r2, #104	; 0x68
 80046fc:	f7ff ff9e 	bl	800463c <memset>
 8004700:	0020      	movs	r0, r4
 8004702:	bd70      	pop	{r4, r5, r6, pc}

08004704 <__sfp_lock_acquire>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4802      	ldr	r0, [pc, #8]	; (8004710 <__sfp_lock_acquire+0xc>)
 8004708:	f000 f8bd 	bl	8004886 <__retarget_lock_acquire_recursive>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	2000043d 	.word	0x2000043d

08004714 <__sfp_lock_release>:
 8004714:	b510      	push	{r4, lr}
 8004716:	4802      	ldr	r0, [pc, #8]	; (8004720 <__sfp_lock_release+0xc>)
 8004718:	f000 f8b6 	bl	8004888 <__retarget_lock_release_recursive>
 800471c:	bd10      	pop	{r4, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	2000043d 	.word	0x2000043d

08004724 <__sinit_lock_acquire>:
 8004724:	b510      	push	{r4, lr}
 8004726:	4802      	ldr	r0, [pc, #8]	; (8004730 <__sinit_lock_acquire+0xc>)
 8004728:	f000 f8ad 	bl	8004886 <__retarget_lock_acquire_recursive>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	2000043e 	.word	0x2000043e

08004734 <__sinit_lock_release>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4802      	ldr	r0, [pc, #8]	; (8004740 <__sinit_lock_release+0xc>)
 8004738:	f000 f8a6 	bl	8004888 <__retarget_lock_release_recursive>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	2000043e 	.word	0x2000043e

08004744 <__sinit>:
 8004744:	b513      	push	{r0, r1, r4, lr}
 8004746:	0004      	movs	r4, r0
 8004748:	f7ff ffec 	bl	8004724 <__sinit_lock_acquire>
 800474c:	69a3      	ldr	r3, [r4, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <__sinit+0x14>
 8004752:	f7ff ffef 	bl	8004734 <__sinit_lock_release>
 8004756:	bd13      	pop	{r0, r1, r4, pc}
 8004758:	64a3      	str	r3, [r4, #72]	; 0x48
 800475a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800475c:	6523      	str	r3, [r4, #80]	; 0x50
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <__sinit+0x68>)
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <__sinit+0x6c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	62a2      	str	r2, [r4, #40]	; 0x28
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	42a3      	cmp	r3, r4
 800476a:	d101      	bne.n	8004770 <__sinit+0x2c>
 800476c:	2301      	movs	r3, #1
 800476e:	61a3      	str	r3, [r4, #24]
 8004770:	0020      	movs	r0, r4
 8004772:	f000 f81f 	bl	80047b4 <__sfp>
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	0020      	movs	r0, r4
 800477a:	f000 f81b 	bl	80047b4 <__sfp>
 800477e:	60a0      	str	r0, [r4, #8]
 8004780:	0020      	movs	r0, r4
 8004782:	f000 f817 	bl	80047b4 <__sfp>
 8004786:	2200      	movs	r2, #0
 8004788:	2104      	movs	r1, #4
 800478a:	60e0      	str	r0, [r4, #12]
 800478c:	6860      	ldr	r0, [r4, #4]
 800478e:	f7ff ff77 	bl	8004680 <std>
 8004792:	2201      	movs	r2, #1
 8004794:	2109      	movs	r1, #9
 8004796:	68a0      	ldr	r0, [r4, #8]
 8004798:	f7ff ff72 	bl	8004680 <std>
 800479c:	2202      	movs	r2, #2
 800479e:	2112      	movs	r1, #18
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	f7ff ff6d 	bl	8004680 <std>
 80047a6:	2301      	movs	r3, #1
 80047a8:	61a3      	str	r3, [r4, #24]
 80047aa:	e7d2      	b.n	8004752 <__sinit+0xe>
 80047ac:	08005798 	.word	0x08005798
 80047b0:	080046c9 	.word	0x080046c9

080047b4 <__sfp>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	0007      	movs	r7, r0
 80047b8:	f7ff ffa4 	bl	8004704 <__sfp_lock_acquire>
 80047bc:	4b1f      	ldr	r3, [pc, #124]	; (800483c <__sfp+0x88>)
 80047be:	681e      	ldr	r6, [r3, #0]
 80047c0:	69b3      	ldr	r3, [r6, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <__sfp+0x18>
 80047c6:	0030      	movs	r0, r6
 80047c8:	f7ff ffbc 	bl	8004744 <__sinit>
 80047cc:	3648      	adds	r6, #72	; 0x48
 80047ce:	68b4      	ldr	r4, [r6, #8]
 80047d0:	6873      	ldr	r3, [r6, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	d504      	bpl.n	80047e0 <__sfp+0x2c>
 80047d6:	6833      	ldr	r3, [r6, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d022      	beq.n	8004822 <__sfp+0x6e>
 80047dc:	6836      	ldr	r6, [r6, #0]
 80047de:	e7f6      	b.n	80047ce <__sfp+0x1a>
 80047e0:	220c      	movs	r2, #12
 80047e2:	5ea5      	ldrsh	r5, [r4, r2]
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	d11a      	bne.n	800481e <__sfp+0x6a>
 80047e8:	0020      	movs	r0, r4
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <__sfp+0x8c>)
 80047ec:	3058      	adds	r0, #88	; 0x58
 80047ee:	60e3      	str	r3, [r4, #12]
 80047f0:	6665      	str	r5, [r4, #100]	; 0x64
 80047f2:	f000 f847 	bl	8004884 <__retarget_lock_init_recursive>
 80047f6:	f7ff ff8d 	bl	8004714 <__sfp_lock_release>
 80047fa:	0020      	movs	r0, r4
 80047fc:	2208      	movs	r2, #8
 80047fe:	0029      	movs	r1, r5
 8004800:	6025      	str	r5, [r4, #0]
 8004802:	60a5      	str	r5, [r4, #8]
 8004804:	6065      	str	r5, [r4, #4]
 8004806:	6125      	str	r5, [r4, #16]
 8004808:	6165      	str	r5, [r4, #20]
 800480a:	61a5      	str	r5, [r4, #24]
 800480c:	305c      	adds	r0, #92	; 0x5c
 800480e:	f7ff ff15 	bl	800463c <memset>
 8004812:	6365      	str	r5, [r4, #52]	; 0x34
 8004814:	63a5      	str	r5, [r4, #56]	; 0x38
 8004816:	64a5      	str	r5, [r4, #72]	; 0x48
 8004818:	64e5      	str	r5, [r4, #76]	; 0x4c
 800481a:	0020      	movs	r0, r4
 800481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481e:	3468      	adds	r4, #104	; 0x68
 8004820:	e7d7      	b.n	80047d2 <__sfp+0x1e>
 8004822:	2104      	movs	r1, #4
 8004824:	0038      	movs	r0, r7
 8004826:	f7ff ff57 	bl	80046d8 <__sfmoreglue>
 800482a:	1e04      	subs	r4, r0, #0
 800482c:	6030      	str	r0, [r6, #0]
 800482e:	d1d5      	bne.n	80047dc <__sfp+0x28>
 8004830:	f7ff ff70 	bl	8004714 <__sfp_lock_release>
 8004834:	230c      	movs	r3, #12
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	e7ef      	b.n	800481a <__sfp+0x66>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	08005798 	.word	0x08005798
 8004840:	ffff0001 	.word	0xffff0001

08004844 <_fwalk_reent>:
 8004844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004846:	0004      	movs	r4, r0
 8004848:	0006      	movs	r6, r0
 800484a:	2700      	movs	r7, #0
 800484c:	9101      	str	r1, [sp, #4]
 800484e:	3448      	adds	r4, #72	; 0x48
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	68a5      	ldr	r5, [r4, #8]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	9b00      	ldr	r3, [sp, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	d504      	bpl.n	8004868 <_fwalk_reent+0x24>
 800485e:	6824      	ldr	r4, [r4, #0]
 8004860:	2c00      	cmp	r4, #0
 8004862:	d1f5      	bne.n	8004850 <_fwalk_reent+0xc>
 8004864:	0038      	movs	r0, r7
 8004866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004868:	89ab      	ldrh	r3, [r5, #12]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d908      	bls.n	8004880 <_fwalk_reent+0x3c>
 800486e:	220e      	movs	r2, #14
 8004870:	5eab      	ldrsh	r3, [r5, r2]
 8004872:	3301      	adds	r3, #1
 8004874:	d004      	beq.n	8004880 <_fwalk_reent+0x3c>
 8004876:	0029      	movs	r1, r5
 8004878:	0030      	movs	r0, r6
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	4798      	blx	r3
 800487e:	4307      	orrs	r7, r0
 8004880:	3568      	adds	r5, #104	; 0x68
 8004882:	e7e8      	b.n	8004856 <_fwalk_reent+0x12>

08004884 <__retarget_lock_init_recursive>:
 8004884:	4770      	bx	lr

08004886 <__retarget_lock_acquire_recursive>:
 8004886:	4770      	bx	lr

08004888 <__retarget_lock_release_recursive>:
 8004888:	4770      	bx	lr
	...

0800488c <sbrk_aligned>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	4e0f      	ldr	r6, [pc, #60]	; (80048cc <sbrk_aligned+0x40>)
 8004890:	000d      	movs	r5, r1
 8004892:	6831      	ldr	r1, [r6, #0]
 8004894:	0004      	movs	r4, r0
 8004896:	2900      	cmp	r1, #0
 8004898:	d102      	bne.n	80048a0 <sbrk_aligned+0x14>
 800489a:	f000 fb73 	bl	8004f84 <_sbrk_r>
 800489e:	6030      	str	r0, [r6, #0]
 80048a0:	0029      	movs	r1, r5
 80048a2:	0020      	movs	r0, r4
 80048a4:	f000 fb6e 	bl	8004f84 <_sbrk_r>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d00a      	beq.n	80048c2 <sbrk_aligned+0x36>
 80048ac:	2303      	movs	r3, #3
 80048ae:	1cc5      	adds	r5, r0, #3
 80048b0:	439d      	bics	r5, r3
 80048b2:	42a8      	cmp	r0, r5
 80048b4:	d007      	beq.n	80048c6 <sbrk_aligned+0x3a>
 80048b6:	1a29      	subs	r1, r5, r0
 80048b8:	0020      	movs	r0, r4
 80048ba:	f000 fb63 	bl	8004f84 <_sbrk_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d101      	bne.n	80048c6 <sbrk_aligned+0x3a>
 80048c2:	2501      	movs	r5, #1
 80048c4:	426d      	negs	r5, r5
 80048c6:	0028      	movs	r0, r5
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	20000444 	.word	0x20000444

080048d0 <_malloc_r>:
 80048d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048d2:	2203      	movs	r2, #3
 80048d4:	1ccb      	adds	r3, r1, #3
 80048d6:	4393      	bics	r3, r2
 80048d8:	3308      	adds	r3, #8
 80048da:	0006      	movs	r6, r0
 80048dc:	001f      	movs	r7, r3
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d232      	bcs.n	8004948 <_malloc_r+0x78>
 80048e2:	270c      	movs	r7, #12
 80048e4:	42b9      	cmp	r1, r7
 80048e6:	d831      	bhi.n	800494c <_malloc_r+0x7c>
 80048e8:	0030      	movs	r0, r6
 80048ea:	f000 fdf5 	bl	80054d8 <__malloc_lock>
 80048ee:	4d32      	ldr	r5, [pc, #200]	; (80049b8 <_malloc_r+0xe8>)
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	001c      	movs	r4, r3
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d12e      	bne.n	8004956 <_malloc_r+0x86>
 80048f8:	0039      	movs	r1, r7
 80048fa:	0030      	movs	r0, r6
 80048fc:	f7ff ffc6 	bl	800488c <sbrk_aligned>
 8004900:	0004      	movs	r4, r0
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d11e      	bne.n	8004944 <_malloc_r+0x74>
 8004906:	682c      	ldr	r4, [r5, #0]
 8004908:	0025      	movs	r5, r4
 800490a:	2d00      	cmp	r5, #0
 800490c:	d14a      	bne.n	80049a4 <_malloc_r+0xd4>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	0029      	movs	r1, r5
 8004912:	18e3      	adds	r3, r4, r3
 8004914:	0030      	movs	r0, r6
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	f000 fb34 	bl	8004f84 <_sbrk_r>
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	4283      	cmp	r3, r0
 8004920:	d143      	bne.n	80049aa <_malloc_r+0xda>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	3703      	adds	r7, #3
 8004926:	1aff      	subs	r7, r7, r3
 8004928:	2303      	movs	r3, #3
 800492a:	439f      	bics	r7, r3
 800492c:	3708      	adds	r7, #8
 800492e:	2f0c      	cmp	r7, #12
 8004930:	d200      	bcs.n	8004934 <_malloc_r+0x64>
 8004932:	270c      	movs	r7, #12
 8004934:	0039      	movs	r1, r7
 8004936:	0030      	movs	r0, r6
 8004938:	f7ff ffa8 	bl	800488c <sbrk_aligned>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d034      	beq.n	80049aa <_malloc_r+0xda>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	19df      	adds	r7, r3, r7
 8004944:	6027      	str	r7, [r4, #0]
 8004946:	e013      	b.n	8004970 <_malloc_r+0xa0>
 8004948:	2b00      	cmp	r3, #0
 800494a:	dacb      	bge.n	80048e4 <_malloc_r+0x14>
 800494c:	230c      	movs	r3, #12
 800494e:	2500      	movs	r5, #0
 8004950:	6033      	str	r3, [r6, #0]
 8004952:	0028      	movs	r0, r5
 8004954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	1bd1      	subs	r1, r2, r7
 800495a:	d420      	bmi.n	800499e <_malloc_r+0xce>
 800495c:	290b      	cmp	r1, #11
 800495e:	d917      	bls.n	8004990 <_malloc_r+0xc0>
 8004960:	19e2      	adds	r2, r4, r7
 8004962:	6027      	str	r7, [r4, #0]
 8004964:	42a3      	cmp	r3, r4
 8004966:	d111      	bne.n	800498c <_malloc_r+0xbc>
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	6863      	ldr	r3, [r4, #4]
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	6053      	str	r3, [r2, #4]
 8004970:	0030      	movs	r0, r6
 8004972:	0025      	movs	r5, r4
 8004974:	f000 fdb8 	bl	80054e8 <__malloc_unlock>
 8004978:	2207      	movs	r2, #7
 800497a:	350b      	adds	r5, #11
 800497c:	1d23      	adds	r3, r4, #4
 800497e:	4395      	bics	r5, r2
 8004980:	1aea      	subs	r2, r5, r3
 8004982:	429d      	cmp	r5, r3
 8004984:	d0e5      	beq.n	8004952 <_malloc_r+0x82>
 8004986:	1b5b      	subs	r3, r3, r5
 8004988:	50a3      	str	r3, [r4, r2]
 800498a:	e7e2      	b.n	8004952 <_malloc_r+0x82>
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	e7ec      	b.n	800496a <_malloc_r+0x9a>
 8004990:	6862      	ldr	r2, [r4, #4]
 8004992:	42a3      	cmp	r3, r4
 8004994:	d101      	bne.n	800499a <_malloc_r+0xca>
 8004996:	602a      	str	r2, [r5, #0]
 8004998:	e7ea      	b.n	8004970 <_malloc_r+0xa0>
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	e7e8      	b.n	8004970 <_malloc_r+0xa0>
 800499e:	0023      	movs	r3, r4
 80049a0:	6864      	ldr	r4, [r4, #4]
 80049a2:	e7a7      	b.n	80048f4 <_malloc_r+0x24>
 80049a4:	002c      	movs	r4, r5
 80049a6:	686d      	ldr	r5, [r5, #4]
 80049a8:	e7af      	b.n	800490a <_malloc_r+0x3a>
 80049aa:	230c      	movs	r3, #12
 80049ac:	0030      	movs	r0, r6
 80049ae:	6033      	str	r3, [r6, #0]
 80049b0:	f000 fd9a 	bl	80054e8 <__malloc_unlock>
 80049b4:	e7cd      	b.n	8004952 <_malloc_r+0x82>
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000440 	.word	0x20000440

080049bc <__sfputc_r>:
 80049bc:	6893      	ldr	r3, [r2, #8]
 80049be:	b510      	push	{r4, lr}
 80049c0:	3b01      	subs	r3, #1
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	da04      	bge.n	80049d2 <__sfputc_r+0x16>
 80049c8:	6994      	ldr	r4, [r2, #24]
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	db07      	blt.n	80049de <__sfputc_r+0x22>
 80049ce:	290a      	cmp	r1, #10
 80049d0:	d005      	beq.n	80049de <__sfputc_r+0x22>
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	1c58      	adds	r0, r3, #1
 80049d6:	6010      	str	r0, [r2, #0]
 80049d8:	7019      	strb	r1, [r3, #0]
 80049da:	0008      	movs	r0, r1
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	f000 fb2f 	bl	8005040 <__swbuf_r>
 80049e2:	0001      	movs	r1, r0
 80049e4:	e7f9      	b.n	80049da <__sfputc_r+0x1e>

080049e6 <__sfputs_r>:
 80049e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e8:	0006      	movs	r6, r0
 80049ea:	000f      	movs	r7, r1
 80049ec:	0014      	movs	r4, r2
 80049ee:	18d5      	adds	r5, r2, r3
 80049f0:	42ac      	cmp	r4, r5
 80049f2:	d101      	bne.n	80049f8 <__sfputs_r+0x12>
 80049f4:	2000      	movs	r0, #0
 80049f6:	e007      	b.n	8004a08 <__sfputs_r+0x22>
 80049f8:	7821      	ldrb	r1, [r4, #0]
 80049fa:	003a      	movs	r2, r7
 80049fc:	0030      	movs	r0, r6
 80049fe:	f7ff ffdd 	bl	80049bc <__sfputc_r>
 8004a02:	3401      	adds	r4, #1
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d1f3      	bne.n	80049f0 <__sfputs_r+0xa>
 8004a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a0c <_vfiprintf_r>:
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	b0a1      	sub	sp, #132	; 0x84
 8004a10:	0006      	movs	r6, r0
 8004a12:	000c      	movs	r4, r1
 8004a14:	001f      	movs	r7, r3
 8004a16:	9203      	str	r2, [sp, #12]
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d004      	beq.n	8004a26 <_vfiprintf_r+0x1a>
 8004a1c:	6983      	ldr	r3, [r0, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <_vfiprintf_r+0x1a>
 8004a22:	f7ff fe8f 	bl	8004744 <__sinit>
 8004a26:	4b8e      	ldr	r3, [pc, #568]	; (8004c60 <_vfiprintf_r+0x254>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	d11c      	bne.n	8004a66 <_vfiprintf_r+0x5a>
 8004a2c:	6874      	ldr	r4, [r6, #4]
 8004a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a30:	07db      	lsls	r3, r3, #31
 8004a32:	d405      	bmi.n	8004a40 <_vfiprintf_r+0x34>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	059b      	lsls	r3, r3, #22
 8004a38:	d402      	bmi.n	8004a40 <_vfiprintf_r+0x34>
 8004a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3c:	f7ff ff23 	bl	8004886 <__retarget_lock_acquire_recursive>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	071b      	lsls	r3, r3, #28
 8004a44:	d502      	bpl.n	8004a4c <_vfiprintf_r+0x40>
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11d      	bne.n	8004a88 <_vfiprintf_r+0x7c>
 8004a4c:	0021      	movs	r1, r4
 8004a4e:	0030      	movs	r0, r6
 8004a50:	f000 fb60 	bl	8005114 <__swsetup_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d017      	beq.n	8004a88 <_vfiprintf_r+0x7c>
 8004a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a5a:	07db      	lsls	r3, r3, #31
 8004a5c:	d50d      	bpl.n	8004a7a <_vfiprintf_r+0x6e>
 8004a5e:	2001      	movs	r0, #1
 8004a60:	4240      	negs	r0, r0
 8004a62:	b021      	add	sp, #132	; 0x84
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	4b7f      	ldr	r3, [pc, #508]	; (8004c64 <_vfiprintf_r+0x258>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d101      	bne.n	8004a70 <_vfiprintf_r+0x64>
 8004a6c:	68b4      	ldr	r4, [r6, #8]
 8004a6e:	e7de      	b.n	8004a2e <_vfiprintf_r+0x22>
 8004a70:	4b7d      	ldr	r3, [pc, #500]	; (8004c68 <_vfiprintf_r+0x25c>)
 8004a72:	429c      	cmp	r4, r3
 8004a74:	d1db      	bne.n	8004a2e <_vfiprintf_r+0x22>
 8004a76:	68f4      	ldr	r4, [r6, #12]
 8004a78:	e7d9      	b.n	8004a2e <_vfiprintf_r+0x22>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	d4ee      	bmi.n	8004a5e <_vfiprintf_r+0x52>
 8004a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a82:	f7ff ff01 	bl	8004888 <__retarget_lock_release_recursive>
 8004a86:	e7ea      	b.n	8004a5e <_vfiprintf_r+0x52>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	ad08      	add	r5, sp, #32
 8004a8c:	616b      	str	r3, [r5, #20]
 8004a8e:	3320      	adds	r3, #32
 8004a90:	766b      	strb	r3, [r5, #25]
 8004a92:	3310      	adds	r3, #16
 8004a94:	76ab      	strb	r3, [r5, #26]
 8004a96:	9707      	str	r7, [sp, #28]
 8004a98:	9f03      	ldr	r7, [sp, #12]
 8004a9a:	783b      	ldrb	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <_vfiprintf_r+0x98>
 8004aa0:	2b25      	cmp	r3, #37	; 0x25
 8004aa2:	d14e      	bne.n	8004b42 <_vfiprintf_r+0x136>
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	1afb      	subs	r3, r7, r3
 8004aa8:	9305      	str	r3, [sp, #20]
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	429f      	cmp	r7, r3
 8004aae:	d00d      	beq.n	8004acc <_vfiprintf_r+0xc0>
 8004ab0:	9b05      	ldr	r3, [sp, #20]
 8004ab2:	0021      	movs	r1, r4
 8004ab4:	0030      	movs	r0, r6
 8004ab6:	9a03      	ldr	r2, [sp, #12]
 8004ab8:	f7ff ff95 	bl	80049e6 <__sfputs_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d100      	bne.n	8004ac2 <_vfiprintf_r+0xb6>
 8004ac0:	e0b5      	b.n	8004c2e <_vfiprintf_r+0x222>
 8004ac2:	696a      	ldr	r2, [r5, #20]
 8004ac4:	9b05      	ldr	r3, [sp, #20]
 8004ac6:	4694      	mov	ip, r2
 8004ac8:	4463      	add	r3, ip
 8004aca:	616b      	str	r3, [r5, #20]
 8004acc:	783b      	ldrb	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d100      	bne.n	8004ad4 <_vfiprintf_r+0xc8>
 8004ad2:	e0ac      	b.n	8004c2e <_vfiprintf_r+0x222>
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	1c7b      	adds	r3, r7, #1
 8004ad8:	9303      	str	r3, [sp, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	4252      	negs	r2, r2
 8004ade:	606a      	str	r2, [r5, #4]
 8004ae0:	a904      	add	r1, sp, #16
 8004ae2:	3254      	adds	r2, #84	; 0x54
 8004ae4:	1852      	adds	r2, r2, r1
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	60eb      	str	r3, [r5, #12]
 8004aea:	60ab      	str	r3, [r5, #8]
 8004aec:	7013      	strb	r3, [r2, #0]
 8004aee:	65ab      	str	r3, [r5, #88]	; 0x58
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	2205      	movs	r2, #5
 8004af4:	7819      	ldrb	r1, [r3, #0]
 8004af6:	485d      	ldr	r0, [pc, #372]	; (8004c6c <_vfiprintf_r+0x260>)
 8004af8:	f000 fce2 	bl	80054c0 <memchr>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	1c5f      	adds	r7, r3, #1
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d120      	bne.n	8004b46 <_vfiprintf_r+0x13a>
 8004b04:	682a      	ldr	r2, [r5, #0]
 8004b06:	06d3      	lsls	r3, r2, #27
 8004b08:	d504      	bpl.n	8004b14 <_vfiprintf_r+0x108>
 8004b0a:	2353      	movs	r3, #83	; 0x53
 8004b0c:	a904      	add	r1, sp, #16
 8004b0e:	185b      	adds	r3, r3, r1
 8004b10:	2120      	movs	r1, #32
 8004b12:	7019      	strb	r1, [r3, #0]
 8004b14:	0713      	lsls	r3, r2, #28
 8004b16:	d504      	bpl.n	8004b22 <_vfiprintf_r+0x116>
 8004b18:	2353      	movs	r3, #83	; 0x53
 8004b1a:	a904      	add	r1, sp, #16
 8004b1c:	185b      	adds	r3, r3, r1
 8004b1e:	212b      	movs	r1, #43	; 0x2b
 8004b20:	7019      	strb	r1, [r3, #0]
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b2a      	cmp	r3, #42	; 0x2a
 8004b28:	d016      	beq.n	8004b58 <_vfiprintf_r+0x14c>
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	68eb      	ldr	r3, [r5, #12]
 8004b2e:	9f03      	ldr	r7, [sp, #12]
 8004b30:	783a      	ldrb	r2, [r7, #0]
 8004b32:	1c78      	adds	r0, r7, #1
 8004b34:	3a30      	subs	r2, #48	; 0x30
 8004b36:	4684      	mov	ip, r0
 8004b38:	2a09      	cmp	r2, #9
 8004b3a:	d94f      	bls.n	8004bdc <_vfiprintf_r+0x1d0>
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d111      	bne.n	8004b64 <_vfiprintf_r+0x158>
 8004b40:	e017      	b.n	8004b72 <_vfiprintf_r+0x166>
 8004b42:	3701      	adds	r7, #1
 8004b44:	e7a9      	b.n	8004a9a <_vfiprintf_r+0x8e>
 8004b46:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <_vfiprintf_r+0x260>)
 8004b48:	682a      	ldr	r2, [r5, #0]
 8004b4a:	1ac0      	subs	r0, r0, r3
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4083      	lsls	r3, r0
 8004b50:	4313      	orrs	r3, r2
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	9703      	str	r7, [sp, #12]
 8004b56:	e7cb      	b.n	8004af0 <_vfiprintf_r+0xe4>
 8004b58:	9b07      	ldr	r3, [sp, #28]
 8004b5a:	1d19      	adds	r1, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	9107      	str	r1, [sp, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	db01      	blt.n	8004b68 <_vfiprintf_r+0x15c>
 8004b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b66:	e004      	b.n	8004b72 <_vfiprintf_r+0x166>
 8004b68:	425b      	negs	r3, r3
 8004b6a:	60eb      	str	r3, [r5, #12]
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	783b      	ldrb	r3, [r7, #0]
 8004b74:	2b2e      	cmp	r3, #46	; 0x2e
 8004b76:	d10a      	bne.n	8004b8e <_vfiprintf_r+0x182>
 8004b78:	787b      	ldrb	r3, [r7, #1]
 8004b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7c:	d137      	bne.n	8004bee <_vfiprintf_r+0x1e2>
 8004b7e:	9b07      	ldr	r3, [sp, #28]
 8004b80:	3702      	adds	r7, #2
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	9207      	str	r2, [sp, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db2d      	blt.n	8004be8 <_vfiprintf_r+0x1dc>
 8004b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8e:	2203      	movs	r2, #3
 8004b90:	7839      	ldrb	r1, [r7, #0]
 8004b92:	4837      	ldr	r0, [pc, #220]	; (8004c70 <_vfiprintf_r+0x264>)
 8004b94:	f000 fc94 	bl	80054c0 <memchr>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d007      	beq.n	8004bac <_vfiprintf_r+0x1a0>
 8004b9c:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <_vfiprintf_r+0x264>)
 8004b9e:	682a      	ldr	r2, [r5, #0]
 8004ba0:	1ac0      	subs	r0, r0, r3
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	4083      	lsls	r3, r0
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	3701      	adds	r7, #1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	7839      	ldrb	r1, [r7, #0]
 8004bae:	1c7b      	adds	r3, r7, #1
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	4830      	ldr	r0, [pc, #192]	; (8004c74 <_vfiprintf_r+0x268>)
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	7629      	strb	r1, [r5, #24]
 8004bb8:	f000 fc82 	bl	80054c0 <memchr>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d045      	beq.n	8004c4c <_vfiprintf_r+0x240>
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <_vfiprintf_r+0x26c>)
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d127      	bne.n	8004c16 <_vfiprintf_r+0x20a>
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	9b07      	ldr	r3, [sp, #28]
 8004bca:	3307      	adds	r3, #7
 8004bcc:	4393      	bics	r3, r2
 8004bce:	3308      	adds	r3, #8
 8004bd0:	9307      	str	r3, [sp, #28]
 8004bd2:	696b      	ldr	r3, [r5, #20]
 8004bd4:	9a04      	ldr	r2, [sp, #16]
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	616b      	str	r3, [r5, #20]
 8004bda:	e75d      	b.n	8004a98 <_vfiprintf_r+0x8c>
 8004bdc:	210a      	movs	r1, #10
 8004bde:	434b      	muls	r3, r1
 8004be0:	4667      	mov	r7, ip
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	3909      	subs	r1, #9
 8004be6:	e7a3      	b.n	8004b30 <_vfiprintf_r+0x124>
 8004be8:	2301      	movs	r3, #1
 8004bea:	425b      	negs	r3, r3
 8004bec:	e7ce      	b.n	8004b8c <_vfiprintf_r+0x180>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	3701      	adds	r7, #1
 8004bf4:	606b      	str	r3, [r5, #4]
 8004bf6:	7839      	ldrb	r1, [r7, #0]
 8004bf8:	1c78      	adds	r0, r7, #1
 8004bfa:	3930      	subs	r1, #48	; 0x30
 8004bfc:	4684      	mov	ip, r0
 8004bfe:	2909      	cmp	r1, #9
 8004c00:	d903      	bls.n	8004c0a <_vfiprintf_r+0x1fe>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0c3      	beq.n	8004b8e <_vfiprintf_r+0x182>
 8004c06:	9209      	str	r2, [sp, #36]	; 0x24
 8004c08:	e7c1      	b.n	8004b8e <_vfiprintf_r+0x182>
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	435a      	muls	r2, r3
 8004c0e:	4667      	mov	r7, ip
 8004c10:	1852      	adds	r2, r2, r1
 8004c12:	3b09      	subs	r3, #9
 8004c14:	e7ef      	b.n	8004bf6 <_vfiprintf_r+0x1ea>
 8004c16:	ab07      	add	r3, sp, #28
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	0022      	movs	r2, r4
 8004c1c:	0029      	movs	r1, r5
 8004c1e:	0030      	movs	r0, r6
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <_vfiprintf_r+0x270>)
 8004c22:	e000      	b.n	8004c26 <_vfiprintf_r+0x21a>
 8004c24:	bf00      	nop
 8004c26:	9004      	str	r0, [sp, #16]
 8004c28:	9b04      	ldr	r3, [sp, #16]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d1d1      	bne.n	8004bd2 <_vfiprintf_r+0x1c6>
 8004c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c30:	07db      	lsls	r3, r3, #31
 8004c32:	d405      	bmi.n	8004c40 <_vfiprintf_r+0x234>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	059b      	lsls	r3, r3, #22
 8004c38:	d402      	bmi.n	8004c40 <_vfiprintf_r+0x234>
 8004c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3c:	f7ff fe24 	bl	8004888 <__retarget_lock_release_recursive>
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	065b      	lsls	r3, r3, #25
 8004c44:	d500      	bpl.n	8004c48 <_vfiprintf_r+0x23c>
 8004c46:	e70a      	b.n	8004a5e <_vfiprintf_r+0x52>
 8004c48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c4a:	e70a      	b.n	8004a62 <_vfiprintf_r+0x56>
 8004c4c:	ab07      	add	r3, sp, #28
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	0022      	movs	r2, r4
 8004c52:	0029      	movs	r1, r5
 8004c54:	0030      	movs	r0, r6
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <_vfiprintf_r+0x270>)
 8004c58:	f000 f882 	bl	8004d60 <_printf_i>
 8004c5c:	e7e3      	b.n	8004c26 <_vfiprintf_r+0x21a>
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	080057bc 	.word	0x080057bc
 8004c64:	080057dc 	.word	0x080057dc
 8004c68:	0800579c 	.word	0x0800579c
 8004c6c:	080057fc 	.word	0x080057fc
 8004c70:	08005802 	.word	0x08005802
 8004c74:	08005806 	.word	0x08005806
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	080049e7 	.word	0x080049e7

08004c80 <_printf_common>:
 8004c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c82:	0015      	movs	r5, r2
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	688a      	ldr	r2, [r1, #8]
 8004c88:	690b      	ldr	r3, [r1, #16]
 8004c8a:	000c      	movs	r4, r1
 8004c8c:	9000      	str	r0, [sp, #0]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	da00      	bge.n	8004c94 <_printf_common+0x14>
 8004c92:	0013      	movs	r3, r2
 8004c94:	0022      	movs	r2, r4
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	3243      	adds	r2, #67	; 0x43
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d001      	beq.n	8004ca4 <_printf_common+0x24>
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	069b      	lsls	r3, r3, #26
 8004ca8:	d502      	bpl.n	8004cb0 <_printf_common+0x30>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	3302      	adds	r3, #2
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	0017      	movs	r7, r2
 8004cb6:	401f      	ands	r7, r3
 8004cb8:	421a      	tst	r2, r3
 8004cba:	d027      	beq.n	8004d0c <_printf_common+0x8c>
 8004cbc:	0023      	movs	r3, r4
 8004cbe:	3343      	adds	r3, #67	; 0x43
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	4193      	sbcs	r3, r2
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	0692      	lsls	r2, r2, #26
 8004cca:	d430      	bmi.n	8004d2e <_printf_common+0xae>
 8004ccc:	0022      	movs	r2, r4
 8004cce:	9901      	ldr	r1, [sp, #4]
 8004cd0:	9800      	ldr	r0, [sp, #0]
 8004cd2:	9e08      	ldr	r6, [sp, #32]
 8004cd4:	3243      	adds	r2, #67	; 0x43
 8004cd6:	47b0      	blx	r6
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d025      	beq.n	8004d28 <_printf_common+0xa8>
 8004cdc:	2306      	movs	r3, #6
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	682a      	ldr	r2, [r5, #0]
 8004ce2:	68e1      	ldr	r1, [r4, #12]
 8004ce4:	2500      	movs	r5, #0
 8004ce6:	4003      	ands	r3, r0
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d103      	bne.n	8004cf4 <_printf_common+0x74>
 8004cec:	1a8d      	subs	r5, r1, r2
 8004cee:	43eb      	mvns	r3, r5
 8004cf0:	17db      	asrs	r3, r3, #31
 8004cf2:	401d      	ands	r5, r3
 8004cf4:	68a3      	ldr	r3, [r4, #8]
 8004cf6:	6922      	ldr	r2, [r4, #16]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	dd01      	ble.n	8004d00 <_printf_common+0x80>
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	18ed      	adds	r5, r5, r3
 8004d00:	2700      	movs	r7, #0
 8004d02:	42bd      	cmp	r5, r7
 8004d04:	d120      	bne.n	8004d48 <_printf_common+0xc8>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e010      	b.n	8004d2c <_printf_common+0xac>
 8004d0a:	3701      	adds	r7, #1
 8004d0c:	68e3      	ldr	r3, [r4, #12]
 8004d0e:	682a      	ldr	r2, [r5, #0]
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	42bb      	cmp	r3, r7
 8004d14:	ddd2      	ble.n	8004cbc <_printf_common+0x3c>
 8004d16:	0022      	movs	r2, r4
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9901      	ldr	r1, [sp, #4]
 8004d1c:	9800      	ldr	r0, [sp, #0]
 8004d1e:	9e08      	ldr	r6, [sp, #32]
 8004d20:	3219      	adds	r2, #25
 8004d22:	47b0      	blx	r6
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d1f0      	bne.n	8004d0a <_printf_common+0x8a>
 8004d28:	2001      	movs	r0, #1
 8004d2a:	4240      	negs	r0, r0
 8004d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d2e:	2030      	movs	r0, #48	; 0x30
 8004d30:	18e1      	adds	r1, r4, r3
 8004d32:	3143      	adds	r1, #67	; 0x43
 8004d34:	7008      	strb	r0, [r1, #0]
 8004d36:	0021      	movs	r1, r4
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	3145      	adds	r1, #69	; 0x45
 8004d3c:	7809      	ldrb	r1, [r1, #0]
 8004d3e:	18a2      	adds	r2, r4, r2
 8004d40:	3243      	adds	r2, #67	; 0x43
 8004d42:	3302      	adds	r3, #2
 8004d44:	7011      	strb	r1, [r2, #0]
 8004d46:	e7c1      	b.n	8004ccc <_printf_common+0x4c>
 8004d48:	0022      	movs	r2, r4
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	9901      	ldr	r1, [sp, #4]
 8004d4e:	9800      	ldr	r0, [sp, #0]
 8004d50:	9e08      	ldr	r6, [sp, #32]
 8004d52:	321a      	adds	r2, #26
 8004d54:	47b0      	blx	r6
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xa8>
 8004d5a:	3701      	adds	r7, #1
 8004d5c:	e7d1      	b.n	8004d02 <_printf_common+0x82>
	...

08004d60 <_printf_i>:
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b08b      	sub	sp, #44	; 0x2c
 8004d64:	9206      	str	r2, [sp, #24]
 8004d66:	000a      	movs	r2, r1
 8004d68:	3243      	adds	r2, #67	; 0x43
 8004d6a:	9307      	str	r3, [sp, #28]
 8004d6c:	9005      	str	r0, [sp, #20]
 8004d6e:	9204      	str	r2, [sp, #16]
 8004d70:	7e0a      	ldrb	r2, [r1, #24]
 8004d72:	000c      	movs	r4, r1
 8004d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d76:	2a78      	cmp	r2, #120	; 0x78
 8004d78:	d807      	bhi.n	8004d8a <_printf_i+0x2a>
 8004d7a:	2a62      	cmp	r2, #98	; 0x62
 8004d7c:	d809      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	d100      	bne.n	8004d84 <_printf_i+0x24>
 8004d82:	e0c1      	b.n	8004f08 <_printf_i+0x1a8>
 8004d84:	2a58      	cmp	r2, #88	; 0x58
 8004d86:	d100      	bne.n	8004d8a <_printf_i+0x2a>
 8004d88:	e08c      	b.n	8004ea4 <_printf_i+0x144>
 8004d8a:	0026      	movs	r6, r4
 8004d8c:	3642      	adds	r6, #66	; 0x42
 8004d8e:	7032      	strb	r2, [r6, #0]
 8004d90:	e022      	b.n	8004dd8 <_printf_i+0x78>
 8004d92:	0010      	movs	r0, r2
 8004d94:	3863      	subs	r0, #99	; 0x63
 8004d96:	2815      	cmp	r0, #21
 8004d98:	d8f7      	bhi.n	8004d8a <_printf_i+0x2a>
 8004d9a:	f7fb f9bb 	bl	8000114 <__gnu_thumb1_case_shi>
 8004d9e:	0016      	.short	0x0016
 8004da0:	fff6001f 	.word	0xfff6001f
 8004da4:	fff6fff6 	.word	0xfff6fff6
 8004da8:	001ffff6 	.word	0x001ffff6
 8004dac:	fff6fff6 	.word	0xfff6fff6
 8004db0:	fff6fff6 	.word	0xfff6fff6
 8004db4:	003600a8 	.word	0x003600a8
 8004db8:	fff6009a 	.word	0xfff6009a
 8004dbc:	00b9fff6 	.word	0x00b9fff6
 8004dc0:	0036fff6 	.word	0x0036fff6
 8004dc4:	fff6fff6 	.word	0xfff6fff6
 8004dc8:	009e      	.short	0x009e
 8004dca:	0026      	movs	r6, r4
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	3642      	adds	r6, #66	; 0x42
 8004dd0:	1d11      	adds	r1, r2, #4
 8004dd2:	6019      	str	r1, [r3, #0]
 8004dd4:	6813      	ldr	r3, [r2, #0]
 8004dd6:	7033      	strb	r3, [r6, #0]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0a7      	b.n	8004f2c <_printf_i+0x1cc>
 8004ddc:	6808      	ldr	r0, [r1, #0]
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	1d0a      	adds	r2, r1, #4
 8004de2:	0605      	lsls	r5, r0, #24
 8004de4:	d50b      	bpl.n	8004dfe <_printf_i+0x9e>
 8004de6:	680d      	ldr	r5, [r1, #0]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	da03      	bge.n	8004df6 <_printf_i+0x96>
 8004dee:	232d      	movs	r3, #45	; 0x2d
 8004df0:	9a04      	ldr	r2, [sp, #16]
 8004df2:	426d      	negs	r5, r5
 8004df4:	7013      	strb	r3, [r2, #0]
 8004df6:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <_printf_i+0x21c>)
 8004df8:	270a      	movs	r7, #10
 8004dfa:	9303      	str	r3, [sp, #12]
 8004dfc:	e01b      	b.n	8004e36 <_printf_i+0xd6>
 8004dfe:	680d      	ldr	r5, [r1, #0]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	0641      	lsls	r1, r0, #25
 8004e04:	d5f1      	bpl.n	8004dea <_printf_i+0x8a>
 8004e06:	b22d      	sxth	r5, r5
 8004e08:	e7ef      	b.n	8004dea <_printf_i+0x8a>
 8004e0a:	680d      	ldr	r5, [r1, #0]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	1d08      	adds	r0, r1, #4
 8004e10:	6018      	str	r0, [r3, #0]
 8004e12:	062e      	lsls	r6, r5, #24
 8004e14:	d501      	bpl.n	8004e1a <_printf_i+0xba>
 8004e16:	680d      	ldr	r5, [r1, #0]
 8004e18:	e003      	b.n	8004e22 <_printf_i+0xc2>
 8004e1a:	066d      	lsls	r5, r5, #25
 8004e1c:	d5fb      	bpl.n	8004e16 <_printf_i+0xb6>
 8004e1e:	680d      	ldr	r5, [r1, #0]
 8004e20:	b2ad      	uxth	r5, r5
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <_printf_i+0x21c>)
 8004e24:	2708      	movs	r7, #8
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	2a6f      	cmp	r2, #111	; 0x6f
 8004e2a:	d000      	beq.n	8004e2e <_printf_i+0xce>
 8004e2c:	3702      	adds	r7, #2
 8004e2e:	0023      	movs	r3, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	3343      	adds	r3, #67	; 0x43
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	db03      	blt.n	8004e46 <_printf_i+0xe6>
 8004e3e:	2204      	movs	r2, #4
 8004e40:	6821      	ldr	r1, [r4, #0]
 8004e42:	4391      	bics	r1, r2
 8004e44:	6021      	str	r1, [r4, #0]
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	d102      	bne.n	8004e50 <_printf_i+0xf0>
 8004e4a:	9e04      	ldr	r6, [sp, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <_printf_i+0x10a>
 8004e50:	9e04      	ldr	r6, [sp, #16]
 8004e52:	0028      	movs	r0, r5
 8004e54:	0039      	movs	r1, r7
 8004e56:	f7fb f9ed 	bl	8000234 <__aeabi_uidivmod>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	3e01      	subs	r6, #1
 8004e5e:	5c5b      	ldrb	r3, [r3, r1]
 8004e60:	7033      	strb	r3, [r6, #0]
 8004e62:	002b      	movs	r3, r5
 8004e64:	0005      	movs	r5, r0
 8004e66:	429f      	cmp	r7, r3
 8004e68:	d9f3      	bls.n	8004e52 <_printf_i+0xf2>
 8004e6a:	2f08      	cmp	r7, #8
 8004e6c:	d109      	bne.n	8004e82 <_printf_i+0x122>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	07db      	lsls	r3, r3, #31
 8004e72:	d506      	bpl.n	8004e82 <_printf_i+0x122>
 8004e74:	6863      	ldr	r3, [r4, #4]
 8004e76:	6922      	ldr	r2, [r4, #16]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	dc02      	bgt.n	8004e82 <_printf_i+0x122>
 8004e7c:	2330      	movs	r3, #48	; 0x30
 8004e7e:	3e01      	subs	r6, #1
 8004e80:	7033      	strb	r3, [r6, #0]
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	9b07      	ldr	r3, [sp, #28]
 8004e8a:	0021      	movs	r1, r4
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	9805      	ldr	r0, [sp, #20]
 8004e90:	9b06      	ldr	r3, [sp, #24]
 8004e92:	aa09      	add	r2, sp, #36	; 0x24
 8004e94:	f7ff fef4 	bl	8004c80 <_printf_common>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d14c      	bne.n	8004f36 <_printf_i+0x1d6>
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	4240      	negs	r0, r0
 8004ea0:	b00b      	add	sp, #44	; 0x2c
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	3145      	adds	r1, #69	; 0x45
 8004ea6:	700a      	strb	r2, [r1, #0]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <_printf_i+0x21c>)
 8004eaa:	9203      	str	r2, [sp, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	ca20      	ldmia	r2!, {r5}
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	0608      	lsls	r0, r1, #24
 8004eb6:	d516      	bpl.n	8004ee6 <_printf_i+0x186>
 8004eb8:	07cb      	lsls	r3, r1, #31
 8004eba:	d502      	bpl.n	8004ec2 <_printf_i+0x162>
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	4319      	orrs	r1, r3
 8004ec0:	6021      	str	r1, [r4, #0]
 8004ec2:	2710      	movs	r7, #16
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	d1b2      	bne.n	8004e2e <_printf_i+0xce>
 8004ec8:	2320      	movs	r3, #32
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	439a      	bics	r2, r3
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	e7ad      	b.n	8004e2e <_printf_i+0xce>
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	6809      	ldr	r1, [r1, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	6022      	str	r2, [r4, #0]
 8004eda:	0022      	movs	r2, r4
 8004edc:	2178      	movs	r1, #120	; 0x78
 8004ede:	3245      	adds	r2, #69	; 0x45
 8004ee0:	7011      	strb	r1, [r2, #0]
 8004ee2:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <_printf_i+0x220>)
 8004ee4:	e7e1      	b.n	8004eaa <_printf_i+0x14a>
 8004ee6:	0648      	lsls	r0, r1, #25
 8004ee8:	d5e6      	bpl.n	8004eb8 <_printf_i+0x158>
 8004eea:	b2ad      	uxth	r5, r5
 8004eec:	e7e4      	b.n	8004eb8 <_printf_i+0x158>
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	680d      	ldr	r5, [r1, #0]
 8004ef2:	1d10      	adds	r0, r2, #4
 8004ef4:	6949      	ldr	r1, [r1, #20]
 8004ef6:	6018      	str	r0, [r3, #0]
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	062e      	lsls	r6, r5, #24
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0x1a2>
 8004efe:	6019      	str	r1, [r3, #0]
 8004f00:	e002      	b.n	8004f08 <_printf_i+0x1a8>
 8004f02:	066d      	lsls	r5, r5, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0x19e>
 8004f06:	8019      	strh	r1, [r3, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9e04      	ldr	r6, [sp, #16]
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	e7bb      	b.n	8004e88 <_printf_i+0x128>
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	1d11      	adds	r1, r2, #4
 8004f14:	6019      	str	r1, [r3, #0]
 8004f16:	6816      	ldr	r6, [r2, #0]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	0030      	movs	r0, r6
 8004f1c:	6862      	ldr	r2, [r4, #4]
 8004f1e:	f000 facf 	bl	80054c0 <memchr>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d001      	beq.n	8004f2a <_printf_i+0x1ca>
 8004f26:	1b80      	subs	r0, r0, r6
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9a04      	ldr	r2, [sp, #16]
 8004f32:	7013      	strb	r3, [r2, #0]
 8004f34:	e7a8      	b.n	8004e88 <_printf_i+0x128>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	0032      	movs	r2, r6
 8004f3a:	9906      	ldr	r1, [sp, #24]
 8004f3c:	9805      	ldr	r0, [sp, #20]
 8004f3e:	9d07      	ldr	r5, [sp, #28]
 8004f40:	47a8      	blx	r5
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d0aa      	beq.n	8004e9c <_printf_i+0x13c>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	079b      	lsls	r3, r3, #30
 8004f4a:	d415      	bmi.n	8004f78 <_printf_i+0x218>
 8004f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4e:	68e0      	ldr	r0, [r4, #12]
 8004f50:	4298      	cmp	r0, r3
 8004f52:	daa5      	bge.n	8004ea0 <_printf_i+0x140>
 8004f54:	0018      	movs	r0, r3
 8004f56:	e7a3      	b.n	8004ea0 <_printf_i+0x140>
 8004f58:	0022      	movs	r2, r4
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	9906      	ldr	r1, [sp, #24]
 8004f5e:	9805      	ldr	r0, [sp, #20]
 8004f60:	9e07      	ldr	r6, [sp, #28]
 8004f62:	3219      	adds	r2, #25
 8004f64:	47b0      	blx	r6
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d098      	beq.n	8004e9c <_printf_i+0x13c>
 8004f6a:	3501      	adds	r5, #1
 8004f6c:	68e3      	ldr	r3, [r4, #12]
 8004f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	42ab      	cmp	r3, r5
 8004f74:	dcf0      	bgt.n	8004f58 <_printf_i+0x1f8>
 8004f76:	e7e9      	b.n	8004f4c <_printf_i+0x1ec>
 8004f78:	2500      	movs	r5, #0
 8004f7a:	e7f7      	b.n	8004f6c <_printf_i+0x20c>
 8004f7c:	0800580d 	.word	0x0800580d
 8004f80:	0800581e 	.word	0x0800581e

08004f84 <_sbrk_r>:
 8004f84:	2300      	movs	r3, #0
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	4d06      	ldr	r5, [pc, #24]	; (8004fa4 <_sbrk_r+0x20>)
 8004f8a:	0004      	movs	r4, r0
 8004f8c:	0008      	movs	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fc f9e0 	bl	8001354 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_sbrk_r+0x1c>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d000      	beq.n	8004fa0 <_sbrk_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	20000448 	.word	0x20000448

08004fa8 <__sread>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	000c      	movs	r4, r1
 8004fac:	250e      	movs	r5, #14
 8004fae:	5f49      	ldrsh	r1, [r1, r5]
 8004fb0:	f000 faec 	bl	800558c <_read_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	db03      	blt.n	8004fc0 <__sread+0x18>
 8004fb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fba:	181b      	adds	r3, r3, r0
 8004fbc:	6563      	str	r3, [r4, #84]	; 0x54
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	4a02      	ldr	r2, [pc, #8]	; (8004fcc <__sread+0x24>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	e7f9      	b.n	8004fbe <__sread+0x16>
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	ffffefff 	.word	0xffffefff

08004fd0 <__swrite>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	001f      	movs	r7, r3
 8004fd4:	898b      	ldrh	r3, [r1, #12]
 8004fd6:	0005      	movs	r5, r0
 8004fd8:	000c      	movs	r4, r1
 8004fda:	0016      	movs	r6, r2
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	d505      	bpl.n	8004fec <__swrite+0x1c>
 8004fe0:	230e      	movs	r3, #14
 8004fe2:	5ec9      	ldrsh	r1, [r1, r3]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	f000 f9ea 	bl	80053c0 <_lseek_r>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <__swrite+0x34>)
 8004ff0:	0028      	movs	r0, r5
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	0032      	movs	r2, r6
 8004ff8:	230e      	movs	r3, #14
 8004ffa:	5ee1      	ldrsh	r1, [r4, r3]
 8004ffc:	003b      	movs	r3, r7
 8004ffe:	f000 f875 	bl	80050ec <_write_r>
 8005002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005004:	ffffefff 	.word	0xffffefff

08005008 <__sseek>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	000c      	movs	r4, r1
 800500c:	250e      	movs	r5, #14
 800500e:	5f49      	ldrsh	r1, [r1, r5]
 8005010:	f000 f9d6 	bl	80053c0 <_lseek_r>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	1c42      	adds	r2, r0, #1
 8005018:	d103      	bne.n	8005022 <__sseek+0x1a>
 800501a:	4a05      	ldr	r2, [pc, #20]	; (8005030 <__sseek+0x28>)
 800501c:	4013      	ands	r3, r2
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	0152      	lsls	r2, r2, #5
 8005026:	4313      	orrs	r3, r2
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	6560      	str	r0, [r4, #84]	; 0x54
 800502c:	e7f8      	b.n	8005020 <__sseek+0x18>
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	ffffefff 	.word	0xffffefff

08005034 <__sclose>:
 8005034:	b510      	push	{r4, lr}
 8005036:	230e      	movs	r3, #14
 8005038:	5ec9      	ldrsh	r1, [r1, r3]
 800503a:	f000 f8e3 	bl	8005204 <_close_r>
 800503e:	bd10      	pop	{r4, pc}

08005040 <__swbuf_r>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	0005      	movs	r5, r0
 8005044:	000e      	movs	r6, r1
 8005046:	0014      	movs	r4, r2
 8005048:	2800      	cmp	r0, #0
 800504a:	d004      	beq.n	8005056 <__swbuf_r+0x16>
 800504c:	6983      	ldr	r3, [r0, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <__swbuf_r+0x16>
 8005052:	f7ff fb77 	bl	8004744 <__sinit>
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <__swbuf_r+0xa0>)
 8005058:	429c      	cmp	r4, r3
 800505a:	d12e      	bne.n	80050ba <__swbuf_r+0x7a>
 800505c:	686c      	ldr	r4, [r5, #4]
 800505e:	69a3      	ldr	r3, [r4, #24]
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	d532      	bpl.n	80050ce <__swbuf_r+0x8e>
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02f      	beq.n	80050ce <__swbuf_r+0x8e>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	b2f7      	uxtb	r7, r6
 8005074:	1a98      	subs	r0, r3, r2
 8005076:	6963      	ldr	r3, [r4, #20]
 8005078:	b2f6      	uxtb	r6, r6
 800507a:	4283      	cmp	r3, r0
 800507c:	dc05      	bgt.n	800508a <__swbuf_r+0x4a>
 800507e:	0021      	movs	r1, r4
 8005080:	0028      	movs	r0, r5
 8005082:	f000 f95d 	bl	8005340 <_fflush_r>
 8005086:	2800      	cmp	r0, #0
 8005088:	d127      	bne.n	80050da <__swbuf_r+0x9a>
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	3001      	adds	r0, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	701f      	strb	r7, [r3, #0]
 800509a:	6963      	ldr	r3, [r4, #20]
 800509c:	4283      	cmp	r3, r0
 800509e:	d004      	beq.n	80050aa <__swbuf_r+0x6a>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	07db      	lsls	r3, r3, #31
 80050a4:	d507      	bpl.n	80050b6 <__swbuf_r+0x76>
 80050a6:	2e0a      	cmp	r6, #10
 80050a8:	d105      	bne.n	80050b6 <__swbuf_r+0x76>
 80050aa:	0021      	movs	r1, r4
 80050ac:	0028      	movs	r0, r5
 80050ae:	f000 f947 	bl	8005340 <_fflush_r>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d111      	bne.n	80050da <__swbuf_r+0x9a>
 80050b6:	0030      	movs	r0, r6
 80050b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <__swbuf_r+0xa4>)
 80050bc:	429c      	cmp	r4, r3
 80050be:	d101      	bne.n	80050c4 <__swbuf_r+0x84>
 80050c0:	68ac      	ldr	r4, [r5, #8]
 80050c2:	e7cc      	b.n	800505e <__swbuf_r+0x1e>
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <__swbuf_r+0xa8>)
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d1c9      	bne.n	800505e <__swbuf_r+0x1e>
 80050ca:	68ec      	ldr	r4, [r5, #12]
 80050cc:	e7c7      	b.n	800505e <__swbuf_r+0x1e>
 80050ce:	0021      	movs	r1, r4
 80050d0:	0028      	movs	r0, r5
 80050d2:	f000 f81f 	bl	8005114 <__swsetup_r>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d0c9      	beq.n	800506e <__swbuf_r+0x2e>
 80050da:	2601      	movs	r6, #1
 80050dc:	4276      	negs	r6, r6
 80050de:	e7ea      	b.n	80050b6 <__swbuf_r+0x76>
 80050e0:	080057bc 	.word	0x080057bc
 80050e4:	080057dc 	.word	0x080057dc
 80050e8:	0800579c 	.word	0x0800579c

080050ec <_write_r>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	0004      	movs	r4, r0
 80050f0:	0008      	movs	r0, r1
 80050f2:	0011      	movs	r1, r2
 80050f4:	001a      	movs	r2, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	4d05      	ldr	r5, [pc, #20]	; (8005110 <_write_r+0x24>)
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	f7fc f911 	bl	8001322 <_write>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d103      	bne.n	800510c <_write_r+0x20>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d000      	beq.n	800510c <_write_r+0x20>
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	20000448 	.word	0x20000448

08005114 <__swsetup_r>:
 8005114:	4b37      	ldr	r3, [pc, #220]	; (80051f4 <__swsetup_r+0xe0>)
 8005116:	b570      	push	{r4, r5, r6, lr}
 8005118:	681d      	ldr	r5, [r3, #0]
 800511a:	0006      	movs	r6, r0
 800511c:	000c      	movs	r4, r1
 800511e:	2d00      	cmp	r5, #0
 8005120:	d005      	beq.n	800512e <__swsetup_r+0x1a>
 8005122:	69ab      	ldr	r3, [r5, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <__swsetup_r+0x1a>
 8005128:	0028      	movs	r0, r5
 800512a:	f7ff fb0b 	bl	8004744 <__sinit>
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <__swsetup_r+0xe4>)
 8005130:	429c      	cmp	r4, r3
 8005132:	d10f      	bne.n	8005154 <__swsetup_r+0x40>
 8005134:	686c      	ldr	r4, [r5, #4]
 8005136:	230c      	movs	r3, #12
 8005138:	5ee2      	ldrsh	r2, [r4, r3]
 800513a:	b293      	uxth	r3, r2
 800513c:	0711      	lsls	r1, r2, #28
 800513e:	d42d      	bmi.n	800519c <__swsetup_r+0x88>
 8005140:	06d9      	lsls	r1, r3, #27
 8005142:	d411      	bmi.n	8005168 <__swsetup_r+0x54>
 8005144:	2309      	movs	r3, #9
 8005146:	2001      	movs	r0, #1
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	3337      	adds	r3, #55	; 0x37
 800514c:	4313      	orrs	r3, r2
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	4240      	negs	r0, r0
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	4b29      	ldr	r3, [pc, #164]	; (80051fc <__swsetup_r+0xe8>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d101      	bne.n	800515e <__swsetup_r+0x4a>
 800515a:	68ac      	ldr	r4, [r5, #8]
 800515c:	e7eb      	b.n	8005136 <__swsetup_r+0x22>
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <__swsetup_r+0xec>)
 8005160:	429c      	cmp	r4, r3
 8005162:	d1e8      	bne.n	8005136 <__swsetup_r+0x22>
 8005164:	68ec      	ldr	r4, [r5, #12]
 8005166:	e7e6      	b.n	8005136 <__swsetup_r+0x22>
 8005168:	075b      	lsls	r3, r3, #29
 800516a:	d513      	bpl.n	8005194 <__swsetup_r+0x80>
 800516c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800516e:	2900      	cmp	r1, #0
 8005170:	d008      	beq.n	8005184 <__swsetup_r+0x70>
 8005172:	0023      	movs	r3, r4
 8005174:	3344      	adds	r3, #68	; 0x44
 8005176:	4299      	cmp	r1, r3
 8005178:	d002      	beq.n	8005180 <__swsetup_r+0x6c>
 800517a:	0030      	movs	r0, r6
 800517c:	f000 f9bc 	bl	80054f8 <_free_r>
 8005180:	2300      	movs	r3, #0
 8005182:	6363      	str	r3, [r4, #52]	; 0x34
 8005184:	2224      	movs	r2, #36	; 0x24
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	4393      	bics	r3, r2
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	2300      	movs	r3, #0
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6923      	ldr	r3, [r4, #16]
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	2308      	movs	r3, #8
 8005196:	89a2      	ldrh	r2, [r4, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <__swsetup_r+0xa6>
 80051a2:	21a0      	movs	r1, #160	; 0xa0
 80051a4:	2280      	movs	r2, #128	; 0x80
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	0089      	lsls	r1, r1, #2
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	400b      	ands	r3, r1
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <__swsetup_r+0xa6>
 80051b2:	0021      	movs	r1, r4
 80051b4:	0030      	movs	r0, r6
 80051b6:	f000 f93f 	bl	8005438 <__smakebuf_r>
 80051ba:	220c      	movs	r2, #12
 80051bc:	5ea3      	ldrsh	r3, [r4, r2]
 80051be:	2001      	movs	r0, #1
 80051c0:	001a      	movs	r2, r3
 80051c2:	b299      	uxth	r1, r3
 80051c4:	4002      	ands	r2, r0
 80051c6:	4203      	tst	r3, r0
 80051c8:	d00f      	beq.n	80051ea <__swsetup_r+0xd6>
 80051ca:	2200      	movs	r2, #0
 80051cc:	60a2      	str	r2, [r4, #8]
 80051ce:	6962      	ldr	r2, [r4, #20]
 80051d0:	4252      	negs	r2, r2
 80051d2:	61a2      	str	r2, [r4, #24]
 80051d4:	2000      	movs	r0, #0
 80051d6:	6922      	ldr	r2, [r4, #16]
 80051d8:	4282      	cmp	r2, r0
 80051da:	d1ba      	bne.n	8005152 <__swsetup_r+0x3e>
 80051dc:	060a      	lsls	r2, r1, #24
 80051de:	d5b8      	bpl.n	8005152 <__swsetup_r+0x3e>
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	4313      	orrs	r3, r2
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	3801      	subs	r0, #1
 80051e8:	e7b3      	b.n	8005152 <__swsetup_r+0x3e>
 80051ea:	0788      	lsls	r0, r1, #30
 80051ec:	d400      	bmi.n	80051f0 <__swsetup_r+0xdc>
 80051ee:	6962      	ldr	r2, [r4, #20]
 80051f0:	60a2      	str	r2, [r4, #8]
 80051f2:	e7ef      	b.n	80051d4 <__swsetup_r+0xc0>
 80051f4:	2000000c 	.word	0x2000000c
 80051f8:	080057bc 	.word	0x080057bc
 80051fc:	080057dc 	.word	0x080057dc
 8005200:	0800579c 	.word	0x0800579c

08005204 <_close_r>:
 8005204:	2300      	movs	r3, #0
 8005206:	b570      	push	{r4, r5, r6, lr}
 8005208:	4d06      	ldr	r5, [pc, #24]	; (8005224 <_close_r+0x20>)
 800520a:	0004      	movs	r4, r0
 800520c:	0008      	movs	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fc f894 	bl	800133c <_close>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d103      	bne.n	8005220 <_close_r+0x1c>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <_close_r+0x1c>
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	20000448 	.word	0x20000448

08005228 <__sflush_r>:
 8005228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800522a:	898b      	ldrh	r3, [r1, #12]
 800522c:	0005      	movs	r5, r0
 800522e:	000c      	movs	r4, r1
 8005230:	071a      	lsls	r2, r3, #28
 8005232:	d45f      	bmi.n	80052f4 <__sflush_r+0xcc>
 8005234:	684a      	ldr	r2, [r1, #4]
 8005236:	2a00      	cmp	r2, #0
 8005238:	dc04      	bgt.n	8005244 <__sflush_r+0x1c>
 800523a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800523c:	2a00      	cmp	r2, #0
 800523e:	dc01      	bgt.n	8005244 <__sflush_r+0x1c>
 8005240:	2000      	movs	r0, #0
 8005242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005244:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005246:	2f00      	cmp	r7, #0
 8005248:	d0fa      	beq.n	8005240 <__sflush_r+0x18>
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	682e      	ldr	r6, [r5, #0]
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	001a      	movs	r2, r3
 8005254:	0149      	lsls	r1, r1, #5
 8005256:	400a      	ands	r2, r1
 8005258:	420b      	tst	r3, r1
 800525a:	d034      	beq.n	80052c6 <__sflush_r+0x9e>
 800525c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	075b      	lsls	r3, r3, #29
 8005262:	d506      	bpl.n	8005272 <__sflush_r+0x4a>
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	1ac0      	subs	r0, r0, r3
 8005268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <__sflush_r+0x4a>
 800526e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005270:	1ac0      	subs	r0, r0, r3
 8005272:	0002      	movs	r2, r0
 8005274:	6a21      	ldr	r1, [r4, #32]
 8005276:	2300      	movs	r3, #0
 8005278:	0028      	movs	r0, r5
 800527a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800527c:	47b8      	blx	r7
 800527e:	89a1      	ldrh	r1, [r4, #12]
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d106      	bne.n	8005292 <__sflush_r+0x6a>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	2b1d      	cmp	r3, #29
 8005288:	d831      	bhi.n	80052ee <__sflush_r+0xc6>
 800528a:	4a2c      	ldr	r2, [pc, #176]	; (800533c <__sflush_r+0x114>)
 800528c:	40da      	lsrs	r2, r3
 800528e:	07d3      	lsls	r3, r2, #31
 8005290:	d52d      	bpl.n	80052ee <__sflush_r+0xc6>
 8005292:	2300      	movs	r3, #0
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	04cb      	lsls	r3, r1, #19
 800529c:	d505      	bpl.n	80052aa <__sflush_r+0x82>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d102      	bne.n	80052a8 <__sflush_r+0x80>
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d100      	bne.n	80052aa <__sflush_r+0x82>
 80052a8:	6560      	str	r0, [r4, #84]	; 0x54
 80052aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ac:	602e      	str	r6, [r5, #0]
 80052ae:	2900      	cmp	r1, #0
 80052b0:	d0c6      	beq.n	8005240 <__sflush_r+0x18>
 80052b2:	0023      	movs	r3, r4
 80052b4:	3344      	adds	r3, #68	; 0x44
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d002      	beq.n	80052c0 <__sflush_r+0x98>
 80052ba:	0028      	movs	r0, r5
 80052bc:	f000 f91c 	bl	80054f8 <_free_r>
 80052c0:	2000      	movs	r0, #0
 80052c2:	6360      	str	r0, [r4, #52]	; 0x34
 80052c4:	e7bd      	b.n	8005242 <__sflush_r+0x1a>
 80052c6:	2301      	movs	r3, #1
 80052c8:	0028      	movs	r0, r5
 80052ca:	6a21      	ldr	r1, [r4, #32]
 80052cc:	47b8      	blx	r7
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	d1c5      	bne.n	800525e <__sflush_r+0x36>
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0c2      	beq.n	800525e <__sflush_r+0x36>
 80052d8:	2b1d      	cmp	r3, #29
 80052da:	d001      	beq.n	80052e0 <__sflush_r+0xb8>
 80052dc:	2b16      	cmp	r3, #22
 80052de:	d101      	bne.n	80052e4 <__sflush_r+0xbc>
 80052e0:	602e      	str	r6, [r5, #0]
 80052e2:	e7ad      	b.n	8005240 <__sflush_r+0x18>
 80052e4:	2340      	movs	r3, #64	; 0x40
 80052e6:	89a2      	ldrh	r2, [r4, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	e7a9      	b.n	8005242 <__sflush_r+0x1a>
 80052ee:	2340      	movs	r3, #64	; 0x40
 80052f0:	430b      	orrs	r3, r1
 80052f2:	e7fa      	b.n	80052ea <__sflush_r+0xc2>
 80052f4:	690f      	ldr	r7, [r1, #16]
 80052f6:	2f00      	cmp	r7, #0
 80052f8:	d0a2      	beq.n	8005240 <__sflush_r+0x18>
 80052fa:	680a      	ldr	r2, [r1, #0]
 80052fc:	600f      	str	r7, [r1, #0]
 80052fe:	1bd2      	subs	r2, r2, r7
 8005300:	9201      	str	r2, [sp, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	079b      	lsls	r3, r3, #30
 8005306:	d100      	bne.n	800530a <__sflush_r+0xe2>
 8005308:	694a      	ldr	r2, [r1, #20]
 800530a:	60a2      	str	r2, [r4, #8]
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dc00      	bgt.n	8005314 <__sflush_r+0xec>
 8005312:	e795      	b.n	8005240 <__sflush_r+0x18>
 8005314:	003a      	movs	r2, r7
 8005316:	0028      	movs	r0, r5
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	6a21      	ldr	r1, [r4, #32]
 800531c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800531e:	47b0      	blx	r6
 8005320:	2800      	cmp	r0, #0
 8005322:	dc06      	bgt.n	8005332 <__sflush_r+0x10a>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	2001      	movs	r0, #1
 8005328:	89a2      	ldrh	r2, [r4, #12]
 800532a:	4240      	negs	r0, r0
 800532c:	4313      	orrs	r3, r2
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	e787      	b.n	8005242 <__sflush_r+0x1a>
 8005332:	9b01      	ldr	r3, [sp, #4]
 8005334:	183f      	adds	r7, r7, r0
 8005336:	1a1b      	subs	r3, r3, r0
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	e7e7      	b.n	800530c <__sflush_r+0xe4>
 800533c:	20400001 	.word	0x20400001

08005340 <_fflush_r>:
 8005340:	690b      	ldr	r3, [r1, #16]
 8005342:	b570      	push	{r4, r5, r6, lr}
 8005344:	0005      	movs	r5, r0
 8005346:	000c      	movs	r4, r1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <_fflush_r+0x12>
 800534c:	2500      	movs	r5, #0
 800534e:	0028      	movs	r0, r5
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	2800      	cmp	r0, #0
 8005354:	d004      	beq.n	8005360 <_fflush_r+0x20>
 8005356:	6983      	ldr	r3, [r0, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <_fflush_r+0x20>
 800535c:	f7ff f9f2 	bl	8004744 <__sinit>
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <_fflush_r+0x74>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d11b      	bne.n	800539e <_fflush_r+0x5e>
 8005366:	686c      	ldr	r4, [r5, #4]
 8005368:	220c      	movs	r2, #12
 800536a:	5ea3      	ldrsh	r3, [r4, r2]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ed      	beq.n	800534c <_fflush_r+0xc>
 8005370:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005372:	07d2      	lsls	r2, r2, #31
 8005374:	d404      	bmi.n	8005380 <_fflush_r+0x40>
 8005376:	059b      	lsls	r3, r3, #22
 8005378:	d402      	bmi.n	8005380 <_fflush_r+0x40>
 800537a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537c:	f7ff fa83 	bl	8004886 <__retarget_lock_acquire_recursive>
 8005380:	0028      	movs	r0, r5
 8005382:	0021      	movs	r1, r4
 8005384:	f7ff ff50 	bl	8005228 <__sflush_r>
 8005388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538a:	0005      	movs	r5, r0
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	d4de      	bmi.n	800534e <_fflush_r+0xe>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	059b      	lsls	r3, r3, #22
 8005394:	d4db      	bmi.n	800534e <_fflush_r+0xe>
 8005396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005398:	f7ff fa76 	bl	8004888 <__retarget_lock_release_recursive>
 800539c:	e7d7      	b.n	800534e <_fflush_r+0xe>
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <_fflush_r+0x78>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	d101      	bne.n	80053a8 <_fflush_r+0x68>
 80053a4:	68ac      	ldr	r4, [r5, #8]
 80053a6:	e7df      	b.n	8005368 <_fflush_r+0x28>
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <_fflush_r+0x7c>)
 80053aa:	429c      	cmp	r4, r3
 80053ac:	d1dc      	bne.n	8005368 <_fflush_r+0x28>
 80053ae:	68ec      	ldr	r4, [r5, #12]
 80053b0:	e7da      	b.n	8005368 <_fflush_r+0x28>
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	080057bc 	.word	0x080057bc
 80053b8:	080057dc 	.word	0x080057dc
 80053bc:	0800579c 	.word	0x0800579c

080053c0 <_lseek_r>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	0004      	movs	r4, r0
 80053c4:	0008      	movs	r0, r1
 80053c6:	0011      	movs	r1, r2
 80053c8:	001a      	movs	r2, r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d05      	ldr	r5, [pc, #20]	; (80053e4 <_lseek_r+0x24>)
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb ffbe 	bl	8001350 <_lseek>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d103      	bne.n	80053e0 <_lseek_r+0x20>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d000      	beq.n	80053e0 <_lseek_r+0x20>
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	20000448 	.word	0x20000448

080053e8 <__swhatbuf_r>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	000e      	movs	r6, r1
 80053ec:	001d      	movs	r5, r3
 80053ee:	230e      	movs	r3, #14
 80053f0:	5ec9      	ldrsh	r1, [r1, r3]
 80053f2:	0014      	movs	r4, r2
 80053f4:	b096      	sub	sp, #88	; 0x58
 80053f6:	2900      	cmp	r1, #0
 80053f8:	da08      	bge.n	800540c <__swhatbuf_r+0x24>
 80053fa:	220c      	movs	r2, #12
 80053fc:	5eb3      	ldrsh	r3, [r6, r2]
 80053fe:	2200      	movs	r2, #0
 8005400:	602a      	str	r2, [r5, #0]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	d411      	bmi.n	800542a <__swhatbuf_r+0x42>
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	e00f      	b.n	800542c <__swhatbuf_r+0x44>
 800540c:	466a      	mov	r2, sp
 800540e:	f000 f8d1 	bl	80055b4 <_fstat_r>
 8005412:	2800      	cmp	r0, #0
 8005414:	dbf1      	blt.n	80053fa <__swhatbuf_r+0x12>
 8005416:	23f0      	movs	r3, #240	; 0xf0
 8005418:	9901      	ldr	r1, [sp, #4]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	4019      	ands	r1, r3
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <__swhatbuf_r+0x4c>)
 8005420:	18c9      	adds	r1, r1, r3
 8005422:	424b      	negs	r3, r1
 8005424:	4159      	adcs	r1, r3
 8005426:	6029      	str	r1, [r5, #0]
 8005428:	e7ed      	b.n	8005406 <__swhatbuf_r+0x1e>
 800542a:	2340      	movs	r3, #64	; 0x40
 800542c:	2000      	movs	r0, #0
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	b016      	add	sp, #88	; 0x58
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	ffffe000 	.word	0xffffe000

08005438 <__smakebuf_r>:
 8005438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800543a:	2602      	movs	r6, #2
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	0005      	movs	r5, r0
 8005440:	000c      	movs	r4, r1
 8005442:	4233      	tst	r3, r6
 8005444:	d006      	beq.n	8005454 <__smakebuf_r+0x1c>
 8005446:	0023      	movs	r3, r4
 8005448:	3347      	adds	r3, #71	; 0x47
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	2301      	movs	r3, #1
 8005450:	6163      	str	r3, [r4, #20]
 8005452:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005454:	466a      	mov	r2, sp
 8005456:	ab01      	add	r3, sp, #4
 8005458:	f7ff ffc6 	bl	80053e8 <__swhatbuf_r>
 800545c:	9900      	ldr	r1, [sp, #0]
 800545e:	0007      	movs	r7, r0
 8005460:	0028      	movs	r0, r5
 8005462:	f7ff fa35 	bl	80048d0 <_malloc_r>
 8005466:	2800      	cmp	r0, #0
 8005468:	d108      	bne.n	800547c <__smakebuf_r+0x44>
 800546a:	220c      	movs	r2, #12
 800546c:	5ea3      	ldrsh	r3, [r4, r2]
 800546e:	059a      	lsls	r2, r3, #22
 8005470:	d4ef      	bmi.n	8005452 <__smakebuf_r+0x1a>
 8005472:	2203      	movs	r2, #3
 8005474:	4393      	bics	r3, r2
 8005476:	431e      	orrs	r6, r3
 8005478:	81a6      	strh	r6, [r4, #12]
 800547a:	e7e4      	b.n	8005446 <__smakebuf_r+0xe>
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <__smakebuf_r+0x84>)
 800547e:	62ab      	str	r3, [r5, #40]	; 0x28
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	89a2      	ldrh	r2, [r4, #12]
 8005484:	6020      	str	r0, [r4, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	9b00      	ldr	r3, [sp, #0]
 800548c:	6120      	str	r0, [r4, #16]
 800548e:	6163      	str	r3, [r4, #20]
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <__smakebuf_r+0x7a>
 8005496:	0028      	movs	r0, r5
 8005498:	230e      	movs	r3, #14
 800549a:	5ee1      	ldrsh	r1, [r4, r3]
 800549c:	f000 f89c 	bl	80055d8 <_isatty_r>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d006      	beq.n	80054b2 <__smakebuf_r+0x7a>
 80054a4:	2203      	movs	r2, #3
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	4393      	bics	r3, r2
 80054aa:	001a      	movs	r2, r3
 80054ac:	2301      	movs	r3, #1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	89a0      	ldrh	r0, [r4, #12]
 80054b4:	4307      	orrs	r7, r0
 80054b6:	81a7      	strh	r7, [r4, #12]
 80054b8:	e7cb      	b.n	8005452 <__smakebuf_r+0x1a>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	080046c9 	.word	0x080046c9

080054c0 <memchr>:
 80054c0:	b2c9      	uxtb	r1, r1
 80054c2:	1882      	adds	r2, r0, r2
 80054c4:	4290      	cmp	r0, r2
 80054c6:	d101      	bne.n	80054cc <memchr+0xc>
 80054c8:	2000      	movs	r0, #0
 80054ca:	4770      	bx	lr
 80054cc:	7803      	ldrb	r3, [r0, #0]
 80054ce:	428b      	cmp	r3, r1
 80054d0:	d0fb      	beq.n	80054ca <memchr+0xa>
 80054d2:	3001      	adds	r0, #1
 80054d4:	e7f6      	b.n	80054c4 <memchr+0x4>
	...

080054d8 <__malloc_lock>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4802      	ldr	r0, [pc, #8]	; (80054e4 <__malloc_lock+0xc>)
 80054dc:	f7ff f9d3 	bl	8004886 <__retarget_lock_acquire_recursive>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	2000043c 	.word	0x2000043c

080054e8 <__malloc_unlock>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	4802      	ldr	r0, [pc, #8]	; (80054f4 <__malloc_unlock+0xc>)
 80054ec:	f7ff f9cc 	bl	8004888 <__retarget_lock_release_recursive>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	2000043c 	.word	0x2000043c

080054f8 <_free_r>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	0005      	movs	r5, r0
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d010      	beq.n	8005522 <_free_r+0x2a>
 8005500:	1f0c      	subs	r4, r1, #4
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	da00      	bge.n	800550a <_free_r+0x12>
 8005508:	18e4      	adds	r4, r4, r3
 800550a:	0028      	movs	r0, r5
 800550c:	f7ff ffe4 	bl	80054d8 <__malloc_lock>
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <_free_r+0x90>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <_free_r+0x2c>
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	6014      	str	r4, [r2, #0]
 800551c:	0028      	movs	r0, r5
 800551e:	f7ff ffe3 	bl	80054e8 <__malloc_unlock>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	42a3      	cmp	r3, r4
 8005526:	d908      	bls.n	800553a <_free_r+0x42>
 8005528:	6821      	ldr	r1, [r4, #0]
 800552a:	1860      	adds	r0, r4, r1
 800552c:	4283      	cmp	r3, r0
 800552e:	d1f3      	bne.n	8005518 <_free_r+0x20>
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	1841      	adds	r1, r0, r1
 8005536:	6021      	str	r1, [r4, #0]
 8005538:	e7ee      	b.n	8005518 <_free_r+0x20>
 800553a:	001a      	movs	r2, r3
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <_free_r+0x4e>
 8005542:	42a3      	cmp	r3, r4
 8005544:	d9f9      	bls.n	800553a <_free_r+0x42>
 8005546:	6811      	ldr	r1, [r2, #0]
 8005548:	1850      	adds	r0, r2, r1
 800554a:	42a0      	cmp	r0, r4
 800554c:	d10b      	bne.n	8005566 <_free_r+0x6e>
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1809      	adds	r1, r1, r0
 8005552:	1850      	adds	r0, r2, r1
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	4283      	cmp	r3, r0
 8005558:	d1e0      	bne.n	800551c <_free_r+0x24>
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	1841      	adds	r1, r0, r1
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	6053      	str	r3, [r2, #4]
 8005564:	e7da      	b.n	800551c <_free_r+0x24>
 8005566:	42a0      	cmp	r0, r4
 8005568:	d902      	bls.n	8005570 <_free_r+0x78>
 800556a:	230c      	movs	r3, #12
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	e7d5      	b.n	800551c <_free_r+0x24>
 8005570:	6821      	ldr	r1, [r4, #0]
 8005572:	1860      	adds	r0, r4, r1
 8005574:	4283      	cmp	r3, r0
 8005576:	d103      	bne.n	8005580 <_free_r+0x88>
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	1841      	adds	r1, r0, r1
 800557e:	6021      	str	r1, [r4, #0]
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	6054      	str	r4, [r2, #4]
 8005584:	e7ca      	b.n	800551c <_free_r+0x24>
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	20000440 	.word	0x20000440

0800558c <_read_r>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	0004      	movs	r4, r0
 8005590:	0008      	movs	r0, r1
 8005592:	0011      	movs	r1, r2
 8005594:	001a      	movs	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	4d05      	ldr	r5, [pc, #20]	; (80055b0 <_read_r+0x24>)
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fb feb4 	bl	8001308 <_read>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d103      	bne.n	80055ac <_read_r+0x20>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d000      	beq.n	80055ac <_read_r+0x20>
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	20000448 	.word	0x20000448

080055b4 <_fstat_r>:
 80055b4:	2300      	movs	r3, #0
 80055b6:	b570      	push	{r4, r5, r6, lr}
 80055b8:	4d06      	ldr	r5, [pc, #24]	; (80055d4 <_fstat_r+0x20>)
 80055ba:	0004      	movs	r4, r0
 80055bc:	0008      	movs	r0, r1
 80055be:	0011      	movs	r1, r2
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	f7fb febe 	bl	8001342 <_fstat>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d103      	bne.n	80055d2 <_fstat_r+0x1e>
 80055ca:	682b      	ldr	r3, [r5, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d000      	beq.n	80055d2 <_fstat_r+0x1e>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	20000448 	.word	0x20000448

080055d8 <_isatty_r>:
 80055d8:	2300      	movs	r3, #0
 80055da:	b570      	push	{r4, r5, r6, lr}
 80055dc:	4d06      	ldr	r5, [pc, #24]	; (80055f8 <_isatty_r+0x20>)
 80055de:	0004      	movs	r4, r0
 80055e0:	0008      	movs	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fb feb2 	bl	800134c <_isatty>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d103      	bne.n	80055f4 <_isatty_r+0x1c>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d000      	beq.n	80055f4 <_isatty_r+0x1c>
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	20000448 	.word	0x20000448

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
