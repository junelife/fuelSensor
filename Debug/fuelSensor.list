
fuelSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000472c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a80  08004a80  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004a80  08004a80  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a80  08004a80  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200000ac  08004b34  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004b34  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f09  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b88  00000000  00000000  00037fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e203  00000000  00000000  0003bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00049d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0004aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ad9  00000000  00000000  0004bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001980e  00000000  00000000  00062889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008722c  00000000  00000000  0007c097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001032c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003074  00000000  00000000  00103314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000ac 	.word	0x200000ac
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080047cc 	.word	0x080047cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000b0 	.word	0x200000b0
 80000fc:	080047cc 	.word	0x080047cc

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cfrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0008      	movs	r0, r1
 8000418:	4661      	mov	r1, ip
 800041a:	e7ff      	b.n	800041c <__aeabi_cfcmpeq>

0800041c <__aeabi_cfcmpeq>:
 800041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041e:	f000 f8b7 	bl	8000590 <__lesf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	d401      	bmi.n	800042a <__aeabi_cfcmpeq+0xe>
 8000426:	2100      	movs	r1, #0
 8000428:	42c8      	cmn	r0, r1
 800042a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800042c <__aeabi_fcmpeq>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f843 	bl	80004b8 <__eqsf2>
 8000432:	4240      	negs	r0, r0
 8000434:	3001      	adds	r0, #1
 8000436:	bd10      	pop	{r4, pc}

08000438 <__aeabi_fcmplt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f8a9 	bl	8000590 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	db01      	blt.n	8000446 <__aeabi_fcmplt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmple>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f89f 	bl	8000590 <__lesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dd01      	ble.n	800045a <__aeabi_fcmple+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpgt>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 f84f 	bl	8000504 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dc01      	bgt.n	800046e <__aeabi_fcmpgt+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_fcmpge>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 f845 	bl	8000504 <__gesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	da01      	bge.n	8000482 <__aeabi_fcmpge+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_f2uiz>:
 8000488:	219e      	movs	r1, #158	; 0x9e
 800048a:	b510      	push	{r4, lr}
 800048c:	05c9      	lsls	r1, r1, #23
 800048e:	1c04      	adds	r4, r0, #0
 8000490:	f7ff fff0 	bl	8000474 <__aeabi_fcmpge>
 8000494:	2800      	cmp	r0, #0
 8000496:	d103      	bne.n	80004a0 <__aeabi_f2uiz+0x18>
 8000498:	1c20      	adds	r0, r4, #0
 800049a:	f000 fb91 	bl	8000bc0 <__aeabi_f2iz>
 800049e:	bd10      	pop	{r4, pc}
 80004a0:	219e      	movs	r1, #158	; 0x9e
 80004a2:	1c20      	adds	r0, r4, #0
 80004a4:	05c9      	lsls	r1, r1, #23
 80004a6:	f000 f9dd 	bl	8000864 <__aeabi_fsub>
 80004aa:	f000 fb89 	bl	8000bc0 <__aeabi_f2iz>
 80004ae:	2380      	movs	r3, #128	; 0x80
 80004b0:	061b      	lsls	r3, r3, #24
 80004b2:	469c      	mov	ip, r3
 80004b4:	4460      	add	r0, ip
 80004b6:	e7f2      	b.n	800049e <__aeabi_f2uiz+0x16>

080004b8 <__eqsf2>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0042      	lsls	r2, r0, #1
 80004bc:	0245      	lsls	r5, r0, #9
 80004be:	024e      	lsls	r6, r1, #9
 80004c0:	004c      	lsls	r4, r1, #1
 80004c2:	0fc3      	lsrs	r3, r0, #31
 80004c4:	0a6d      	lsrs	r5, r5, #9
 80004c6:	2001      	movs	r0, #1
 80004c8:	0e12      	lsrs	r2, r2, #24
 80004ca:	0a76      	lsrs	r6, r6, #9
 80004cc:	0e24      	lsrs	r4, r4, #24
 80004ce:	0fc9      	lsrs	r1, r1, #31
 80004d0:	2aff      	cmp	r2, #255	; 0xff
 80004d2:	d006      	beq.n	80004e2 <__eqsf2+0x2a>
 80004d4:	2cff      	cmp	r4, #255	; 0xff
 80004d6:	d003      	beq.n	80004e0 <__eqsf2+0x28>
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d101      	bne.n	80004e0 <__eqsf2+0x28>
 80004dc:	42b5      	cmp	r5, r6
 80004de:	d006      	beq.n	80004ee <__eqsf2+0x36>
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d1fc      	bne.n	80004e0 <__eqsf2+0x28>
 80004e6:	2cff      	cmp	r4, #255	; 0xff
 80004e8:	d1fa      	bne.n	80004e0 <__eqsf2+0x28>
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d1f8      	bne.n	80004e0 <__eqsf2+0x28>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d006      	beq.n	8000500 <__eqsf2+0x48>
 80004f2:	2001      	movs	r0, #1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d1f3      	bne.n	80004e0 <__eqsf2+0x28>
 80004f8:	0028      	movs	r0, r5
 80004fa:	1e43      	subs	r3, r0, #1
 80004fc:	4198      	sbcs	r0, r3
 80004fe:	e7ef      	b.n	80004e0 <__eqsf2+0x28>
 8000500:	2000      	movs	r0, #0
 8000502:	e7ed      	b.n	80004e0 <__eqsf2+0x28>

08000504 <__gesf2>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	0042      	lsls	r2, r0, #1
 8000508:	0245      	lsls	r5, r0, #9
 800050a:	024e      	lsls	r6, r1, #9
 800050c:	004c      	lsls	r4, r1, #1
 800050e:	0fc3      	lsrs	r3, r0, #31
 8000510:	0a6d      	lsrs	r5, r5, #9
 8000512:	0e12      	lsrs	r2, r2, #24
 8000514:	0a76      	lsrs	r6, r6, #9
 8000516:	0e24      	lsrs	r4, r4, #24
 8000518:	0fc8      	lsrs	r0, r1, #31
 800051a:	2aff      	cmp	r2, #255	; 0xff
 800051c:	d01b      	beq.n	8000556 <__gesf2+0x52>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d00e      	beq.n	8000540 <__gesf2+0x3c>
 8000522:	2a00      	cmp	r2, #0
 8000524:	d11b      	bne.n	800055e <__gesf2+0x5a>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d101      	bne.n	800052e <__gesf2+0x2a>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d01c      	beq.n	8000568 <__gesf2+0x64>
 800052e:	2d00      	cmp	r5, #0
 8000530:	d00c      	beq.n	800054c <__gesf2+0x48>
 8000532:	4283      	cmp	r3, r0
 8000534:	d01c      	beq.n	8000570 <__gesf2+0x6c>
 8000536:	2102      	movs	r1, #2
 8000538:	1e58      	subs	r0, r3, #1
 800053a:	4008      	ands	r0, r1
 800053c:	3801      	subs	r0, #1
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	2e00      	cmp	r6, #0
 8000542:	d122      	bne.n	800058a <__gesf2+0x86>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d1f4      	bne.n	8000532 <__gesf2+0x2e>
 8000548:	2d00      	cmp	r5, #0
 800054a:	d1f2      	bne.n	8000532 <__gesf2+0x2e>
 800054c:	2800      	cmp	r0, #0
 800054e:	d1f6      	bne.n	800053e <__gesf2+0x3a>
 8000550:	2001      	movs	r0, #1
 8000552:	4240      	negs	r0, r0
 8000554:	e7f3      	b.n	800053e <__gesf2+0x3a>
 8000556:	2d00      	cmp	r5, #0
 8000558:	d117      	bne.n	800058a <__gesf2+0x86>
 800055a:	2cff      	cmp	r4, #255	; 0xff
 800055c:	d0f0      	beq.n	8000540 <__gesf2+0x3c>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d1e7      	bne.n	8000532 <__gesf2+0x2e>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d1e5      	bne.n	8000532 <__gesf2+0x2e>
 8000566:	e7e6      	b.n	8000536 <__gesf2+0x32>
 8000568:	2000      	movs	r0, #0
 800056a:	2d00      	cmp	r5, #0
 800056c:	d0e7      	beq.n	800053e <__gesf2+0x3a>
 800056e:	e7e2      	b.n	8000536 <__gesf2+0x32>
 8000570:	42a2      	cmp	r2, r4
 8000572:	dc05      	bgt.n	8000580 <__gesf2+0x7c>
 8000574:	dbea      	blt.n	800054c <__gesf2+0x48>
 8000576:	42b5      	cmp	r5, r6
 8000578:	d802      	bhi.n	8000580 <__gesf2+0x7c>
 800057a:	d3e7      	bcc.n	800054c <__gesf2+0x48>
 800057c:	2000      	movs	r0, #0
 800057e:	e7de      	b.n	800053e <__gesf2+0x3a>
 8000580:	4243      	negs	r3, r0
 8000582:	4158      	adcs	r0, r3
 8000584:	0040      	lsls	r0, r0, #1
 8000586:	3801      	subs	r0, #1
 8000588:	e7d9      	b.n	800053e <__gesf2+0x3a>
 800058a:	2002      	movs	r0, #2
 800058c:	4240      	negs	r0, r0
 800058e:	e7d6      	b.n	800053e <__gesf2+0x3a>

08000590 <__lesf2>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0245      	lsls	r5, r0, #9
 8000596:	024e      	lsls	r6, r1, #9
 8000598:	004c      	lsls	r4, r1, #1
 800059a:	0fc3      	lsrs	r3, r0, #31
 800059c:	0a6d      	lsrs	r5, r5, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a76      	lsrs	r6, r6, #9
 80005a2:	0e24      	lsrs	r4, r4, #24
 80005a4:	0fc8      	lsrs	r0, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d00b      	beq.n	80005c2 <__lesf2+0x32>
 80005aa:	2cff      	cmp	r4, #255	; 0xff
 80005ac:	d00d      	beq.n	80005ca <__lesf2+0x3a>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d11f      	bne.n	80005f2 <__lesf2+0x62>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d116      	bne.n	80005e4 <__lesf2+0x54>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d114      	bne.n	80005e4 <__lesf2+0x54>
 80005ba:	2000      	movs	r0, #0
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d010      	beq.n	80005e2 <__lesf2+0x52>
 80005c0:	e009      	b.n	80005d6 <__lesf2+0x46>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d10c      	bne.n	80005e0 <__lesf2+0x50>
 80005c6:	2cff      	cmp	r4, #255	; 0xff
 80005c8:	d113      	bne.n	80005f2 <__lesf2+0x62>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d108      	bne.n	80005e0 <__lesf2+0x50>
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d008      	beq.n	80005e4 <__lesf2+0x54>
 80005d2:	4283      	cmp	r3, r0
 80005d4:	d012      	beq.n	80005fc <__lesf2+0x6c>
 80005d6:	2102      	movs	r1, #2
 80005d8:	1e58      	subs	r0, r3, #1
 80005da:	4008      	ands	r0, r1
 80005dc:	3801      	subs	r0, #1
 80005de:	e000      	b.n	80005e2 <__lesf2+0x52>
 80005e0:	2002      	movs	r0, #2
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d1f4      	bne.n	80005d2 <__lesf2+0x42>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d1fa      	bne.n	80005e2 <__lesf2+0x52>
 80005ec:	2001      	movs	r0, #1
 80005ee:	4240      	negs	r0, r0
 80005f0:	e7f7      	b.n	80005e2 <__lesf2+0x52>
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d1ed      	bne.n	80005d2 <__lesf2+0x42>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d1eb      	bne.n	80005d2 <__lesf2+0x42>
 80005fa:	e7ec      	b.n	80005d6 <__lesf2+0x46>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	dc05      	bgt.n	800060c <__lesf2+0x7c>
 8000600:	dbf2      	blt.n	80005e8 <__lesf2+0x58>
 8000602:	42b5      	cmp	r5, r6
 8000604:	d802      	bhi.n	800060c <__lesf2+0x7c>
 8000606:	d3ef      	bcc.n	80005e8 <__lesf2+0x58>
 8000608:	2000      	movs	r0, #0
 800060a:	e7ea      	b.n	80005e2 <__lesf2+0x52>
 800060c:	4243      	negs	r3, r0
 800060e:	4158      	adcs	r0, r3
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	3801      	subs	r0, #1
 8000614:	e7e5      	b.n	80005e2 <__lesf2+0x52>
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__aeabi_fmul>:
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	464f      	mov	r7, r9
 800061c:	4646      	mov	r6, r8
 800061e:	46d6      	mov	lr, sl
 8000620:	0244      	lsls	r4, r0, #9
 8000622:	0045      	lsls	r5, r0, #1
 8000624:	b5c0      	push	{r6, r7, lr}
 8000626:	0a64      	lsrs	r4, r4, #9
 8000628:	1c0f      	adds	r7, r1, #0
 800062a:	0e2d      	lsrs	r5, r5, #24
 800062c:	0fc6      	lsrs	r6, r0, #31
 800062e:	2d00      	cmp	r5, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fmul+0x1c>
 8000632:	e08d      	b.n	8000750 <__aeabi_fmul+0x138>
 8000634:	2dff      	cmp	r5, #255	; 0xff
 8000636:	d100      	bne.n	800063a <__aeabi_fmul+0x22>
 8000638:	e092      	b.n	8000760 <__aeabi_fmul+0x148>
 800063a:	2300      	movs	r3, #0
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	4699      	mov	r9, r3
 8000640:	469a      	mov	sl, r3
 8000642:	00e4      	lsls	r4, r4, #3
 8000644:	04c0      	lsls	r0, r0, #19
 8000646:	4304      	orrs	r4, r0
 8000648:	3d7f      	subs	r5, #127	; 0x7f
 800064a:	0278      	lsls	r0, r7, #9
 800064c:	0a43      	lsrs	r3, r0, #9
 800064e:	4698      	mov	r8, r3
 8000650:	007b      	lsls	r3, r7, #1
 8000652:	0e1b      	lsrs	r3, r3, #24
 8000654:	0fff      	lsrs	r7, r7, #31
 8000656:	2b00      	cmp	r3, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fmul+0x44>
 800065a:	e070      	b.n	800073e <__aeabi_fmul+0x126>
 800065c:	2bff      	cmp	r3, #255	; 0xff
 800065e:	d100      	bne.n	8000662 <__aeabi_fmul+0x4a>
 8000660:	e086      	b.n	8000770 <__aeabi_fmul+0x158>
 8000662:	4642      	mov	r2, r8
 8000664:	00d0      	lsls	r0, r2, #3
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	3b7f      	subs	r3, #127	; 0x7f
 800066a:	18ed      	adds	r5, r5, r3
 800066c:	2300      	movs	r3, #0
 800066e:	04d2      	lsls	r2, r2, #19
 8000670:	4302      	orrs	r2, r0
 8000672:	4690      	mov	r8, r2
 8000674:	469c      	mov	ip, r3
 8000676:	0031      	movs	r1, r6
 8000678:	464b      	mov	r3, r9
 800067a:	4079      	eors	r1, r7
 800067c:	1c68      	adds	r0, r5, #1
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d81c      	bhi.n	80006bc <__aeabi_fmul+0xa4>
 8000682:	4a76      	ldr	r2, [pc, #472]	; (800085c <__aeabi_fmul+0x244>)
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	58d3      	ldr	r3, [r2, r3]
 8000688:	469f      	mov	pc, r3
 800068a:	0039      	movs	r1, r7
 800068c:	4644      	mov	r4, r8
 800068e:	46e2      	mov	sl, ip
 8000690:	4653      	mov	r3, sl
 8000692:	2b02      	cmp	r3, #2
 8000694:	d00f      	beq.n	80006b6 <__aeabi_fmul+0x9e>
 8000696:	2b03      	cmp	r3, #3
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x84>
 800069a:	e0d7      	b.n	800084c <__aeabi_fmul+0x234>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d137      	bne.n	8000710 <__aeabi_fmul+0xf8>
 80006a0:	2000      	movs	r0, #0
 80006a2:	2400      	movs	r4, #0
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	4320      	orrs	r0, r4
 80006a8:	07c9      	lsls	r1, r1, #31
 80006aa:	4308      	orrs	r0, r1
 80006ac:	bce0      	pop	{r5, r6, r7}
 80006ae:	46ba      	mov	sl, r7
 80006b0:	46b1      	mov	r9, r6
 80006b2:	46a8      	mov	r8, r5
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	2400      	movs	r4, #0
 80006ba:	e7f3      	b.n	80006a4 <__aeabi_fmul+0x8c>
 80006bc:	0c26      	lsrs	r6, r4, #16
 80006be:	0424      	lsls	r4, r4, #16
 80006c0:	0c22      	lsrs	r2, r4, #16
 80006c2:	4644      	mov	r4, r8
 80006c4:	0424      	lsls	r4, r4, #16
 80006c6:	0c24      	lsrs	r4, r4, #16
 80006c8:	4643      	mov	r3, r8
 80006ca:	0027      	movs	r7, r4
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	4357      	muls	r7, r2
 80006d0:	4374      	muls	r4, r6
 80006d2:	435a      	muls	r2, r3
 80006d4:	435e      	muls	r6, r3
 80006d6:	1912      	adds	r2, r2, r4
 80006d8:	0c3b      	lsrs	r3, r7, #16
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	429c      	cmp	r4, r3
 80006de:	d903      	bls.n	80006e8 <__aeabi_fmul+0xd0>
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0252      	lsls	r2, r2, #9
 80006e4:	4694      	mov	ip, r2
 80006e6:	4466      	add	r6, ip
 80006e8:	043f      	lsls	r7, r7, #16
 80006ea:	041a      	lsls	r2, r3, #16
 80006ec:	0c3f      	lsrs	r7, r7, #16
 80006ee:	19d2      	adds	r2, r2, r7
 80006f0:	0194      	lsls	r4, r2, #6
 80006f2:	1e67      	subs	r7, r4, #1
 80006f4:	41bc      	sbcs	r4, r7
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	0e92      	lsrs	r2, r2, #26
 80006fa:	199b      	adds	r3, r3, r6
 80006fc:	4314      	orrs	r4, r2
 80006fe:	019b      	lsls	r3, r3, #6
 8000700:	431c      	orrs	r4, r3
 8000702:	011b      	lsls	r3, r3, #4
 8000704:	d400      	bmi.n	8000708 <__aeabi_fmul+0xf0>
 8000706:	e09b      	b.n	8000840 <__aeabi_fmul+0x228>
 8000708:	2301      	movs	r3, #1
 800070a:	0862      	lsrs	r2, r4, #1
 800070c:	401c      	ands	r4, r3
 800070e:	4314      	orrs	r4, r2
 8000710:	0002      	movs	r2, r0
 8000712:	327f      	adds	r2, #127	; 0x7f
 8000714:	2a00      	cmp	r2, #0
 8000716:	dd64      	ble.n	80007e2 <__aeabi_fmul+0x1ca>
 8000718:	0763      	lsls	r3, r4, #29
 800071a:	d004      	beq.n	8000726 <__aeabi_fmul+0x10e>
 800071c:	230f      	movs	r3, #15
 800071e:	4023      	ands	r3, r4
 8000720:	2b04      	cmp	r3, #4
 8000722:	d000      	beq.n	8000726 <__aeabi_fmul+0x10e>
 8000724:	3404      	adds	r4, #4
 8000726:	0123      	lsls	r3, r4, #4
 8000728:	d503      	bpl.n	8000732 <__aeabi_fmul+0x11a>
 800072a:	0002      	movs	r2, r0
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <__aeabi_fmul+0x248>)
 800072e:	3280      	adds	r2, #128	; 0x80
 8000730:	401c      	ands	r4, r3
 8000732:	2afe      	cmp	r2, #254	; 0xfe
 8000734:	dcbf      	bgt.n	80006b6 <__aeabi_fmul+0x9e>
 8000736:	01a4      	lsls	r4, r4, #6
 8000738:	0a64      	lsrs	r4, r4, #9
 800073a:	b2d0      	uxtb	r0, r2
 800073c:	e7b2      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800073e:	4643      	mov	r3, r8
 8000740:	2b00      	cmp	r3, #0
 8000742:	d13d      	bne.n	80007c0 <__aeabi_fmul+0x1a8>
 8000744:	464a      	mov	r2, r9
 8000746:	3301      	adds	r3, #1
 8000748:	431a      	orrs	r2, r3
 800074a:	4691      	mov	r9, r2
 800074c:	469c      	mov	ip, r3
 800074e:	e792      	b.n	8000676 <__aeabi_fmul+0x5e>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d129      	bne.n	80007a8 <__aeabi_fmul+0x190>
 8000754:	2304      	movs	r3, #4
 8000756:	4699      	mov	r9, r3
 8000758:	3b03      	subs	r3, #3
 800075a:	2500      	movs	r5, #0
 800075c:	469a      	mov	sl, r3
 800075e:	e774      	b.n	800064a <__aeabi_fmul+0x32>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d11b      	bne.n	800079c <__aeabi_fmul+0x184>
 8000764:	2308      	movs	r3, #8
 8000766:	4699      	mov	r9, r3
 8000768:	3b06      	subs	r3, #6
 800076a:	25ff      	movs	r5, #255	; 0xff
 800076c:	469a      	mov	sl, r3
 800076e:	e76c      	b.n	800064a <__aeabi_fmul+0x32>
 8000770:	4643      	mov	r3, r8
 8000772:	35ff      	adds	r5, #255	; 0xff
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10b      	bne.n	8000790 <__aeabi_fmul+0x178>
 8000778:	2302      	movs	r3, #2
 800077a:	464a      	mov	r2, r9
 800077c:	431a      	orrs	r2, r3
 800077e:	4691      	mov	r9, r2
 8000780:	469c      	mov	ip, r3
 8000782:	e778      	b.n	8000676 <__aeabi_fmul+0x5e>
 8000784:	4653      	mov	r3, sl
 8000786:	0031      	movs	r1, r6
 8000788:	2b02      	cmp	r3, #2
 800078a:	d000      	beq.n	800078e <__aeabi_fmul+0x176>
 800078c:	e783      	b.n	8000696 <__aeabi_fmul+0x7e>
 800078e:	e792      	b.n	80006b6 <__aeabi_fmul+0x9e>
 8000790:	2303      	movs	r3, #3
 8000792:	464a      	mov	r2, r9
 8000794:	431a      	orrs	r2, r3
 8000796:	4691      	mov	r9, r2
 8000798:	469c      	mov	ip, r3
 800079a:	e76c      	b.n	8000676 <__aeabi_fmul+0x5e>
 800079c:	230c      	movs	r3, #12
 800079e:	4699      	mov	r9, r3
 80007a0:	3b09      	subs	r3, #9
 80007a2:	25ff      	movs	r5, #255	; 0xff
 80007a4:	469a      	mov	sl, r3
 80007a6:	e750      	b.n	800064a <__aeabi_fmul+0x32>
 80007a8:	0020      	movs	r0, r4
 80007aa:	f000 fab9 	bl	8000d20 <__clzsi2>
 80007ae:	2576      	movs	r5, #118	; 0x76
 80007b0:	1f43      	subs	r3, r0, #5
 80007b2:	409c      	lsls	r4, r3
 80007b4:	2300      	movs	r3, #0
 80007b6:	426d      	negs	r5, r5
 80007b8:	4699      	mov	r9, r3
 80007ba:	469a      	mov	sl, r3
 80007bc:	1a2d      	subs	r5, r5, r0
 80007be:	e744      	b.n	800064a <__aeabi_fmul+0x32>
 80007c0:	4640      	mov	r0, r8
 80007c2:	f000 faad 	bl	8000d20 <__clzsi2>
 80007c6:	4642      	mov	r2, r8
 80007c8:	1f43      	subs	r3, r0, #5
 80007ca:	409a      	lsls	r2, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	1a2d      	subs	r5, r5, r0
 80007d0:	4690      	mov	r8, r2
 80007d2:	469c      	mov	ip, r3
 80007d4:	3d76      	subs	r5, #118	; 0x76
 80007d6:	e74e      	b.n	8000676 <__aeabi_fmul+0x5e>
 80007d8:	2480      	movs	r4, #128	; 0x80
 80007da:	2100      	movs	r1, #0
 80007dc:	20ff      	movs	r0, #255	; 0xff
 80007de:	03e4      	lsls	r4, r4, #15
 80007e0:	e760      	b.n	80006a4 <__aeabi_fmul+0x8c>
 80007e2:	2301      	movs	r3, #1
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	2b1b      	cmp	r3, #27
 80007e8:	dd00      	ble.n	80007ec <__aeabi_fmul+0x1d4>
 80007ea:	e759      	b.n	80006a0 <__aeabi_fmul+0x88>
 80007ec:	0022      	movs	r2, r4
 80007ee:	309e      	adds	r0, #158	; 0x9e
 80007f0:	40da      	lsrs	r2, r3
 80007f2:	4084      	lsls	r4, r0
 80007f4:	0013      	movs	r3, r2
 80007f6:	1e62      	subs	r2, r4, #1
 80007f8:	4194      	sbcs	r4, r2
 80007fa:	431c      	orrs	r4, r3
 80007fc:	0763      	lsls	r3, r4, #29
 80007fe:	d004      	beq.n	800080a <__aeabi_fmul+0x1f2>
 8000800:	230f      	movs	r3, #15
 8000802:	4023      	ands	r3, r4
 8000804:	2b04      	cmp	r3, #4
 8000806:	d000      	beq.n	800080a <__aeabi_fmul+0x1f2>
 8000808:	3404      	adds	r4, #4
 800080a:	0163      	lsls	r3, r4, #5
 800080c:	d51a      	bpl.n	8000844 <__aeabi_fmul+0x22c>
 800080e:	2001      	movs	r0, #1
 8000810:	2400      	movs	r4, #0
 8000812:	e747      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	03c0      	lsls	r0, r0, #15
 8000818:	4204      	tst	r4, r0
 800081a:	d009      	beq.n	8000830 <__aeabi_fmul+0x218>
 800081c:	4643      	mov	r3, r8
 800081e:	4203      	tst	r3, r0
 8000820:	d106      	bne.n	8000830 <__aeabi_fmul+0x218>
 8000822:	4644      	mov	r4, r8
 8000824:	4304      	orrs	r4, r0
 8000826:	0264      	lsls	r4, r4, #9
 8000828:	0039      	movs	r1, r7
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	e739      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	03c0      	lsls	r0, r0, #15
 8000834:	4304      	orrs	r4, r0
 8000836:	0264      	lsls	r4, r4, #9
 8000838:	0031      	movs	r1, r6
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	0a64      	lsrs	r4, r4, #9
 800083e:	e731      	b.n	80006a4 <__aeabi_fmul+0x8c>
 8000840:	0028      	movs	r0, r5
 8000842:	e765      	b.n	8000710 <__aeabi_fmul+0xf8>
 8000844:	01a4      	lsls	r4, r4, #6
 8000846:	2000      	movs	r0, #0
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	e72b      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800084c:	2080      	movs	r0, #128	; 0x80
 800084e:	03c0      	lsls	r0, r0, #15
 8000850:	4304      	orrs	r4, r0
 8000852:	0264      	lsls	r4, r4, #9
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	0a64      	lsrs	r4, r4, #9
 8000858:	e724      	b.n	80006a4 <__aeabi_fmul+0x8c>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	080047fc 	.word	0x080047fc
 8000860:	f7ffffff 	.word	0xf7ffffff

08000864 <__aeabi_fsub>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	46ce      	mov	lr, r9
 8000868:	4647      	mov	r7, r8
 800086a:	0243      	lsls	r3, r0, #9
 800086c:	0a5b      	lsrs	r3, r3, #9
 800086e:	024e      	lsls	r6, r1, #9
 8000870:	00da      	lsls	r2, r3, #3
 8000872:	4694      	mov	ip, r2
 8000874:	0a72      	lsrs	r2, r6, #9
 8000876:	4691      	mov	r9, r2
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	004a      	lsls	r2, r1, #1
 800087c:	b580      	push	{r7, lr}
 800087e:	0e2d      	lsrs	r5, r5, #24
 8000880:	001f      	movs	r7, r3
 8000882:	0fc4      	lsrs	r4, r0, #31
 8000884:	0e12      	lsrs	r2, r2, #24
 8000886:	0fc9      	lsrs	r1, r1, #31
 8000888:	09b6      	lsrs	r6, r6, #6
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d05b      	beq.n	8000946 <__aeabi_fsub+0xe2>
 800088e:	2001      	movs	r0, #1
 8000890:	4041      	eors	r1, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d039      	beq.n	800090a <__aeabi_fsub+0xa6>
 8000896:	1aa8      	subs	r0, r5, r2
 8000898:	2800      	cmp	r0, #0
 800089a:	dd5a      	ble.n	8000952 <__aeabi_fsub+0xee>
 800089c:	2a00      	cmp	r2, #0
 800089e:	d06a      	beq.n	8000976 <__aeabi_fsub+0x112>
 80008a0:	2dff      	cmp	r5, #255	; 0xff
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x42>
 80008a4:	e0d9      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	04d2      	lsls	r2, r2, #19
 80008aa:	4316      	orrs	r6, r2
 80008ac:	281b      	cmp	r0, #27
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_fsub+0x4e>
 80008b0:	e0e9      	b.n	8000a86 <__aeabi_fsub+0x222>
 80008b2:	2001      	movs	r0, #1
 80008b4:	4663      	mov	r3, ip
 80008b6:	1a18      	subs	r0, r3, r0
 80008b8:	0143      	lsls	r3, r0, #5
 80008ba:	d400      	bmi.n	80008be <__aeabi_fsub+0x5a>
 80008bc:	e0b4      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 80008be:	0180      	lsls	r0, r0, #6
 80008c0:	0987      	lsrs	r7, r0, #6
 80008c2:	0038      	movs	r0, r7
 80008c4:	f000 fa2c 	bl	8000d20 <__clzsi2>
 80008c8:	3805      	subs	r0, #5
 80008ca:	4087      	lsls	r7, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x6e>
 80008d0:	e0cc      	b.n	8000a6c <__aeabi_fsub+0x208>
 80008d2:	1a2d      	subs	r5, r5, r0
 80008d4:	48b5      	ldr	r0, [pc, #724]	; (8000bac <__aeabi_fsub+0x348>)
 80008d6:	4038      	ands	r0, r7
 80008d8:	0743      	lsls	r3, r0, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008dc:	230f      	movs	r3, #15
 80008de:	4003      	ands	r3, r0
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008e4:	3004      	adds	r0, #4
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fsub+0x88>
 80008ea:	e0a0      	b.n	8000a2e <__aeabi_fsub+0x1ca>
 80008ec:	1c6a      	adds	r2, r5, #1
 80008ee:	2dfe      	cmp	r5, #254	; 0xfe
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x90>
 80008f2:	e08d      	b.n	8000a10 <__aeabi_fsub+0x1ac>
 80008f4:	0180      	lsls	r0, r0, #6
 80008f6:	0a47      	lsrs	r7, r0, #9
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	05d0      	lsls	r0, r2, #23
 80008fc:	4338      	orrs	r0, r7
 80008fe:	07e4      	lsls	r4, r4, #31
 8000900:	4320      	orrs	r0, r4
 8000902:	bcc0      	pop	{r6, r7}
 8000904:	46b9      	mov	r9, r7
 8000906:	46b0      	mov	r8, r6
 8000908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090a:	1aa8      	subs	r0, r5, r2
 800090c:	4680      	mov	r8, r0
 800090e:	2800      	cmp	r0, #0
 8000910:	dd45      	ble.n	800099e <__aeabi_fsub+0x13a>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d070      	beq.n	80009f8 <__aeabi_fsub+0x194>
 8000916:	2dff      	cmp	r5, #255	; 0xff
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0xb8>
 800091a:	e09e      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	431e      	orrs	r6, r3
 8000922:	4643      	mov	r3, r8
 8000924:	2b1b      	cmp	r3, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0xc6>
 8000928:	e0d2      	b.n	8000ad0 <__aeabi_fsub+0x26c>
 800092a:	2001      	movs	r0, #1
 800092c:	4460      	add	r0, ip
 800092e:	0143      	lsls	r3, r0, #5
 8000930:	d57a      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000932:	3501      	adds	r5, #1
 8000934:	2dff      	cmp	r5, #255	; 0xff
 8000936:	d06b      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000938:	2301      	movs	r3, #1
 800093a:	4a9d      	ldr	r2, [pc, #628]	; (8000bb0 <__aeabi_fsub+0x34c>)
 800093c:	4003      	ands	r3, r0
 800093e:	0840      	lsrs	r0, r0, #1
 8000940:	4010      	ands	r0, r2
 8000942:	4318      	orrs	r0, r3
 8000944:	e7c8      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d020      	beq.n	800098c <__aeabi_fsub+0x128>
 800094a:	428c      	cmp	r4, r1
 800094c:	d023      	beq.n	8000996 <__aeabi_fsub+0x132>
 800094e:	0028      	movs	r0, r5
 8000950:	38ff      	subs	r0, #255	; 0xff
 8000952:	2800      	cmp	r0, #0
 8000954:	d039      	beq.n	80009ca <__aeabi_fsub+0x166>
 8000956:	1b57      	subs	r7, r2, r5
 8000958:	2d00      	cmp	r5, #0
 800095a:	d000      	beq.n	800095e <__aeabi_fsub+0xfa>
 800095c:	e09d      	b.n	8000a9a <__aeabi_fsub+0x236>
 800095e:	4663      	mov	r3, ip
 8000960:	2b00      	cmp	r3, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x102>
 8000964:	e0db      	b.n	8000b1e <__aeabi_fsub+0x2ba>
 8000966:	1e7b      	subs	r3, r7, #1
 8000968:	2f01      	cmp	r7, #1
 800096a:	d100      	bne.n	800096e <__aeabi_fsub+0x10a>
 800096c:	e10d      	b.n	8000b8a <__aeabi_fsub+0x326>
 800096e:	2fff      	cmp	r7, #255	; 0xff
 8000970:	d071      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000972:	001f      	movs	r7, r3
 8000974:	e098      	b.n	8000aa8 <__aeabi_fsub+0x244>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fsub+0x118>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x268>
 800097c:	1e42      	subs	r2, r0, #1
 800097e:	2801      	cmp	r0, #1
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x120>
 8000982:	e0e6      	b.n	8000b52 <__aeabi_fsub+0x2ee>
 8000984:	28ff      	cmp	r0, #255	; 0xff
 8000986:	d068      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000988:	0010      	movs	r0, r2
 800098a:	e78f      	b.n	80008ac <__aeabi_fsub+0x48>
 800098c:	2001      	movs	r0, #1
 800098e:	4041      	eors	r1, r0
 8000990:	42a1      	cmp	r1, r4
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x132>
 8000994:	e77f      	b.n	8000896 <__aeabi_fsub+0x32>
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	4240      	negs	r0, r0
 800099a:	4680      	mov	r8, r0
 800099c:	44a8      	add	r8, r5
 800099e:	4640      	mov	r0, r8
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d038      	beq.n	8000a16 <__aeabi_fsub+0x1b2>
 80009a4:	1b51      	subs	r1, r2, r5
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x148>
 80009aa:	e0ae      	b.n	8000b0a <__aeabi_fsub+0x2a6>
 80009ac:	2aff      	cmp	r2, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x14e>
 80009b0:	e0df      	b.n	8000b72 <__aeabi_fsub+0x30e>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	4660      	mov	r0, ip
 80009b6:	04db      	lsls	r3, r3, #19
 80009b8:	4318      	orrs	r0, r3
 80009ba:	4684      	mov	ip, r0
 80009bc:	291b      	cmp	r1, #27
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x15e>
 80009c0:	e0d9      	b.n	8000b76 <__aeabi_fsub+0x312>
 80009c2:	2001      	movs	r0, #1
 80009c4:	0015      	movs	r5, r2
 80009c6:	1980      	adds	r0, r0, r6
 80009c8:	e7b1      	b.n	800092e <__aeabi_fsub+0xca>
 80009ca:	20fe      	movs	r0, #254	; 0xfe
 80009cc:	1c6a      	adds	r2, r5, #1
 80009ce:	4210      	tst	r0, r2
 80009d0:	d171      	bne.n	8000ab6 <__aeabi_fsub+0x252>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fsub+0x174>
 80009d6:	e0a6      	b.n	8000b26 <__aeabi_fsub+0x2c2>
 80009d8:	4663      	mov	r3, ip
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fsub+0x17c>
 80009de:	e0d9      	b.n	8000b94 <__aeabi_fsub+0x330>
 80009e0:	2200      	movs	r2, #0
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fsub+0x184>
 80009e6:	e788      	b.n	80008fa <__aeabi_fsub+0x96>
 80009e8:	1b98      	subs	r0, r3, r6
 80009ea:	0143      	lsls	r3, r0, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fsub+0x18c>
 80009ee:	e0e1      	b.n	8000bb4 <__aeabi_fsub+0x350>
 80009f0:	4663      	mov	r3, ip
 80009f2:	000c      	movs	r4, r1
 80009f4:	1af0      	subs	r0, r6, r3
 80009f6:	e76f      	b.n	80008d8 <__aeabi_fsub+0x74>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x19a>
 80009fc:	e0b7      	b.n	8000b6e <__aeabi_fsub+0x30a>
 80009fe:	0002      	movs	r2, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x1a4>
 8000a06:	e09c      	b.n	8000b42 <__aeabi_fsub+0x2de>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d026      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	e788      	b.n	8000922 <__aeabi_fsub+0xbe>
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	2700      	movs	r7, #0
 8000a14:	e771      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a16:	20fe      	movs	r0, #254	; 0xfe
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	4210      	tst	r0, r2
 8000a1c:	d064      	beq.n	8000ae8 <__aeabi_fsub+0x284>
 8000a1e:	2aff      	cmp	r2, #255	; 0xff
 8000a20:	d0f6      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a22:	0015      	movs	r5, r2
 8000a24:	4466      	add	r6, ip
 8000a26:	0870      	lsrs	r0, r6, #1
 8000a28:	0743      	lsls	r3, r0, #29
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fsub+0x1ca>
 8000a2c:	e756      	b.n	80008dc <__aeabi_fsub+0x78>
 8000a2e:	08c3      	lsrs	r3, r0, #3
 8000a30:	2dff      	cmp	r5, #255	; 0xff
 8000a32:	d012      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	0a5f      	lsrs	r7, r3, #9
 8000a38:	b2ea      	uxtb	r2, r5
 8000a3a:	e75e      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000a42:	e096      	b.n	8000b72 <__aeabi_fsub+0x30e>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d008      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	03d2      	lsls	r2, r2, #15
 8000a4c:	4213      	tst	r3, r2
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a50:	4648      	mov	r0, r9
 8000a52:	4210      	tst	r0, r2
 8000a54:	d101      	bne.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a56:	000c      	movs	r4, r1
 8000a58:	464b      	mov	r3, r9
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0d8      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a5e:	2780      	movs	r7, #128	; 0x80
 8000a60:	03ff      	lsls	r7, r7, #15
 8000a62:	431f      	orrs	r7, r3
 8000a64:	027f      	lsls	r7, r7, #9
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	0a7f      	lsrs	r7, r7, #9
 8000a6a:	e746      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	003a      	movs	r2, r7
 8000a70:	1b45      	subs	r5, r0, r5
 8000a72:	0038      	movs	r0, r7
 8000a74:	3501      	adds	r5, #1
 8000a76:	40ea      	lsrs	r2, r5
 8000a78:	1b5d      	subs	r5, r3, r5
 8000a7a:	40a8      	lsls	r0, r5
 8000a7c:	1e43      	subs	r3, r0, #1
 8000a7e:	4198      	sbcs	r0, r3
 8000a80:	2500      	movs	r5, #0
 8000a82:	4310      	orrs	r0, r2
 8000a84:	e728      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000a86:	2320      	movs	r3, #32
 8000a88:	1a1b      	subs	r3, r3, r0
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	409e      	lsls	r6, r3
 8000a8e:	40c2      	lsrs	r2, r0
 8000a90:	0030      	movs	r0, r6
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	4310      	orrs	r0, r2
 8000a98:	e70c      	b.n	80008b4 <__aeabi_fsub+0x50>
 8000a9a:	2aff      	cmp	r2, #255	; 0xff
 8000a9c:	d0db      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	4660      	mov	r0, ip
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	4684      	mov	ip, r0
 8000aa8:	2f1b      	cmp	r7, #27
 8000aaa:	dd56      	ble.n	8000b5a <__aeabi_fsub+0x2f6>
 8000aac:	2001      	movs	r0, #1
 8000aae:	000c      	movs	r4, r1
 8000ab0:	0015      	movs	r5, r2
 8000ab2:	1a30      	subs	r0, r6, r0
 8000ab4:	e700      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	1b9f      	subs	r7, r3, r6
 8000aba:	017b      	lsls	r3, r7, #5
 8000abc:	d43d      	bmi.n	8000b3a <__aeabi_fsub+0x2d6>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000ac2:	e6fe      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2700      	movs	r7, #0
 8000aca:	e716      	b.n	80008fa <__aeabi_fsub+0x96>
 8000acc:	0005      	movs	r5, r0
 8000ace:	e7af      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ad0:	0032      	movs	r2, r6
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	4641      	mov	r1, r8
 8000ad6:	40da      	lsrs	r2, r3
 8000ad8:	2320      	movs	r3, #32
 8000ada:	1a5b      	subs	r3, r3, r1
 8000adc:	409e      	lsls	r6, r3
 8000ade:	0030      	movs	r0, r6
 8000ae0:	1e43      	subs	r3, r0, #1
 8000ae2:	4198      	sbcs	r0, r3
 8000ae4:	4310      	orrs	r0, r2
 8000ae6:	e721      	b.n	800092c <__aeabi_fsub+0xc8>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1a7      	bne.n	8000a3c <__aeabi_fsub+0x1d8>
 8000aec:	4663      	mov	r3, ip
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d059      	beq.n	8000ba6 <__aeabi_fsub+0x342>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x296>
 8000af8:	e6ff      	b.n	80008fa <__aeabi_fsub+0x96>
 8000afa:	0030      	movs	r0, r6
 8000afc:	4460      	add	r0, ip
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d592      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <__aeabi_fsub+0x348>)
 8000b04:	3501      	adds	r5, #1
 8000b06:	4018      	ands	r0, r3
 8000b08:	e78e      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d047      	beq.n	8000ba0 <__aeabi_fsub+0x33c>
 8000b10:	1e4b      	subs	r3, r1, #1
 8000b12:	2901      	cmp	r1, #1
 8000b14:	d015      	beq.n	8000b42 <__aeabi_fsub+0x2de>
 8000b16:	29ff      	cmp	r1, #255	; 0xff
 8000b18:	d02b      	beq.n	8000b72 <__aeabi_fsub+0x30e>
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	e74e      	b.n	80009bc <__aeabi_fsub+0x158>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	464b      	mov	r3, r9
 8000b22:	003d      	movs	r5, r7
 8000b24:	e784      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b26:	4662      	mov	r2, ip
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d18b      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d192      	bne.n	8000a56 <__aeabi_fsub+0x1f2>
 8000b30:	2780      	movs	r7, #128	; 0x80
 8000b32:	2400      	movs	r4, #0
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	03ff      	lsls	r7, r7, #15
 8000b38:	e6df      	b.n	80008fa <__aeabi_fsub+0x96>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	1af7      	subs	r7, r6, r3
 8000b40:	e6bf      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000b42:	0030      	movs	r0, r6
 8000b44:	4460      	add	r0, ip
 8000b46:	2501      	movs	r5, #1
 8000b48:	0143      	lsls	r3, r0, #5
 8000b4a:	d400      	bmi.n	8000b4e <__aeabi_fsub+0x2ea>
 8000b4c:	e76c      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b4e:	2502      	movs	r5, #2
 8000b50:	e6f2      	b.n	8000938 <__aeabi_fsub+0xd4>
 8000b52:	4663      	mov	r3, ip
 8000b54:	2501      	movs	r5, #1
 8000b56:	1b98      	subs	r0, r3, r6
 8000b58:	e6ae      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	4664      	mov	r4, ip
 8000b5e:	4660      	mov	r0, ip
 8000b60:	40fc      	lsrs	r4, r7
 8000b62:	1bdf      	subs	r7, r3, r7
 8000b64:	40b8      	lsls	r0, r7
 8000b66:	1e43      	subs	r3, r0, #1
 8000b68:	4198      	sbcs	r0, r3
 8000b6a:	4320      	orrs	r0, r4
 8000b6c:	e79f      	b.n	8000aae <__aeabi_fsub+0x24a>
 8000b6e:	0005      	movs	r5, r0
 8000b70:	e75e      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b72:	464b      	mov	r3, r9
 8000b74:	e771      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 8000b76:	2320      	movs	r3, #32
 8000b78:	4665      	mov	r5, ip
 8000b7a:	4660      	mov	r0, ip
 8000b7c:	40cd      	lsrs	r5, r1
 8000b7e:	1a59      	subs	r1, r3, r1
 8000b80:	4088      	lsls	r0, r1
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
 8000b86:	4328      	orrs	r0, r5
 8000b88:	e71c      	b.n	80009c4 <__aeabi_fsub+0x160>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	000c      	movs	r4, r1
 8000b8e:	2501      	movs	r5, #1
 8000b90:	1af0      	subs	r0, r6, r3
 8000b92:	e691      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d095      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000b98:	000c      	movs	r4, r1
 8000b9a:	464f      	mov	r7, r9
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e6ac      	b.n	80008fa <__aeabi_fsub+0x96>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	000d      	movs	r5, r1
 8000ba4:	e744      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	2200      	movs	r2, #0
 8000baa:	e6a6      	b.n	80008fa <__aeabi_fsub+0x96>
 8000bac:	fbffffff 	.word	0xfbffffff
 8000bb0:	7dffffff 	.word	0x7dffffff
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fsub+0x356>
 8000bb8:	e736      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e69c      	b.n	80008fa <__aeabi_fsub+0x96>

08000bc0 <__aeabi_f2iz>:
 8000bc0:	0241      	lsls	r1, r0, #9
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0fc3      	lsrs	r3, r0, #31
 8000bc6:	0a49      	lsrs	r1, r1, #9
 8000bc8:	2000      	movs	r0, #0
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000bce:	dd03      	ble.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000bd2:	dd02      	ble.n	8000bda <__aeabi_f2iz+0x1a>
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <__aeabi_f2iz+0x3c>)
 8000bd6:	1898      	adds	r0, r3, r2
 8000bd8:	4770      	bx	lr
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0400      	lsls	r0, r0, #16
 8000bde:	4301      	orrs	r1, r0
 8000be0:	2a95      	cmp	r2, #149	; 0x95
 8000be2:	dc07      	bgt.n	8000bf4 <__aeabi_f2iz+0x34>
 8000be4:	2096      	movs	r0, #150	; 0x96
 8000be6:	1a82      	subs	r2, r0, r2
 8000be8:	40d1      	lsrs	r1, r2
 8000bea:	4248      	negs	r0, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f3      	bne.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	e7f1      	b.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf4:	3a96      	subs	r2, #150	; 0x96
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	e7f7      	b.n	8000bea <__aeabi_f2iz+0x2a>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7fffffff 	.word	0x7fffffff

08000c00 <__aeabi_i2f>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d013      	beq.n	8000c2e <__aeabi_i2f+0x2e>
 8000c06:	17c3      	asrs	r3, r0, #31
 8000c08:	18c6      	adds	r6, r0, r3
 8000c0a:	405e      	eors	r6, r3
 8000c0c:	0fc4      	lsrs	r4, r0, #31
 8000c0e:	0030      	movs	r0, r6
 8000c10:	f000 f886 	bl	8000d20 <__clzsi2>
 8000c14:	239e      	movs	r3, #158	; 0x9e
 8000c16:	0005      	movs	r5, r0
 8000c18:	1a1b      	subs	r3, r3, r0
 8000c1a:	2b96      	cmp	r3, #150	; 0x96
 8000c1c:	dc0f      	bgt.n	8000c3e <__aeabi_i2f+0x3e>
 8000c1e:	2808      	cmp	r0, #8
 8000c20:	dd01      	ble.n	8000c26 <__aeabi_i2f+0x26>
 8000c22:	3d08      	subs	r5, #8
 8000c24:	40ae      	lsls	r6, r5
 8000c26:	0276      	lsls	r6, r6, #9
 8000c28:	0a76      	lsrs	r6, r6, #9
 8000c2a:	b2d8      	uxtb	r0, r3
 8000c2c:	e002      	b.n	8000c34 <__aeabi_i2f+0x34>
 8000c2e:	2400      	movs	r4, #0
 8000c30:	2000      	movs	r0, #0
 8000c32:	2600      	movs	r6, #0
 8000c34:	05c0      	lsls	r0, r0, #23
 8000c36:	4330      	orrs	r0, r6
 8000c38:	07e4      	lsls	r4, r4, #31
 8000c3a:	4320      	orrs	r0, r4
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3e:	2b99      	cmp	r3, #153	; 0x99
 8000c40:	dd0c      	ble.n	8000c5c <__aeabi_i2f+0x5c>
 8000c42:	2205      	movs	r2, #5
 8000c44:	0031      	movs	r1, r6
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	40d1      	lsrs	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	0001      	movs	r1, r0
 8000c4e:	0030      	movs	r0, r6
 8000c50:	311b      	adds	r1, #27
 8000c52:	4088      	lsls	r0, r1
 8000c54:	1e41      	subs	r1, r0, #1
 8000c56:	4188      	sbcs	r0, r1
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	0016      	movs	r6, r2
 8000c5c:	2d05      	cmp	r5, #5
 8000c5e:	dc12      	bgt.n	8000c86 <__aeabi_i2f+0x86>
 8000c60:	0031      	movs	r1, r6
 8000c62:	4f0d      	ldr	r7, [pc, #52]	; (8000c98 <__aeabi_i2f+0x98>)
 8000c64:	4039      	ands	r1, r7
 8000c66:	0772      	lsls	r2, r6, #29
 8000c68:	d009      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	4030      	ands	r0, r6
 8000c6e:	2804      	cmp	r0, #4
 8000c70:	d005      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c72:	3104      	adds	r1, #4
 8000c74:	014a      	lsls	r2, r1, #5
 8000c76:	d502      	bpl.n	8000c7e <__aeabi_i2f+0x7e>
 8000c78:	239f      	movs	r3, #159	; 0x9f
 8000c7a:	4039      	ands	r1, r7
 8000c7c:	1b5b      	subs	r3, r3, r5
 8000c7e:	0189      	lsls	r1, r1, #6
 8000c80:	0a4e      	lsrs	r6, r1, #9
 8000c82:	b2d8      	uxtb	r0, r3
 8000c84:	e7d6      	b.n	8000c34 <__aeabi_i2f+0x34>
 8000c86:	1f6a      	subs	r2, r5, #5
 8000c88:	4096      	lsls	r6, r2
 8000c8a:	0031      	movs	r1, r6
 8000c8c:	4f02      	ldr	r7, [pc, #8]	; (8000c98 <__aeabi_i2f+0x98>)
 8000c8e:	4039      	ands	r1, r7
 8000c90:	0772      	lsls	r2, r6, #29
 8000c92:	d0f4      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c94:	e7e9      	b.n	8000c6a <__aeabi_i2f+0x6a>
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	fbffffff 	.word	0xfbffffff

08000c9c <__aeabi_ui2f>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	1e05      	subs	r5, r0, #0
 8000ca0:	d00e      	beq.n	8000cc0 <__aeabi_ui2f+0x24>
 8000ca2:	f000 f83d 	bl	8000d20 <__clzsi2>
 8000ca6:	239e      	movs	r3, #158	; 0x9e
 8000ca8:	0004      	movs	r4, r0
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	2b96      	cmp	r3, #150	; 0x96
 8000cae:	dc0c      	bgt.n	8000cca <__aeabi_ui2f+0x2e>
 8000cb0:	2808      	cmp	r0, #8
 8000cb2:	dd01      	ble.n	8000cb8 <__aeabi_ui2f+0x1c>
 8000cb4:	3c08      	subs	r4, #8
 8000cb6:	40a5      	lsls	r5, r4
 8000cb8:	026d      	lsls	r5, r5, #9
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	e001      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4328      	orrs	r0, r5
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd09      	ble.n	8000ce2 <__aeabi_ui2f+0x46>
 8000cce:	0002      	movs	r2, r0
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	321b      	adds	r2, #27
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	2205      	movs	r2, #5
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	40d5      	lsrs	r5, r2
 8000ce0:	430d      	orrs	r5, r1
 8000ce2:	2c05      	cmp	r4, #5
 8000ce4:	dc12      	bgt.n	8000d0c <__aeabi_ui2f+0x70>
 8000ce6:	0029      	movs	r1, r5
 8000ce8:	4e0c      	ldr	r6, [pc, #48]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000cea:	4031      	ands	r1, r6
 8000cec:	076a      	lsls	r2, r5, #29
 8000cee:	d009      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	4028      	ands	r0, r5
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf8:	3104      	adds	r1, #4
 8000cfa:	014a      	lsls	r2, r1, #5
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_ui2f+0x68>
 8000cfe:	239f      	movs	r3, #159	; 0x9f
 8000d00:	4031      	ands	r1, r6
 8000d02:	1b1b      	subs	r3, r3, r4
 8000d04:	0189      	lsls	r1, r1, #6
 8000d06:	0a4d      	lsrs	r5, r1, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e7db      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000d0c:	1f62      	subs	r2, r4, #5
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	0029      	movs	r1, r5
 8000d12:	4e02      	ldr	r6, [pc, #8]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000d14:	4031      	ands	r1, r6
 8000d16:	076a      	lsls	r2, r5, #29
 8000d18:	d0f4      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000d1a:	e7e9      	b.n	8000cf0 <__aeabi_ui2f+0x54>
 8000d1c:	fbffffff 	.word	0xfbffffff

08000d20 <__clzsi2>:
 8000d20:	211c      	movs	r1, #28
 8000d22:	2301      	movs	r3, #1
 8000d24:	041b      	lsls	r3, r3, #16
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d301      	bcc.n	8000d2e <__clzsi2+0xe>
 8000d2a:	0c00      	lsrs	r0, r0, #16
 8000d2c:	3910      	subs	r1, #16
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d301      	bcc.n	8000d38 <__clzsi2+0x18>
 8000d34:	0a00      	lsrs	r0, r0, #8
 8000d36:	3908      	subs	r1, #8
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d301      	bcc.n	8000d42 <__clzsi2+0x22>
 8000d3e:	0900      	lsrs	r0, r0, #4
 8000d40:	3904      	subs	r1, #4
 8000d42:	a202      	add	r2, pc, #8	; (adr r2, 8000d4c <__clzsi2+0x2c>)
 8000d44:	5c10      	ldrb	r0, [r2, r0]
 8000d46:	1840      	adds	r0, r0, r1
 8000d48:	4770      	bx	lr
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	02020304 	.word	0x02020304
 8000d50:	01010101 	.word	0x01010101
	...

08000d5c <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void)
{
  int32_t ret = BSP_ERROR_NONE;

  if (I2C1InitCounter > 0)
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <BSP_I2C1_DeInit+0x40>)
{
 8000d5e:	b510      	push	{r4, lr}
  if (I2C1InitCounter > 0)
 8000d60:	6813      	ldr	r3, [r2, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <BSP_I2C1_DeInit+0xe>
  int32_t ret = BSP_ERROR_NONE;
 8000d66:	2000      	movs	r0, #0
        ret = BSP_ERROR_BUS_FAILURE;
      }
    }
  }
  return ret;
}
 8000d68:	bd10      	pop	{r4, pc}
    if (--I2C1InitCounter == 0)
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f9      	bne.n	8000d66 <BSP_I2C1_DeInit+0xa>
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <BSP_I2C1_DeInit+0x44>)
 8000d74:	490b      	ldr	r1, [pc, #44]	; (8000da4 <BSP_I2C1_DeInit+0x48>)
 8000d76:	6bd3      	ldr	r3, [r2, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <BSP_I2C1_DeInit+0x4c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	f000 fffa 	bl	8001d78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <BSP_I2C1_DeInit+0x4c>)
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	f000 fff6 	bl	8001d78 <HAL_GPIO_DeInit>
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <BSP_I2C1_DeInit+0x50>)
 8000d8e:	f001 fa48 	bl	8002222 <HAL_I2C_DeInit>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d0e7      	beq.n	8000d66 <BSP_I2C1_DeInit+0xa>
        ret = BSP_ERROR_BUS_FAILURE;
 8000d96:	2008      	movs	r0, #8
 8000d98:	4240      	negs	r0, r0
  return ret;
 8000d9a:	e7e5      	b.n	8000d68 <BSP_I2C1_DeInit+0xc>
 8000d9c:	200000c8 	.word	0x200000c8
 8000da0:	40021000 	.word	0x40021000
 8000da4:	ffdfffff 	.word	0xffdfffff
 8000da8:	50000400 	.word	0x50000400
 8000dac:	200000cc 	.word	0x200000cc

08000db0 <BSP_I2C1_Send>:
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000db0:	0013      	movs	r3, r2
  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000db2:	2280      	movs	r2, #128	; 0x80
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000db4:	b513      	push	{r0, r1, r4, lr}
  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000db6:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <BSP_I2C1_Send+0x30>)
 8000db8:	0152      	lsls	r2, r2, #5
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	000a      	movs	r2, r1
 8000dbe:	0001      	movs	r1, r0
 8000dc0:	0020      	movs	r0, r4
 8000dc2:	f001 fa49 	bl	8002258 <HAL_I2C_Master_Transmit>
  int32_t ret = BSP_ERROR_NONE;
 8000dc6:	2300      	movs	r3, #0
  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000dc8:	4298      	cmp	r0, r3
 8000dca:	d007      	beq.n	8000ddc <BSP_I2C1_Send+0x2c>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000dcc:	0020      	movs	r0, r4
 8000dce:	f001 fb6b 	bl	80024a8 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000dd2:	2304      	movs	r3, #4
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000dd4:	2804      	cmp	r0, #4
 8000dd6:	d000      	beq.n	8000dda <BSP_I2C1_Send+0x2a>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000dd8:	2366      	movs	r3, #102	; 0x66
 8000dda:	425b      	negs	r3, r3
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	bd16      	pop	{r1, r2, r4, pc}
 8000de0:	200000cc 	.word	0x200000cc

08000de4 <BSP_I2C1_Recv>:
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000de4:	0013      	movs	r3, r2
  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000de6:	2280      	movs	r2, #128	; 0x80
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000de8:	b513      	push	{r0, r1, r4, lr}
  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000dea:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <BSP_I2C1_Recv+0x30>)
 8000dec:	0152      	lsls	r2, r2, #5
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	000a      	movs	r2, r1
 8000df2:	0001      	movs	r1, r0
 8000df4:	0020      	movs	r0, r4
 8000df6:	f001 fac1 	bl	800237c <HAL_I2C_Master_Receive>
  int32_t ret = BSP_ERROR_NONE;
 8000dfa:	2300      	movs	r3, #0
  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d007      	beq.n	8000e10 <BSP_I2C1_Recv+0x2c>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e00:	0020      	movs	r0, r4
 8000e02:	f001 fb51 	bl	80024a8 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e06:	2304      	movs	r3, #4
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e08:	2804      	cmp	r0, #4
 8000e0a:	d000      	beq.n	8000e0e <BSP_I2C1_Recv+0x2a>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e0c:	2366      	movs	r3, #102	; 0x66
 8000e0e:	425b      	negs	r3, r3
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	bd16      	pop	{r1, r2, r4, pc}
 8000e14:	200000cc 	.word	0x200000cc

08000e18 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8000e18:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000e1a:	f000 fe8f 	bl	8001b3c <HAL_GetTick>
}
 8000e1e:	bd10      	pop	{r4, pc}

08000e20 <MX_I2C1_Init>:
{
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hi2c->Init.OwnAddress1 = 0;
 8000e22:	2600      	movs	r6, #0
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	2701      	movs	r7, #1
  hi2c->Instance = I2C1;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_I2C1_Init+0x48>)
  hi2c->Init.OwnAddress1 = 0;
 8000e28:	6086      	str	r6, [r0, #8]
  hi2c->Instance = I2C1;
 8000e2a:	6003      	str	r3, [r0, #0]
  hi2c->Init.Timing = 0x00303D5B;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_I2C1_Init+0x4c>)
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2e:	60c7      	str	r7, [r0, #12]
  hi2c->Init.Timing = 0x00303D5B;
 8000e30:	6043      	str	r3, [r0, #4]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e32:	6106      	str	r6, [r0, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000e34:	6146      	str	r6, [r0, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e36:	6186      	str	r6, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	61c6      	str	r6, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	6206      	str	r6, [r0, #32]
{
 8000e3c:	0004      	movs	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000e3e:	f001 f999 	bl	8002174 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e42:	0031      	movs	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000e44:	0005      	movs	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e46:	0020      	movs	r0, r4
 8000e48:	f001 fb30 	bl	80024ac <HAL_I2CEx_ConfigAnalogFilter>
 8000e4c:	4305      	orrs	r5, r0
 8000e4e:	b2ed      	uxtb	r5, r5
 8000e50:	1e6b      	subs	r3, r5, #1
 8000e52:	419d      	sbcs	r5, r3
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000e54:	0031      	movs	r1, r6
 8000e56:	0020      	movs	r0, r4
    ret = HAL_ERROR;
 8000e58:	b2ed      	uxtb	r5, r5
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000e5a:	f001 fb4d 	bl	80024f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000e5e:	42b0      	cmp	r0, r6
 8000e60:	d000      	beq.n	8000e64 <MX_I2C1_Init+0x44>
    ret = HAL_ERROR;
 8000e62:	003d      	movs	r5, r7
}
 8000e64:	0028      	movs	r0, r5
 8000e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	00303d5b 	.word	0x00303d5b

08000e70 <BSP_I2C1_Init>:
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
  hi2c1.Instance  = I2C1;
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <BSP_I2C1_Init+0xa8>)
  if(I2C1InitCounter++ == 0)
 8000e74:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <BSP_I2C1_Init+0xac>)
  hi2c1.Instance  = I2C1;
 8000e76:	4e2a      	ldr	r6, [pc, #168]	; (8000f20 <BSP_I2C1_Init+0xb0>)
{
 8000e78:	b08f      	sub	sp, #60	; 0x3c
  hi2c1.Instance  = I2C1;
 8000e7a:	6033      	str	r3, [r6, #0]
  if(I2C1InitCounter++ == 0)
 8000e7c:	6813      	ldr	r3, [r2, #0]
 8000e7e:	1c59      	adds	r1, r3, #1
 8000e80:	6011      	str	r1, [r2, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d145      	bne.n	8000f12 <BSP_I2C1_Init+0xa2>
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000e86:	0030      	movs	r0, r6
 8000e88:	f001 fb0a 	bl	80024a0 <HAL_I2C_GetState>
 8000e8c:	1e04      	subs	r4, r0, #0
 8000e8e:	d140      	bne.n	8000f12 <BSP_I2C1_Init+0xa2>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	0001      	movs	r1, r0
 8000e92:	2214      	movs	r2, #20
 8000e94:	a809      	add	r0, sp, #36	; 0x24
 8000e96:	f002 fbde 	bl	8003656 <memset>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e9a:	2320      	movs	r3, #32
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000e9c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e9e:	9308      	str	r3, [sp, #32]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ea0:	f001 fe9c 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4d1f      	ldr	r5, [pc, #124]	; (8000f24 <BSP_I2C1_Init+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <BSP_I2C1_Init+0xb8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	636a      	str	r2, [r5, #52]	; 0x34
 8000eb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ebc:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ebe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ec0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000ec2:	3b7a      	subs	r3, #122	; 0x7a
 8000ec4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000eca:	f000 fea7 	bl	8001c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000ece:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <BSP_I2C1_Init+0xb8>)
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000ed2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000ed4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000ed6:	3b3a      	subs	r3, #58	; 0x3a
 8000ed8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eda:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000ee0:	f000 fe9c 	bl	8001c1c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000ee8:	0389      	lsls	r1, r1, #14
 8000eea:	430a      	orrs	r2, r1
 8000eec:	63ea      	str	r2, [r5, #60]	; 0x3c
 8000eee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ef0:	0030      	movs	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	9b02      	ldr	r3, [sp, #8]
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ef8:	f7ff ff92 	bl	8000e20 <MX_I2C1_Init>
 8000efc:	1e01      	subs	r1, r0, #0
 8000efe:	d003      	beq.n	8000f08 <BSP_I2C1_Init+0x98>
          ret = BSP_ERROR_BUS_FAILURE;
 8000f00:	2008      	movs	r0, #8
 8000f02:	4240      	negs	r0, r0
}
 8000f04:	b00f      	add	sp, #60	; 0x3c
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f08:	0030      	movs	r0, r6
 8000f0a:	f001 facf 	bl	80024ac <HAL_I2CEx_ConfigAnalogFilter>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d1f6      	bne.n	8000f00 <BSP_I2C1_Init+0x90>
          ret = BSP_ERROR_NONE;
 8000f12:	2000      	movs	r0, #0
  return ret;
 8000f14:	e7f6      	b.n	8000f04 <BSP_I2C1_Init+0x94>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	200000c8 	.word	0x200000c8
 8000f20:	200000cc 	.word	0x200000cc
 8000f24:	40021000 	.word	0x40021000
 8000f28:	50000400 	.word	0x50000400

08000f2c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	2214      	movs	r2, #20
 8000f32:	2100      	movs	r1, #0
 8000f34:	a803      	add	r0, sp, #12
 8000f36:	f002 fb8e 	bl	8003656 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2002      	movs	r0, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2501      	movs	r5, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f40:	24c0      	movs	r4, #192	; 0xc0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 8000f42:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0xa8>)
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f46:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 8000f4a:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4301      	orrs	r1, r0
 8000f4e:	6359      	str	r1, [r3, #52]	; 0x34
 8000f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f52:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4002      	ands	r2, r0
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	433a      	orrs	r2, r7
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
 8000f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f64:	403a      	ands	r2, r7
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6c:	432a      	orrs	r2, r5
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f72:	002a      	movs	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	402b      	ands	r3, r5
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin, GPIO_PIN_SET);
 8000f7a:	f000 ff6f 	bl	8001e5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 8000f7e:	002a      	movs	r2, r5
 8000f80:	0039      	movs	r1, r7
 8000f82:	0030      	movs	r0, r6
 8000f84:	f000 ff6a 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RS485_RECEIVER_EN_Pin|RS485_DRIVER_EN_Pin;
 8000f88:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	a903      	add	r1, sp, #12
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f000 fe41 	bl	8001c1c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	0030      	movs	r0, r6
 8000f9c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 8000f9e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f000 fe39 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_HARDWARE_INTERRUPT_Pin;
 8000faa:	2308      	movs	r3, #8
 8000fac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fae:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb2:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TOF_HARDWARE_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f000 fe2f 	bl	8001c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f000 fdda 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000fc8:	2006      	movs	r0, #6
 8000fca:	f000 fe01 	bl	8001bd0 <HAL_NVIC_EnableIRQ>

}
 8000fce:	b009      	add	sp, #36	; 0x24
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	50000800 	.word	0x50000800

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe0:	2234      	movs	r2, #52	; 0x34
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	a805      	add	r0, sp, #20
 8000fe6:	f002 fb36 	bl	8003656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fea:	2100      	movs	r1, #0
 8000fec:	2210      	movs	r2, #16
 8000fee:	a801      	add	r0, sp, #4
 8000ff0:	f002 fb31 	bl	8003656 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2080      	movs	r0, #128	; 0x80
 8000ff6:	0080      	lsls	r0, r0, #2
 8000ff8:	f001 faa2 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ffc:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffe:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001000:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	33f6      	adds	r3, #246	; 0xf6
 8001004:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001006:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800100c:	3a3f      	subs	r2, #63	; 0x3f
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800100e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001010:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001012:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f001 fac0 	bl	8002598 <HAL_RCC_OscConfig>
 8001018:	1e01      	subs	r1, r0, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101e:	e7fe      	b.n	800101e <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001022:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001026:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001028:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102c:	f001 fd14 	bl	8002a58 <HAL_RCC_ClockConfig>
 8001030:	2800      	cmp	r0, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x5c>
 8001034:	b672      	cpsid	i
  while (1)
 8001036:	e7fe      	b.n	8001036 <SystemClock_Config+0x5a>
}
 8001038:	b013      	add	sp, #76	; 0x4c
 800103a:	bd00      	pop	{pc}

0800103c <main>:
{
 800103c:	b510      	push	{r4, lr}
  HAL_Init();
 800103e:	f000 fd5d 	bl	8001afc <HAL_Init>
  SystemClock_Config();
 8001042:	f7ff ffcb 	bl	8000fdc <SystemClock_Config>
  MX_GPIO_Init();
 8001046:	f7ff ff71 	bl	8000f2c <MX_GPIO_Init>
  MX_TOF_Init();
 800104a:	f002 f953 	bl	80032f4 <MX_TOF_Init>
  MX_TOF_Process();
 800104e:	f002 f967 	bl	8003320 <MX_TOF_Process>
  while (1)
 8001052:	e7fc      	b.n	800104e <main+0x12>

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2001      	movs	r0, #1
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x34>)
 800105a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800105c:	4301      	orrs	r1, r0
 800105e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4002      	ands	r2, r0
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800106e:	3007      	adds	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	430a      	orrs	r2, r1
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	400b      	ands	r3, r1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800107c:	f000 fd76 	bl	8001b6c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8001080:	2010      	movs	r0, #16
 8001082:	f000 fd73 	bl	8001b6c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bd07      	pop	{r0, r1, r2, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler>

0800108e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler>

08001090 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001096:	f000 fd45 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109a:	bd10      	pop	{r4, pc}

0800109c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800109c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_HARDWARE_INTERRUPT_Pin);
 800109e:	2008      	movs	r0, #8
 80010a0:	f000 fee4 	bl	8001e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80010a4:	bd10      	pop	{r4, pc}

080010a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a6:	b570      	push	{r4, r5, r6, lr}
 80010a8:	000e      	movs	r6, r1
 80010aa:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2500      	movs	r5, #0
 80010ae:	42a5      	cmp	r5, r4
 80010b0:	db01      	blt.n	80010b6 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80010b2:	0020      	movs	r0, r4
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80010b6:	e000      	b.n	80010ba <_read+0x14>
 80010b8:	bf00      	nop
 80010ba:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	3501      	adds	r5, #1
 80010be:	e7f6      	b.n	80010ae <_read+0x8>

080010c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	000e      	movs	r6, r1
 80010c4:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2500      	movs	r5, #0
 80010c8:	42a5      	cmp	r5, r4
 80010ca:	db01      	blt.n	80010d0 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80010cc:	0020      	movs	r0, r4
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80010d0:	5d70      	ldrb	r0, [r6, r5]
 80010d2:	f000 fcd7 	bl	8001a84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	3501      	adds	r5, #1
 80010d8:	e7f6      	b.n	80010c8 <_write+0x8>

080010da <_close>:

int _close(int file)
{
	return -1;
 80010da:	2001      	movs	r0, #1
}
 80010dc:	4240      	negs	r0, r0
 80010de:	4770      	bx	lr

080010e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	019b      	lsls	r3, r3, #6
	return 0;
}
 80010e4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80010e6:	604b      	str	r3, [r1, #4]
}
 80010e8:	4770      	bx	lr

080010ea <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80010ea:	2001      	movs	r0, #1
 80010ec:	4770      	bx	lr

080010ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80010ee:	2000      	movs	r0, #0
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <_sbrk+0x30>)
 80010f6:	490c      	ldr	r1, [pc, #48]	; (8001128 <_sbrk+0x34>)
{
 80010f8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fa:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <_sbrk+0x38>)
{
 80010fe:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001100:	6810      	ldr	r0, [r2, #0]
 8001102:	2800      	cmp	r0, #0
 8001104:	d101      	bne.n	800110a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <_sbrk+0x3c>)
 8001108:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	6810      	ldr	r0, [r2, #0]
 800110c:	18c3      	adds	r3, r0, r3
 800110e:	428b      	cmp	r3, r1
 8001110:	d906      	bls.n	8001120 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001112:	f002 fa6d 	bl	80035f0 <__errno>
 8001116:	230c      	movs	r3, #12
 8001118:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800111a:	2001      	movs	r0, #1
 800111c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800111e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001120:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001122:	e7fc      	b.n	800111e <_sbrk+0x2a>
 8001124:	00000400 	.word	0x00000400
 8001128:	20002000 	.word	0x20002000
 800112c:	20000120 	.word	0x20000120
 8001130:	20000330 	.word	0x20000330

08001134 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	4770      	bx	lr
	...

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f7ff fffa 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	; (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f002 fa49 	bl	80035fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800116a:	f7ff ff67 	bl	800103c <main>

0800116e <LoopForever>:

LoopForever:
  b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800117c:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8001180:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001184:	2000032c 	.word	0x2000032c

08001188 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>

0800118a <VL53L4CD_SetI2CAddress>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 800118a:	b510      	push	{r4, lr}
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 800118c:	084a      	lsrs	r2, r1, #1
 800118e:	2101      	movs	r1, #1
 8001190:	f000 f9ee 	bl	8001570 <VL53L4CD_WrByte>
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
}
 8001194:	bd10      	pop	{r4, pc}

08001196 <VL53L4CD_ClearInterrupt>:
	return status;
}

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 8001196:	b510      	push	{r4, lr}
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001198:	2201      	movs	r2, #1
 800119a:	2186      	movs	r1, #134	; 0x86
 800119c:	f000 f9e8 	bl	8001570 <VL53L4CD_WrByte>
	return status;
}
 80011a0:	bd10      	pop	{r4, pc}

080011a2 <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 80011a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80011a4:	216c      	movs	r1, #108	; 0x6c
 80011a6:	aa01      	add	r2, sp, #4
{
 80011a8:	0005      	movs	r5, r0
	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80011aa:	f000 fa4d 	bl	8001648 <VL53L4CD_RdDWord>

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 80011ae:	9b01      	ldr	r3, [sp, #4]
	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80011b0:	0004      	movs	r4, r0
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 80011b2:	2221      	movs	r2, #33	; 0x21
	if(tmp == (uint32_t)0)
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d000      	beq.n	80011ba <VL53L4CD_StartRanging+0x18>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 80011b8:	2240      	movs	r2, #64	; 0x40
 80011ba:	0028      	movs	r0, r5
 80011bc:	2187      	movs	r1, #135	; 0x87
 80011be:	f000 f9d7 	bl	8001570 <VL53L4CD_WrByte>
 80011c2:	4320      	orrs	r0, r4
 80011c4:	b2c0      	uxtb	r0, r0
	}

	return status;
}
 80011c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080011c8 <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 80011c8:	b510      	push	{r4, lr}
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2187      	movs	r1, #135	; 0x87
 80011ce:	f000 f9cf 	bl	8001570 <VL53L4CD_WrByte>
	return status;
}
 80011d2:	bd10      	pop	{r4, pc}

080011d4 <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b085      	sub	sp, #20
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80011d8:	ab02      	add	r3, sp, #8
 80011da:	1ddd      	adds	r5, r3, #7
 80011dc:	002a      	movs	r2, r5
{
 80011de:	9100      	str	r1, [sp, #0]
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80011e0:	2130      	movs	r1, #48	; 0x30
{
 80011e2:	0006      	movs	r6, r0
	temp = temp & (uint8_t)0x10;
	temp = temp >> 4;
 80011e4:	2701      	movs	r7, #1
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80011e6:	f000 f9f5 	bl	80015d4 <VL53L4CD_RdByte>
	temp = temp >> 4;
 80011ea:	782c      	ldrb	r4, [r5, #0]
	else
	{
		int_pol = (uint8_t)1;
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80011ec:	002a      	movs	r2, r5
	temp = temp >> 4;
 80011ee:	0924      	lsrs	r4, r4, #4
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80011f0:	9001      	str	r0, [sp, #4]
	temp = temp >> 4;
 80011f2:	403c      	ands	r4, r7
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80011f4:	2131      	movs	r1, #49	; 0x31
 80011f6:	0030      	movs	r0, r6
	temp = temp >> 4;
 80011f8:	702c      	strb	r4, [r5, #0]
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80011fa:	f000 f9eb 	bl	80015d4 <VL53L4CD_RdByte>

	if ((temp & (uint8_t)1) == int_pol)
 80011fe:	4262      	negs	r2, r4
 8001200:	4154      	adcs	r4, r2
 8001202:	782b      	ldrb	r3, [r5, #0]
 8001204:	401f      	ands	r7, r3
 8001206:	1be4      	subs	r4, r4, r7
 8001208:	4263      	negs	r3, r4
 800120a:	415c      	adcs	r4, r3
 800120c:	9b00      	ldr	r3, [sp, #0]
 800120e:	701c      	strb	r4, [r3, #0]
	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	4303      	orrs	r3, r0
	else
	{
		*p_is_data_ready = (uint8_t)0;
	}

	return status;
 8001214:	b2d8      	uxtb	r0, r3
}
 8001216:	b005      	add	sp, #20
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800121c <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b085      	sub	sp, #20
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
	float_t inter_measurement_factor = (float_t)1.055;

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8001220:	ab02      	add	r3, sp, #8
 8001222:	1d9c      	adds	r4, r3, #6
{
 8001224:	9101      	str	r1, [sp, #4]
 8001226:	0016      	movs	r6, r2
	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8001228:	2106      	movs	r1, #6
 800122a:	0022      	movs	r2, r4
{
 800122c:	0005      	movs	r5, r0
	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 800122e:	f000 f9ed 	bl	800160c <VL53L4CD_RdWord>
	if(osc_frequency != (uint16_t)0)
 8001232:	8821      	ldrh	r1, [r4, #0]
	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8001234:	0007      	movs	r7, r0
	if(osc_frequency != (uint16_t)0)
 8001236:	2900      	cmp	r1, #0
 8001238:	d045      	beq.n	80012c6 <VL53L4CD_SetRangeTiming+0xaa>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 800123a:	24fa      	movs	r4, #250	; 0xfa
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 800123c:	2080      	movs	r0, #128	; 0x80
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	00a4      	lsls	r4, r4, #2
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8001242:	05c0      	lsls	r0, r0, #23
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8001244:	435c      	muls	r4, r3
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8001246:	f7fe ff6f 	bl	8000128 <__udivsi3>
		macro_period_us = (uint32_t)((uint32_t)2304 *
 800124a:	2190      	movs	r1, #144	; 0x90
 800124c:	0109      	lsls	r1, r1, #4
 800124e:	4341      	muls	r1, r0
 8001250:	098b      	lsrs	r3, r1, #6
 8001252:	9300      	str	r3, [sp, #0]
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10) 
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8001254:	9b01      	ldr	r3, [sp, #4]
 8001256:	3b0a      	subs	r3, #10
	if ((timing_budget_ms < (uint32_t)10) 
 8001258:	2bbe      	cmp	r3, #190	; 0xbe
 800125a:	d801      	bhi.n	8001260 <VL53L4CD_SetRangeTiming+0x44>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 800125c:	2f00      	cmp	r7, #0
 800125e:	d039      	beq.n	80012d4 <VL53L4CD_SetRangeTiming+0xb8>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8001260:	2002      	movs	r0, #2
 8001262:	4240      	negs	r0, r0
 8001264:	4307      	orrs	r7, r0
 8001266:	b2ff      	uxtb	r7, r7
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8001268:	2ffe      	cmp	r7, #254	; 0xfe
 800126a:	d041      	beq.n	80012f0 <VL53L4CD_SetRangeTiming+0xd4>
	{
				ms_byte = 0;
				timing_budget_us = timing_budget_us << 12;
				tmp = macro_period_us*(uint32_t)16;
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 800126c:	9b00      	ldr	r3, [sp, #0]
				timing_budget_us = timing_budget_us << 12;
 800126e:	0324      	lsls	r4, r4, #12
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001270:	08d8      	lsrs	r0, r3, #3
 8001272:	0899      	lsrs	r1, r3, #2
 8001274:	1900      	adds	r0, r0, r4
 8001276:	f7fe ff57 	bl	8000128 <__udivsi3>
				ms_byte = 0;
 800127a:	2200      	movs	r2, #0
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 800127c:	23ff      	movs	r3, #255	; 0xff
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 800127e:	3801      	subs	r0, #1
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001280:	0006      	movs	r6, r0
 8001282:	439e      	bics	r6, r3
 8001284:	d15e      	bne.n	8001344 <VL53L4CD_SetRangeTiming+0x128>
						 ls_byte = ls_byte >> 1;
						 ms_byte++;
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	1812      	adds	r2, r2, r0
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 800128a:	b292      	uxth	r2, r2
 800128c:	215e      	movs	r1, #94	; 0x5e
 800128e:	0028      	movs	r0, r5
 8001290:	f000 f97c 	bl	800158c <VL53L4CD_WrWord>

				ms_byte = 0;
				tmp = macro_period_us*(uint32_t)12;
 8001294:	210c      	movs	r1, #12
 8001296:	9b00      	ldr	r3, [sp, #0]
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8001298:	4307      	orrs	r7, r0
				tmp = macro_period_us*(uint32_t)12;
 800129a:	4359      	muls	r1, r3
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 800129c:	09c8      	lsrs	r0, r1, #7
 800129e:	1900      	adds	r0, r0, r4
 80012a0:	0989      	lsrs	r1, r1, #6
 80012a2:	f7fe ff41 	bl	8000128 <__udivsi3>
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80012a6:	21ff      	movs	r1, #255	; 0xff
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 80012a8:	b2ff      	uxtb	r7, r7
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80012aa:	1e42      	subs	r2, r0, #1
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80012ac:	0013      	movs	r3, r2
 80012ae:	438b      	bics	r3, r1
 80012b0:	d14c      	bne.n	800134c <VL53L4CD_SetRangeTiming+0x130>
						 ls_byte = ls_byte >> 1;
						 ms_byte++;
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 80012b2:	0236      	lsls	r6, r6, #8
 80012b4:	18b2      	adds	r2, r6, r2
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 80012b6:	2161      	movs	r1, #97	; 0x61
 80012b8:	0028      	movs	r0, r5
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f000 f966 	bl	800158c <VL53L4CD_WrWord>
 80012c0:	4338      	orrs	r0, r7
 80012c2:	b2c0      	uxtb	r0, r0
 80012c4:	e015      	b.n	80012f2 <VL53L4CD_SetRangeTiming+0xd6>
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80012c6:	2002      	movs	r0, #2
 80012c8:	4240      	negs	r0, r0
 80012ca:	4307      	orrs	r7, r0
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80012cc:	000c      	movs	r4, r1
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80012ce:	b2ff      	uxtb	r7, r7
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80012d0:	9100      	str	r1, [sp, #0]
 80012d2:	e7bf      	b.n	8001254 <VL53L4CD_SetRangeTiming+0x38>
	else if(inter_measurement_ms == (uint32_t)0)
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d108      	bne.n	80012ea <VL53L4CD_SetRangeTiming+0xce>
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80012d8:	0032      	movs	r2, r6
 80012da:	216c      	movs	r1, #108	; 0x6c
 80012dc:	0028      	movs	r0, r5
 80012de:	f000 f965 	bl	80015ac <VL53L4CD_WrDWord>
		timing_budget_us -= (uint32_t)2500;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <VL53L4CD_SetRangeTiming+0x138>)
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80012e4:	0007      	movs	r7, r0
		timing_budget_us -= (uint32_t)2500;
 80012e6:	18e4      	adds	r4, r4, r3
 80012e8:	e7be      	b.n	8001268 <VL53L4CD_SetRangeTiming+0x4c>
	else if(inter_measurement_ms > timing_budget_ms)
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	42b3      	cmp	r3, r6
 80012ee:	d302      	bcc.n	80012f6 <VL53L4CD_SetRangeTiming+0xda>
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80012f0:	20fe      	movs	r0, #254	; 0xfe
	}

	return status;
}
 80012f2:	b005      	add	sp, #20
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status |= VL53L4CD_RdWord(dev,
 80012f6:	aa03      	add	r2, sp, #12
 80012f8:	21de      	movs	r1, #222	; 0xde
 80012fa:	0028      	movs	r0, r5
 80012fc:	f000 f986 	bl	800160c <VL53L4CD_RdWord>
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001300:	ab02      	add	r3, sp, #8
 8001302:	889f      	ldrh	r7, [r3, #4]
		status |= VL53L4CD_RdWord(dev,
 8001304:	9001      	str	r0, [sp, #4]
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001306:	05bf      	lsls	r7, r7, #22
 8001308:	0dbf      	lsrs	r7, r7, #22
 800130a:	809f      	strh	r7, [r3, #4]
				  * (float_t)inter_measurement_ms
 800130c:	0030      	movs	r0, r6
 800130e:	f7ff fcc5 	bl	8000c9c <__aeabi_ui2f>
 8001312:	4911      	ldr	r1, [pc, #68]	; (8001358 <VL53L4CD_SetRangeTiming+0x13c>)
 8001314:	f7ff f980 	bl	8000618 <__aeabi_fmul>
 8001318:	1c06      	adds	r6, r0, #0
				  * (float_t)clock_pll;
 800131a:	0038      	movs	r0, r7
 800131c:	f7ff fcbe 	bl	8000c9c <__aeabi_ui2f>
 8001320:	1c01      	adds	r1, r0, #0
				inter_measurement_factor = inter_measurement_factor
 8001322:	1c30      	adds	r0, r6, #0
 8001324:	f7ff f978 	bl	8000618 <__aeabi_fmul>
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8001328:	f7ff f8ae 	bl	8000488 <__aeabi_f2uiz>
 800132c:	216c      	movs	r1, #108	; 0x6c
 800132e:	0002      	movs	r2, r0
 8001330:	0028      	movs	r0, r5
 8001332:	f000 f93b 	bl	80015ac <VL53L4CD_WrDWord>
 8001336:	9b01      	ldr	r3, [sp, #4]
 8001338:	4303      	orrs	r3, r0
 800133a:	b2df      	uxtb	r7, r3
		timing_budget_us -= (uint32_t)4300;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <VL53L4CD_SetRangeTiming+0x140>)
 800133e:	18e4      	adds	r4, r4, r3
		timing_budget_us /= (uint32_t)2;
 8001340:	0864      	lsrs	r4, r4, #1
 8001342:	e791      	b.n	8001268 <VL53L4CD_SetRangeTiming+0x4c>
						 ms_byte++;
 8001344:	3201      	adds	r2, #1
						 ls_byte = ls_byte >> 1;
 8001346:	0840      	lsrs	r0, r0, #1
						 ms_byte++;
 8001348:	b292      	uxth	r2, r2
 800134a:	e799      	b.n	8001280 <VL53L4CD_SetRangeTiming+0x64>
						 ms_byte++;
 800134c:	3601      	adds	r6, #1
						 ls_byte = ls_byte >> 1;
 800134e:	0852      	lsrs	r2, r2, #1
						 ms_byte++;
 8001350:	b2b6      	uxth	r6, r6
 8001352:	e7ab      	b.n	80012ac <VL53L4CD_SetRangeTiming+0x90>
 8001354:	fffff63c 	.word	0xfffff63c
 8001358:	3f870a3d 	.word	0x3f870a3d
 800135c:	ffffef34 	.word	0xffffef34

08001360 <VL53L4CD_SensorInit>:
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i = 0;
 8001362:	2600      	movs	r6, #0
{
 8001364:	0004      	movs	r4, r0
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001366:	0035      	movs	r5, r6
 8001368:	2701      	movs	r7, #1
{
 800136a:	b085      	sub	sp, #20
		status |= VL53L4CD_RdByte(dev,
 800136c:	ab02      	add	r3, sp, #8
 800136e:	1dda      	adds	r2, r3, #7
 8001370:	21e5      	movs	r1, #229	; 0xe5
 8001372:	0020      	movs	r0, r4
 8001374:	f000 f92e 	bl	80015d4 <VL53L4CD_RdByte>
			continue_loop = (uint8_t)0;
 8001378:	2200      	movs	r2, #0
		if(tmp == (uint8_t)0x3) /* Sensor booted */
 800137a:	ab02      	add	r3, sp, #8
 800137c:	79db      	ldrb	r3, [r3, #7]
		status |= VL53L4CD_RdByte(dev,
 800137e:	4305      	orrs	r5, r0
 8001380:	b2ed      	uxtb	r5, r5
			continue_loop = (uint8_t)0;
 8001382:	9200      	str	r2, [sp, #0]
		if(tmp == (uint8_t)0x3) /* Sensor booted */
 8001384:	2b03      	cmp	r3, #3
 8001386:	d006      	beq.n	8001396 <VL53L4CD_SensorInit+0x36>
		else if(i < (uint16_t)1000)       /* Wait for boot */
 8001388:	23fa      	movs	r3, #250	; 0xfa
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429e      	cmp	r6, r3
 800138e:	d264      	bcs.n	800145a <VL53L4CD_SensorInit+0xfa>
			i++;
 8001390:	3601      	adds	r6, #1
 8001392:	b2b6      	uxth	r6, r6
 8001394:	9700      	str	r7, [sp, #0]
		WaitMs(dev, 1);
 8001396:	0039      	movs	r1, r7
 8001398:	0020      	movs	r0, r4
 800139a:	f000 f979 	bl	8001690 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 800139e:	9b00      	ldr	r3, [sp, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d0e3      	beq.n	800136c <VL53L4CD_SensorInit+0xc>
 80013a4:	2600      	movs	r6, #0
		status |= VL53L4CD_WrByte(dev, Addr,
 80013a6:	0031      	movs	r1, r6
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <VL53L4CD_SensorInit+0x108>)
 80013aa:	312d      	adds	r1, #45	; 0x2d
 80013ac:	5cf2      	ldrb	r2, [r6, r3]
 80013ae:	0020      	movs	r0, r4
 80013b0:	b289      	uxth	r1, r1
 80013b2:	f000 f8dd 	bl	8001570 <VL53L4CD_WrByte>
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80013b6:	3601      	adds	r6, #1
		status |= VL53L4CD_WrByte(dev, Addr,
 80013b8:	4305      	orrs	r5, r0
 80013ba:	b2ed      	uxtb	r5, r5
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80013bc:	2e5b      	cmp	r6, #91	; 0x5b
 80013be:	d1f2      	bne.n	80013a6 <VL53L4CD_SensorInit+0x46>
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	2187      	movs	r1, #135	; 0x87
 80013c4:	0020      	movs	r0, r4
 80013c6:	f000 f8d3 	bl	8001570 <VL53L4CD_WrByte>
	i  = (uint8_t)0;
 80013ca:	2700      	movs	r7, #0
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80013cc:	4305      	orrs	r5, r0
 80013ce:	b2ed      	uxtb	r5, r5
	continue_loop = (uint8_t)1;
 80013d0:	3e5a      	subs	r6, #90	; 0x5a
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80013d2:	ab02      	add	r3, sp, #8
 80013d4:	1dd9      	adds	r1, r3, #7
 80013d6:	0020      	movs	r0, r4
 80013d8:	f7ff fefc 	bl	80011d4 <VL53L4CD_CheckForDataReady>
		if(tmp == (uint8_t)1) /* Data ready */
 80013dc:	ab02      	add	r3, sp, #8
			continue_loop = (uint8_t)0;
 80013de:	9a00      	ldr	r2, [sp, #0]
		if(tmp == (uint8_t)1) /* Data ready */
 80013e0:	79db      	ldrb	r3, [r3, #7]
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 80013e2:	4305      	orrs	r5, r0
 80013e4:	b2ed      	uxtb	r5, r5
			continue_loop = (uint8_t)0;
 80013e6:	9201      	str	r2, [sp, #4]
		if(tmp == (uint8_t)1) /* Data ready */
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d006      	beq.n	80013fa <VL53L4CD_SensorInit+0x9a>
		else if(i < (uint16_t)1000)       /* Wait for answer */
 80013ec:	23fa      	movs	r3, #250	; 0xfa
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429f      	cmp	r7, r3
 80013f2:	d236      	bcs.n	8001462 <VL53L4CD_SensorInit+0x102>
			i++;
 80013f4:	3701      	adds	r7, #1
 80013f6:	b2bf      	uxth	r7, r7
 80013f8:	9601      	str	r6, [sp, #4]
		WaitMs(dev, 1);
 80013fa:	0031      	movs	r1, r6
 80013fc:	0020      	movs	r0, r4
 80013fe:	f000 f947 	bl	8001690 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 8001402:	9b01      	ldr	r3, [sp, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d0e4      	beq.n	80013d2 <VL53L4CD_SensorInit+0x72>
	status |= VL53L4CD_ClearInterrupt(dev);
 8001408:	0020      	movs	r0, r4
 800140a:	f7ff fec4 	bl	8001196 <VL53L4CD_ClearInterrupt>
 800140e:	0006      	movs	r6, r0
	status |= VL53L4CD_StopRanging(dev);
 8001410:	0020      	movs	r0, r4
 8001412:	f7ff fed9 	bl	80011c8 <VL53L4CD_StopRanging>
 8001416:	4335      	orrs	r5, r6
	status |= VL53L4CD_WrByte(dev,
 8001418:	2209      	movs	r2, #9
 800141a:	2108      	movs	r1, #8
	status |= VL53L4CD_StopRanging(dev);
 800141c:	4305      	orrs	r5, r0
	status |= VL53L4CD_WrByte(dev,
 800141e:	0020      	movs	r0, r4
 8001420:	f000 f8a6 	bl	8001570 <VL53L4CD_WrByte>
	status |= VL53L4CD_StopRanging(dev);
 8001424:	b2ed      	uxtb	r5, r5
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8001426:	2200      	movs	r2, #0
 8001428:	210b      	movs	r1, #11
	status |= VL53L4CD_WrByte(dev,
 800142a:	4305      	orrs	r5, r0
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 800142c:	0020      	movs	r0, r4
 800142e:	f000 f89f 	bl	8001570 <VL53L4CD_WrByte>
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001432:	22a0      	movs	r2, #160	; 0xa0
	status |= VL53L4CD_WrByte(dev,
 8001434:	b2ed      	uxtb	r5, r5
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001436:	2124      	movs	r1, #36	; 0x24
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8001438:	4305      	orrs	r5, r0
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 800143a:	00d2      	lsls	r2, r2, #3
 800143c:	0020      	movs	r0, r4
 800143e:	f000 f8a5 	bl	800158c <VL53L4CD_WrWord>
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8001442:	b2ed      	uxtb	r5, r5
	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2132      	movs	r1, #50	; 0x32
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001448:	4305      	orrs	r5, r0
	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 800144a:	0020      	movs	r0, r4
 800144c:	f7ff fee6 	bl	800121c <VL53L4CD_SetRangeTiming>
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001450:	b2ed      	uxtb	r5, r5
	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8001452:	4328      	orrs	r0, r5
	return status;
 8001454:	b2c0      	uxtb	r0, r0
}
 8001456:	b005      	add	sp, #20
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
			continue_loop = (uint8_t)0;
 800145a:	2300      	movs	r3, #0
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800145c:	25ff      	movs	r5, #255	; 0xff
			continue_loop = (uint8_t)0;
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	e799      	b.n	8001396 <VL53L4CD_SensorInit+0x36>
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8001462:	25ff      	movs	r5, #255	; 0xff
 8001464:	e7c9      	b.n	80013fa <VL53L4CD_SensorInit+0x9a>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	0800489c 	.word	0x0800489c

0800146c <VL53L4CD_GetResult>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	0006      	movs	r6, r0
 8001470:	b08b      	sub	sp, #44	; 0x2c
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8001472:	af04      	add	r7, sp, #16
 8001474:	2218      	movs	r2, #24
{
 8001476:	000c      	movs	r4, r1
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8001478:	0038      	movs	r0, r7
 800147a:	492b      	ldr	r1, [pc, #172]	; (8001528 <VL53L4CD_GetResult+0xbc>)
 800147c:	f002 f8e2 	bl	8003644 <memcpy>
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8001480:	ab02      	add	r3, sp, #8
 8001482:	1d5d      	adds	r5, r3, #5
 8001484:	002a      	movs	r2, r5
 8001486:	2189      	movs	r1, #137	; 0x89
 8001488:	0030      	movs	r0, r6
 800148a:	f000 f8a3 	bl	80015d4 <VL53L4CD_RdByte>
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 800148e:	221f      	movs	r2, #31
 8001490:	782b      	ldrb	r3, [r5, #0]
	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8001492:	9001      	str	r0, [sp, #4]
	temp_8 = temp_8 & (uint8_t)0x1F;
 8001494:	4013      	ands	r3, r2
 8001496:	702b      	strb	r3, [r5, #0]
	if (temp_8 < (uint8_t)24)
 8001498:	2b17      	cmp	r3, #23
 800149a:	d801      	bhi.n	80014a0 <VL53L4CD_GetResult+0x34>
	{
		temp_8 = status_rtn[temp_8];
 800149c:	5cfb      	ldrb	r3, [r7, r3]
 800149e:	702b      	strb	r3, [r5, #0]
	}
	p_result->range_status = temp_8;
 80014a0:	782b      	ldrb	r3, [r5, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 80014a2:	218c      	movs	r1, #140	; 0x8c
	p_result->range_status = temp_8;
 80014a4:	7023      	strb	r3, [r4, #0]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 80014a6:	ab02      	add	r3, sp, #8
 80014a8:	1d9d      	adds	r5, r3, #6
 80014aa:	002a      	movs	r2, r5
 80014ac:	0030      	movs	r0, r6
 80014ae:	f000 f8ad 	bl	800160c <VL53L4CD_RdWord>
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 80014b2:	882b      	ldrh	r3, [r5, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 80014b4:	002a      	movs	r2, r5
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	81a3      	strh	r3, [r4, #12]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 80014ba:	0007      	movs	r7, r0
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 80014bc:	218e      	movs	r1, #142	; 0x8e
 80014be:	0030      	movs	r0, r6
 80014c0:	f000 f8a4 	bl	800160c <VL53L4CD_RdWord>
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	4307      	orrs	r7, r0
 80014c8:	433b      	orrs	r3, r7
 80014ca:	b2df      	uxtb	r7, r3
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 80014cc:	882b      	ldrh	r3, [r5, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 80014ce:	002a      	movs	r2, r5
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	8123      	strh	r3, [r4, #8]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 80014d4:	2190      	movs	r1, #144	; 0x90
 80014d6:	0030      	movs	r0, r6
 80014d8:	f000 f898 	bl	800160c <VL53L4CD_RdWord>
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 80014dc:	882b      	ldrh	r3, [r5, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80014de:	002a      	movs	r2, r5
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	80a3      	strh	r3, [r4, #4]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80014e4:	2192      	movs	r1, #146	; 0x92
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 80014e6:	4307      	orrs	r7, r0
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80014e8:	0030      	movs	r0, r6
 80014ea:	f000 f88f 	bl	800160c <VL53L4CD_RdWord>
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 80014ee:	882b      	ldrh	r3, [r5, #0]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 80014f0:	b2ff      	uxtb	r7, r7
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 80014f2:	089b      	lsrs	r3, r3, #2

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 80014f4:	002a      	movs	r2, r5
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 80014f6:	81e3      	strh	r3, [r4, #14]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 80014f8:	2196      	movs	r1, #150	; 0x96
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80014fa:	4307      	orrs	r7, r0
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 80014fc:	0030      	movs	r0, r6
 80014fe:	f000 f885 	bl	800160c <VL53L4CD_RdWord>
		&temp_16);
	p_result->distance_mm = temp_16;
 8001502:	882b      	ldrh	r3, [r5, #0]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
			/p_result->number_of_spad;
 8001504:	89a5      	ldrh	r5, [r4, #12]
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8001506:	0006      	movs	r6, r0
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001508:	0029      	movs	r1, r5
	p_result->distance_mm = temp_16;
 800150a:	8063      	strh	r3, [r4, #2]
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 800150c:	8920      	ldrh	r0, [r4, #8]
 800150e:	f7fe fe0b 	bl	8000128 <__udivsi3>
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001512:	0029      	movs	r1, r5
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8001514:	8160      	strh	r0, [r4, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001516:	88a0      	ldrh	r0, [r4, #4]
 8001518:	f7fe fe06 	bl	8000128 <__udivsi3>
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 800151c:	b2ff      	uxtb	r7, r7
	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 800151e:	4337      	orrs	r7, r6
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001520:	80e0      	strh	r0, [r4, #6]
			/p_result->number_of_spad;

	return status;
 8001522:	b2f8      	uxtb	r0, r7
}
 8001524:	b00b      	add	sp, #44	; 0x2c
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001528:	080047e4 	.word	0x080047e4

0800152c <VL53L4CD_SetDetectionThresholds>:
VL53L4CD_Error VL53L4CD_SetDetectionThresholds(
		Dev_t dev,
		uint16_t distance_low_mm,
		uint16_t distance_high_mm,
		uint8_t window)
{
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	000e      	movs	r6, r1
 8001530:	0017      	movs	r7, r2
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT, window);
 8001532:	2146      	movs	r1, #70	; 0x46
{
 8001534:	001a      	movs	r2, r3
 8001536:	0005      	movs	r5, r0
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT, window);
 8001538:	f000 f81a 	bl	8001570 <VL53L4CD_WrByte>
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_HIGH, distance_high_mm);
 800153c:	003a      	movs	r2, r7
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT, window);
 800153e:	0004      	movs	r4, r0
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_HIGH, distance_high_mm);
 8001540:	2172      	movs	r1, #114	; 0x72
 8001542:	0028      	movs	r0, r5
 8001544:	f000 f822 	bl	800158c <VL53L4CD_WrWord>
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_LOW, distance_low_mm);
 8001548:	0032      	movs	r2, r6
 800154a:	2174      	movs	r1, #116	; 0x74
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_HIGH, distance_high_mm);
 800154c:	4304      	orrs	r4, r0
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_LOW, distance_low_mm);
 800154e:	0028      	movs	r0, r5
 8001550:	f000 f81c 	bl	800158c <VL53L4CD_WrWord>
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_HIGH, distance_high_mm);
 8001554:	b2e4      	uxtb	r4, r4
	status |= VL53L4CD_WrWord(dev, VL53L4CD_THRESH_LOW, distance_low_mm);
 8001556:	4320      	orrs	r0, r4
	return status;
 8001558:	b2c0      	uxtb	r0, r0
}
 800155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800155c <_I2CWrite.constprop.0>:

uint8_t _I2CBuffer[256];

/* Private functions prototypes */

static int _I2CWrite(Dev_t Dev, uint8_t *pdata, uint32_t count) {
 800155c:	0003      	movs	r3, r0
 800155e:	b510      	push	{r4, lr}
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8001560:	b28a      	uxth	r2, r1
 8001562:	8900      	ldrh	r0, [r0, #8]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4901      	ldr	r1, [pc, #4]	; (800156c <_I2CWrite.constprop.0+0x10>)
 8001568:	4798      	blx	r3
}
 800156a:	bd10      	pop	{r4, pc}
 800156c:	20000124 	.word	0x20000124

08001570 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(Dev_t Dev, uint16_t index, uint8_t data) {
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <VL53L4CD_WrByte+0x18>)
uint8_t VL53L4CD_WrByte(Dev_t Dev, uint16_t index, uint8_t data) {
 8001572:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8001574:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8001576:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[0] = index>>8;
 8001578:	701c      	strb	r4, [r3, #0]
    _I2CBuffer[2] = data;

    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800157a:	2103      	movs	r1, #3
    _I2CBuffer[2] = data;
 800157c:	709a      	strb	r2, [r3, #2]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800157e:	f7ff ffed 	bl	800155c <_I2CWrite.constprop.0>
    if (status_int != 0) {
        Status = status_int;
    }
    VL53L4CD_PutI2cBus();
    return Status;
 8001582:	b2c0      	uxtb	r0, r0
}
 8001584:	bd10      	pop	{r4, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000124 	.word	0x20000124

0800158c <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(Dev_t Dev, uint16_t index, uint16_t data) {
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <VL53L4CD_WrWord+0x1c>)
uint8_t VL53L4CD_WrWord(Dev_t Dev, uint16_t index, uint16_t data) {
 800158e:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8001590:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8001592:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8001594:	0a11      	lsrs	r1, r2, #8
 8001596:	7099      	strb	r1, [r3, #2]
    _I2CBuffer[0] = index>>8;
 8001598:	701c      	strb	r4, [r3, #0]
    _I2CBuffer[3] = data & 0x00FF;

    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800159a:	2104      	movs	r1, #4
    _I2CBuffer[3] = data & 0x00FF;
 800159c:	70da      	strb	r2, [r3, #3]
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 800159e:	f7ff ffdd 	bl	800155c <_I2CWrite.constprop.0>
    if (status_int != 0) {
        Status = status_int;
    }
    VL53L4CD_PutI2cBus();
    return Status;
 80015a2:	b2c0      	uxtb	r0, r0
}
 80015a4:	bd10      	pop	{r4, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000124 	.word	0x20000124

080015ac <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(Dev_t Dev, uint16_t index, uint32_t data) {
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <VL53L4CD_WrDWord+0x24>)
uint8_t VL53L4CD_WrDWord(Dev_t Dev, uint16_t index, uint32_t data) {
 80015ae:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 80015b0:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 80015b2:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 80015b4:	0e11      	lsrs	r1, r2, #24
 80015b6:	7099      	strb	r1, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 80015b8:	0c11      	lsrs	r1, r2, #16
 80015ba:	70d9      	strb	r1, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 80015bc:	0a11      	lsrs	r1, r2, #8
 80015be:	7119      	strb	r1, [r3, #4]
    _I2CBuffer[0] = index>>8;
 80015c0:	701c      	strb	r4, [r3, #0]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 80015c2:	2106      	movs	r1, #6
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 80015c4:	715a      	strb	r2, [r3, #5]
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 80015c6:	f7ff ffc9 	bl	800155c <_I2CWrite.constprop.0>
    if (status_int != 0) {
        Status = status_int;
    }
    VL53L4CD_PutI2cBus();
    return Status;
 80015ca:	b2c0      	uxtb	r0, r0
}
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20000124 	.word	0x20000124

080015d4 <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(Dev_t Dev, uint16_t index, uint8_t *data) {
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <VL53L4CD_RdByte+0x34>)
uint8_t VL53L4CD_RdByte(Dev_t Dev, uint16_t index, uint8_t *data) {
 80015d6:	b570      	push	{r4, r5, r6, lr}
 80015d8:	0016      	movs	r6, r2
	_I2CBuffer[0] = index>>8;
 80015da:	0a0a      	lsrs	r2, r1, #8
	_I2CBuffer[1] = index&0xFF;
 80015dc:	7059      	strb	r1, [r3, #1]
	_I2CBuffer[0] = index>>8;
 80015de:	701a      	strb	r2, [r3, #0]
    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015e0:	2102      	movs	r1, #2
uint8_t VL53L4CD_RdByte(Dev_t Dev, uint16_t index, uint8_t *data) {
 80015e2:	0005      	movs	r5, r0
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015e4:	f7ff ffba 	bl	800155c <_I2CWrite.constprop.0>
 80015e8:	0004      	movs	r4, r0
    if( status_int ){
        Status = status_int;
 80015ea:	b2c0      	uxtb	r0, r0
    if( status_int ){
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d109      	bne.n	8001604 <VL53L4CD_RdByte+0x30>
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 80015f0:	692b      	ldr	r3, [r5, #16]
 80015f2:	2201      	movs	r2, #1
 80015f4:	0031      	movs	r1, r6
 80015f6:	8928      	ldrh	r0, [r5, #8]
 80015f8:	4798      	blx	r3
 80015fa:	0003      	movs	r3, r0
    uint8_t Status = VL53L4CD_ERROR_NONE;
 80015fc:	0020      	movs	r0, r4
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
    if (status_int != 0) {
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d000      	beq.n	8001604 <VL53L4CD_RdByte+0x30>
        Status = status_int;
 8001602:	b2d8      	uxtb	r0, r3
    }
done:
    VL53L4CD_PutI2cBus();
    return Status;
}
 8001604:	bd70      	pop	{r4, r5, r6, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	20000124 	.word	0x20000124

0800160c <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(Dev_t Dev, uint16_t index, uint16_t *data) {
 800160c:	b570      	push	{r4, r5, r6, lr}
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800160e:	4c0d      	ldr	r4, [pc, #52]	; (8001644 <VL53L4CD_RdWord+0x38>)
 8001610:	0a0b      	lsrs	r3, r1, #8
	_I2CBuffer[1] = index&0xFF;
 8001612:	7061      	strb	r1, [r4, #1]
    _I2CBuffer[0] = index>>8;
 8001614:	7023      	strb	r3, [r4, #0]
    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001616:	2102      	movs	r1, #2
uint8_t VL53L4CD_RdWord(Dev_t Dev, uint16_t index, uint16_t *data) {
 8001618:	0006      	movs	r6, r0
 800161a:	0015      	movs	r5, r2
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800161c:	f7ff ff9e 	bl	800155c <_I2CWrite.constprop.0>

    if( status_int ){
 8001620:	2800      	cmp	r0, #0
 8001622:	d001      	beq.n	8001628 <VL53L4CD_RdWord+0x1c>
        Status = status_int;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
        Status = status_int;
 8001624:	b2c0      	uxtb	r0, r0

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    VL53L4CD_PutI2cBus();
    return Status;
}
 8001626:	bd70      	pop	{r4, r5, r6, pc}
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8001628:	2202      	movs	r2, #2
 800162a:	0021      	movs	r1, r4
 800162c:	8930      	ldrh	r0, [r6, #8]
 800162e:	6933      	ldr	r3, [r6, #16]
 8001630:	4798      	blx	r3
    if (status_int != 0) {
 8001632:	2800      	cmp	r0, #0
 8001634:	d1f6      	bne.n	8001624 <VL53L4CD_RdWord+0x18>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001636:	7822      	ldrb	r2, [r4, #0]
 8001638:	7863      	ldrb	r3, [r4, #1]
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	189b      	adds	r3, r3, r2
 800163e:	802b      	strh	r3, [r5, #0]
 8001640:	e7f1      	b.n	8001626 <VL53L4CD_RdWord+0x1a>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20000124 	.word	0x20000124

08001648 <VL53L4CD_RdDWord>:

uint8_t VL53L4CD_RdDWord(Dev_t Dev, uint16_t index, uint32_t *data) {
 8001648:	b570      	push	{r4, r5, r6, lr}
    uint8_t Status = VL53L4CD_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800164a:	4c10      	ldr	r4, [pc, #64]	; (800168c <VL53L4CD_RdDWord+0x44>)
 800164c:	0a0b      	lsrs	r3, r1, #8
	_I2CBuffer[1] = index&0xFF;
 800164e:	7061      	strb	r1, [r4, #1]
    _I2CBuffer[0] = index>>8;
 8001650:	7023      	strb	r3, [r4, #0]
    VL53L4CD_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001652:	2102      	movs	r1, #2
uint8_t VL53L4CD_RdDWord(Dev_t Dev, uint16_t index, uint32_t *data) {
 8001654:	0006      	movs	r6, r0
 8001656:	0015      	movs	r5, r2
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001658:	f7ff ff80 	bl	800155c <_I2CWrite.constprop.0>
    if (status_int != 0) {
 800165c:	2800      	cmp	r0, #0
 800165e:	d001      	beq.n	8001664 <VL53L4CD_RdDWord+0x1c>
        Status = status_int;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
    if (status_int != 0) {
        Status = status_int;
 8001660:	b2c0      	uxtb	r0, r0
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    VL53L4CD_PutI2cBus();
    return Status;
}
 8001662:	bd70      	pop	{r4, r5, r6, pc}
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8001664:	2204      	movs	r2, #4
 8001666:	0021      	movs	r1, r4
 8001668:	8930      	ldrh	r0, [r6, #8]
 800166a:	6933      	ldr	r3, [r6, #16]
 800166c:	4798      	blx	r3
    if (status_int != 0) {
 800166e:	2800      	cmp	r0, #0
 8001670:	d1f6      	bne.n	8001660 <VL53L4CD_RdDWord+0x18>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001672:	7823      	ldrb	r3, [r4, #0]
 8001674:	7862      	ldrb	r2, [r4, #1]
 8001676:	061b      	lsls	r3, r3, #24
 8001678:	0412      	lsls	r2, r2, #16
 800167a:	189b      	adds	r3, r3, r2
 800167c:	78e2      	ldrb	r2, [r4, #3]
 800167e:	189b      	adds	r3, r3, r2
 8001680:	78a2      	ldrb	r2, [r4, #2]
 8001682:	0212      	lsls	r2, r2, #8
 8001684:	189b      	adds	r3, r3, r2
 8001686:	602b      	str	r3, [r5, #0]
 8001688:	e7eb      	b.n	8001662 <VL53L4CD_RdDWord+0x1a>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	20000124 	.word	0x20000124

08001690 <WaitMs>:

uint8_t WaitMs(
		Dev_t Dev,
		uint32_t TimeMs)
{
 8001690:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8001692:	6943      	ldr	r3, [r0, #20]
{
 8001694:	0004      	movs	r4, r0
 8001696:	000d      	movs	r5, r1
  tickstart = Dev->IO.GetTick();
 8001698:	4798      	blx	r3
 800169a:	0006      	movs	r6, r0

  while ((Dev->IO.GetTick() - tickstart) < TimeMs);
 800169c:	6963      	ldr	r3, [r4, #20]
 800169e:	4798      	blx	r3
 80016a0:	1b80      	subs	r0, r0, r6
 80016a2:	42a8      	cmp	r0, r5
 80016a4:	d3fa      	bcc.n	800169c <WaitMs+0xc>

  return 0;
}
 80016a6:	2000      	movs	r0, #0
 80016a8:	bd70      	pop	{r4, r5, r6, pc}

080016aa <VL53L4CD_DeInit>:
  * @brief Deinitializes the vl53l4cd.
  * @param pObj    vl53l4cd context object.
  * @retval VL53L4CD status
  */
int32_t VL53L4CD_DeInit(VL53L4CD_Object_t *pObj)
{
 80016aa:	b510      	push	{r4, lr}
 80016ac:	1e04      	subs	r4, r0, #0
  int32_t ret;

  if (pObj == NULL)
 80016ae:	d00b      	beq.n	80016c8 <VL53L4CD_DeInit+0x1e>
  {
    ret = VL53L4CD_INVALID_PARAM;
  }
  else if (pObj->IsInitialized == 1U)
 80016b0:	7e03      	ldrb	r3, [r0, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d002      	beq.n	80016bc <VL53L4CD_DeInit+0x12>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L4CD_ERROR;
 80016b6:	2001      	movs	r0, #1
    ret = VL53L4CD_INVALID_PARAM;
 80016b8:	4240      	negs	r0, r0
  }

  return ret;
 80016ba:	e004      	b.n	80016c6 <VL53L4CD_DeInit+0x1c>
    if (pObj->IO.DeInit() != 0)
 80016bc:	6843      	ldr	r3, [r0, #4]
 80016be:	4798      	blx	r3
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d1f8      	bne.n	80016b6 <VL53L4CD_DeInit+0xc>
      pObj->IsInitialized = 0;
 80016c4:	7620      	strb	r0, [r4, #24]
}
 80016c6:	bd10      	pop	{r4, pc}
    ret = VL53L4CD_INVALID_PARAM;
 80016c8:	2002      	movs	r0, #2
 80016ca:	e7f5      	b.n	80016b8 <VL53L4CD_DeInit+0xe>

080016cc <VL53L4CD_GetCapabilities>:
  */
int32_t VL53L4CD_GetCapabilities(VL53L4CD_Object_t *pObj, VL53L4CD_Capabilities_t *pCap)
{
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d008      	beq.n	80016e2 <VL53L4CD_GetCapabilities+0x16>
 80016d0:	2900      	cmp	r1, #0
 80016d2:	d006      	beq.n	80016e2 <VL53L4CD_GetCapabilities+0x16>
  {
    ret = VL53L4CD_INVALID_PARAM;
  }
  else
  {
    pCap->NumberOfZones = VL53L4CD_MAX_NB_ZONES;
 80016d4:	2301      	movs	r3, #1
    pCap->MaxNumberOfTargetsPerZone = VL53L4CD_NB_TARGET_PER_ZONE;
    pCap->CustomROI = 0;
 80016d6:	2000      	movs	r0, #0
    pCap->NumberOfZones = VL53L4CD_MAX_NB_ZONES;
 80016d8:	600b      	str	r3, [r1, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L4CD_NB_TARGET_PER_ZONE;
 80016da:	604b      	str	r3, [r1, #4]
    pCap->CustomROI = 0;
 80016dc:	6088      	str	r0, [r1, #8]
    pCap->ThresholdDetection = 1;
 80016de:	60cb      	str	r3, [r1, #12]

    ret = VL53L4CD_OK;
  }

  return ret;
}
 80016e0:	4770      	bx	lr
    ret = VL53L4CD_INVALID_PARAM;
 80016e2:	2002      	movs	r0, #2
 80016e4:	4240      	negs	r0, r0
  return ret;
 80016e6:	e7fb      	b.n	80016e0 <VL53L4CD_GetCapabilities+0x14>

080016e8 <VL53L4CD_ConfigROI>:
  */
int32_t VL53L4CD_ConfigROI(VL53L4CD_Object_t *pObj, VL53L4CD_ROIConfig_t *pROIConfig)
{
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L4CD_NOT_IMPLEMENTED;
 80016e8:	2004      	movs	r0, #4
}
 80016ea:	4240      	negs	r0, r0
 80016ec:	4770      	bx	lr

080016ee <VL53L4CD_GetAddress>:
  */
int32_t VL53L4CD_GetAddress(VL53L4CD_Object_t *pObj, uint32_t *pAddress)
{
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d005      	beq.n	80016fe <VL53L4CD_GetAddress+0x10>
 80016f2:	2900      	cmp	r1, #0
 80016f4:	d003      	beq.n	80016fe <VL53L4CD_GetAddress+0x10>
  {
    ret = VL53L4CD_INVALID_PARAM;
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80016f6:	8903      	ldrh	r3, [r0, #8]
    ret = VL53L4CD_OK;
 80016f8:	2000      	movs	r0, #0
    *pAddress = pObj->IO.Address;
 80016fa:	600b      	str	r3, [r1, #0]
  }

  return ret;
}
 80016fc:	4770      	bx	lr
    ret = VL53L4CD_INVALID_PARAM;
 80016fe:	2002      	movs	r0, #2
 8001700:	4240      	negs	r0, r0
  return ret;
 8001702:	e7fb      	b.n	80016fc <VL53L4CD_GetAddress+0xe>

08001704 <VL53L4CD_SetPowerMode>:
  */
int32_t VL53L4CD_SetPowerMode(VL53L4CD_Object_t *pObj, uint32_t pPowerMode)
{
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L4CD_NOT_IMPLEMENTED;
 8001704:	2004      	movs	r0, #4
}
 8001706:	4240      	negs	r0, r0
 8001708:	4770      	bx	lr

0800170a <VL53L4CD_Init>:
{
 800170a:	b510      	push	{r4, lr}
 800170c:	1e04      	subs	r4, r0, #0
  if (pObj == NULL)
 800170e:	d00d      	beq.n	800172c <VL53L4CD_Init+0x22>
  else if (pObj->IsInitialized != 0U)
 8001710:	7e03      	ldrb	r3, [r0, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <VL53L4CD_Init+0x12>
    ret =  VL53L4CD_ERROR;
 8001716:	2001      	movs	r0, #1
    ret = VL53L4CD_INVALID_PARAM;
 8001718:	4240      	negs	r0, r0
  return ret;
 800171a:	e006      	b.n	800172a <VL53L4CD_Init+0x20>
  else if (VL53L4CD_SensorInit(pObj) != VL53L4CD_ERROR_NONE)
 800171c:	f7ff fe20 	bl	8001360 <VL53L4CD_SensorInit>
 8001720:	2800      	cmp	r0, #0
 8001722:	d1f8      	bne.n	8001716 <VL53L4CD_Init+0xc>
    pObj->IsInitialized = 1U;
 8001724:	2301      	movs	r3, #1
    pObj->IsAmbientEnabled = 0U;
 8001726:	83a0      	strh	r0, [r4, #28]
    pObj->IsInitialized = 1U;
 8001728:	61a3      	str	r3, [r4, #24]
}
 800172a:	bd10      	pop	{r4, pc}
    ret = VL53L4CD_INVALID_PARAM;
 800172c:	2002      	movs	r0, #2
 800172e:	e7f3      	b.n	8001718 <VL53L4CD_Init+0xe>

08001730 <VL53L4CD_ReadID>:
{
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001732:	000c      	movs	r4, r1
  if ((pObj == NULL) || (pId == NULL))
 8001734:	2800      	cmp	r0, #0
 8001736:	d00f      	beq.n	8001758 <VL53L4CD_ReadID+0x28>
 8001738:	2900      	cmp	r1, #0
 800173a:	d00d      	beq.n	8001758 <VL53L4CD_ReadID+0x28>
    *pId = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	600b      	str	r3, [r1, #0]
    ret = (int32_t)VL53L4CD_RdWord(pObj, VL53L4CD_ID_REG, &ReadId);
 8001740:	466b      	mov	r3, sp
 8001742:	2110      	movs	r1, #16
 8001744:	1d9d      	adds	r5, r3, #6
 8001746:	002a      	movs	r2, r5
 8001748:	31ff      	adds	r1, #255	; 0xff
 800174a:	f7ff ff5f 	bl	800160c <VL53L4CD_RdWord>
    if (ret == (int32_t)VL53L4CD_ERROR_NONE)
 800174e:	2800      	cmp	r0, #0
 8001750:	d101      	bne.n	8001756 <VL53L4CD_ReadID+0x26>
      *pId = ReadId;
 8001752:	882b      	ldrh	r3, [r5, #0]
 8001754:	6023      	str	r3, [r4, #0]
}
 8001756:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ret = VL53L4CD_INVALID_PARAM;
 8001758:	2002      	movs	r0, #2
 800175a:	4240      	negs	r0, r0
  return ret;
 800175c:	e7fb      	b.n	8001756 <VL53L4CD_ReadID+0x26>

0800175e <VL53L4CD_ConfigProfile>:
{
 800175e:	b570      	push	{r4, r5, r6, lr}
 8001760:	0005      	movs	r5, r0
 8001762:	000c      	movs	r4, r1
  if ((pObj != NULL) && (pConfig != NULL))
 8001764:	2800      	cmp	r0, #0
 8001766:	d01d      	beq.n	80017a4 <VL53L4CD_ConfigProfile+0x46>
 8001768:	2900      	cmp	r1, #0
 800176a:	d01b      	beq.n	80017a4 <VL53L4CD_ConfigProfile+0x46>
    if ((pConfig->RangingProfile == VL53L4CD_PROFILE_AUTONOMOUS) &&
 800176c:	780b      	ldrb	r3, [r1, #0]
      intermeas_ms = 0;
 800176e:	2200      	movs	r2, #0
    if ((pConfig->RangingProfile == VL53L4CD_PROFILE_AUTONOMOUS) &&
 8001770:	2b02      	cmp	r3, #2
 8001772:	d108      	bne.n	8001786 <VL53L4CD_ConfigProfile+0x28>
        (pConfig->Frequency > 0U))
 8001774:	688a      	ldr	r2, [r1, #8]
    if ((pConfig->RangingProfile == VL53L4CD_PROFILE_AUTONOMOUS) &&
 8001776:	2a00      	cmp	r2, #0
 8001778:	d005      	beq.n	8001786 <VL53L4CD_ConfigProfile+0x28>
      intermeas_ms = 1000U / pConfig->Frequency;
 800177a:	20fa      	movs	r0, #250	; 0xfa
 800177c:	0011      	movs	r1, r2
 800177e:	0080      	lsls	r0, r0, #2
 8001780:	f7fe fcd2 	bl	8000128 <__udivsi3>
 8001784:	0002      	movs	r2, r0
    if (VL53L4CD_SetRangeTiming(pObj,
 8001786:	0028      	movs	r0, r5
 8001788:	6861      	ldr	r1, [r4, #4]
 800178a:	f7ff fd47 	bl	800121c <VL53L4CD_SetRangeTiming>
 800178e:	2800      	cmp	r0, #0
 8001790:	d10b      	bne.n	80017aa <VL53L4CD_ConfigProfile+0x4c>
      pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8001792:	68e3      	ldr	r3, [r4, #12]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	4193      	sbcs	r3, r2
 8001798:	772b      	strb	r3, [r5, #28]
      pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800179a:	6923      	ldr	r3, [r4, #16]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	4193      	sbcs	r3, r2
 80017a0:	776b      	strb	r3, [r5, #29]
}
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
    ret = VL53L4CD_INVALID_PARAM;
 80017a4:	2002      	movs	r0, #2
      ret = VL53L4CD_ERROR;
 80017a6:	4240      	negs	r0, r0
  return ret;
 80017a8:	e7fb      	b.n	80017a2 <VL53L4CD_ConfigProfile+0x44>
      ret = VL53L4CD_ERROR;
 80017aa:	2001      	movs	r0, #1
 80017ac:	e7fb      	b.n	80017a6 <VL53L4CD_ConfigProfile+0x48>
	...

080017b0 <VL53L4CD_ConfigIT>:
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
  if ((pObj == NULL) || (pITConfig == NULL))
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d015      	beq.n	80017e2 <VL53L4CD_ConfigIT+0x32>
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d013      	beq.n	80017e2 <VL53L4CD_ConfigIT+0x32>
    switch (window)
 80017ba:	24fc      	movs	r4, #252	; 0xfc
    window = (uint8_t)pITConfig->Criteria; 
 80017bc:	680b      	ldr	r3, [r1, #0]
 80017be:	680a      	ldr	r2, [r1, #0]
    switch (window)
 80017c0:	680d      	ldr	r5, [r1, #0]
    window = (uint8_t)pITConfig->Criteria; 
 80017c2:	b2db      	uxtb	r3, r3
    switch (window)
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4225      	tst	r5, r4
 80017c8:	d006      	beq.n	80017d8 <VL53L4CD_ConfigIT+0x28>
 80017ca:	2aff      	cmp	r2, #255	; 0xff
 80017cc:	d109      	bne.n	80017e2 <VL53L4CD_ConfigIT+0x32>
        ret = (int32_t)VL53L4CD_SetDetectionThresholds(pObj, 0, 6000, window);
 80017ce:	2100      	movs	r1, #0
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <VL53L4CD_ConfigIT+0x38>)
        ret = (int32_t)VL53L4CD_SetDetectionThresholds(pObj,
 80017d2:	f7ff feab 	bl	800152c <VL53L4CD_SetDetectionThresholds>
}
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
        ret = (int32_t)VL53L4CD_SetDetectionThresholds(pObj,
 80017d8:	688a      	ldr	r2, [r1, #8]
        LowThreshold = (uint16_t)pITConfig->LowThreshold;
 80017da:	6849      	ldr	r1, [r1, #4]
        ret = (int32_t)VL53L4CD_SetDetectionThresholds(pObj,
 80017dc:	b292      	uxth	r2, r2
 80017de:	b289      	uxth	r1, r1
 80017e0:	e7f7      	b.n	80017d2 <VL53L4CD_ConfigIT+0x22>
    switch (window)
 80017e2:	2002      	movs	r0, #2
 80017e4:	4240      	negs	r0, r0
  return ret;
 80017e6:	e7f6      	b.n	80017d6 <VL53L4CD_ConfigIT+0x26>
 80017e8:	00001770 	.word	0x00001770

080017ec <vl53l4cd_poll_for_measurement>:

/** @defgroup VL53L4CD_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l4cd_poll_for_measurement(VL53L4CD_Object_t *pObj, uint32_t Timeout)
{
 80017ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ee:	0004      	movs	r4, r0
 80017f0:	000d      	movs	r5, r1
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady;

  if (pObj == NULL)
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d013      	beq.n	800181e <vl53l4cd_poll_for_measurement+0x32>
    ret = VL53L4CD_INVALID_PARAM;
  }
  else
  {
    ret = VL53L4CD_TIMEOUT;
    TickStart = pObj->IO.GetTick();
 80017f6:	6943      	ldr	r3, [r0, #20]
 80017f8:	4798      	blx	r3
 80017fa:	0006      	movs	r6, r0

    do
    {
      (void)VL53L4CD_CheckForDataReady(pObj, &NewDataReady);
 80017fc:	466b      	mov	r3, sp
 80017fe:	1ddf      	adds	r7, r3, #7
 8001800:	0039      	movs	r1, r7
 8001802:	0020      	movs	r0, r4
 8001804:	f7ff fce6 	bl	80011d4 <VL53L4CD_CheckForDataReady>

      if (NewDataReady == 1U)
 8001808:	783b      	ldrb	r3, [r7, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d009      	beq.n	8001822 <vl53l4cd_poll_for_measurement+0x36>
      {
        ret = VL53L4CD_OK;
        break;
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800180e:	6963      	ldr	r3, [r4, #20]
 8001810:	4798      	blx	r3
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	42a8      	cmp	r0, r5
 8001816:	d3f1      	bcc.n	80017fc <vl53l4cd_poll_for_measurement+0x10>
    ret = VL53L4CD_TIMEOUT;
 8001818:	2003      	movs	r0, #3
    ret = VL53L4CD_INVALID_PARAM;
 800181a:	4240      	negs	r0, r0

  }

  return ret;
}
 800181c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ret = VL53L4CD_INVALID_PARAM;
 800181e:	2002      	movs	r0, #2
 8001820:	e7fb      	b.n	800181a <vl53l4cd_poll_for_measurement+0x2e>
        ret = VL53L4CD_OK;
 8001822:	2000      	movs	r0, #0
  return ret;
 8001824:	e7fa      	b.n	800181c <vl53l4cd_poll_for_measurement+0x30>
	...

08001828 <VL53L4CD_GetDistance>:
{
 8001828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800182a:	0005      	movs	r5, r0
 800182c:	000e      	movs	r6, r1
  if ((pObj == NULL) || (pResult == NULL))
 800182e:	2800      	cmp	r0, #0
 8001830:	d03a      	beq.n	80018a8 <VL53L4CD_GetDistance+0x80>
 8001832:	2900      	cmp	r1, #0
 8001834:	d038      	beq.n	80018a8 <VL53L4CD_GetDistance+0x80>
  else if (pObj->IsRanging == 0U)
 8001836:	7e43      	ldrb	r3, [r0, #25]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d038      	beq.n	80018ae <VL53L4CD_GetDistance+0x86>
    if (pObj->IsBlocking == 1U)
 800183c:	7e83      	ldrb	r3, [r0, #26]
      ret = vl53l4cd_poll_for_measurement(pObj, 0U);
 800183e:	2100      	movs	r1, #0
    if (pObj->IsBlocking == 1U)
 8001840:	2b01      	cmp	r3, #1
 8001842:	d100      	bne.n	8001846 <VL53L4CD_GetDistance+0x1e>
      ret = vl53l4cd_poll_for_measurement(pObj, V53L4CX_POLL_TIMEOUT);
 8001844:	491b      	ldr	r1, [pc, #108]	; (80018b4 <VL53L4CD_GetDistance+0x8c>)
      ret = vl53l4cd_poll_for_measurement(pObj, 0U);
 8001846:	0028      	movs	r0, r5
 8001848:	f7ff ffd0 	bl	80017ec <vl53l4cd_poll_for_measurement>
 800184c:	1e04      	subs	r4, r0, #0
  if (ret == VL53L4CD_OK)
 800184e:	d128      	bne.n	80018a2 <VL53L4CD_GetDistance+0x7a>

  if ((pObj == NULL) || (pResult == NULL))
  {
    ret = VL53L4CD_INVALID_PARAM;
  }
  else if (VL53L4CD_GetResult(pObj, &data) != VL53L4CD_ERROR_NONE)
 8001850:	4669      	mov	r1, sp
 8001852:	0028      	movs	r0, r5
 8001854:	f7ff fe0a 	bl	800146c <VL53L4CD_GetResult>
 8001858:	2800      	cmp	r0, #0
 800185a:	d128      	bne.n	80018ae <VL53L4CD_GetDistance+0x86>
  {
    ret = VL53L4CD_ERROR;
  }
  else
  {
    pResult->NumberOfZones = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	6033      	str	r3, [r6, #0]
    pResult->ZoneResult[0].NumberOfTargets = 1;
 8001860:	6073      	str	r3, [r6, #4]
    pResult->ZoneResult[0].Distance[0] = data.distance_mm;
 8001862:	466b      	mov	r3, sp
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	60b3      	str	r3, [r6, #8]
    pResult->ZoneResult[0].Status[0] = data.range_status;
 8001868:	466b      	mov	r3, sp
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	60f3      	str	r3, [r6, #12]
    pResult->ZoneResult[0].Ambient[0] = 0.0f;
 800186e:	2300      	movs	r3, #0
 8001870:	6133      	str	r3, [r6, #16]
    pResult->ZoneResult[0].Signal[0] = 0.0f;
 8001872:	6173      	str	r3, [r6, #20]
    if (pObj->IsAmbientEnabled == 1U)
 8001874:	7f2b      	ldrb	r3, [r5, #28]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <VL53L4CD_GetDistance+0x5c>
    {
      pResult->ZoneResult[0].Ambient[0] = (float_t)data.ambient_per_spad_kcps;
 800187a:	466b      	mov	r3, sp
 800187c:	88d8      	ldrh	r0, [r3, #6]
 800187e:	f7ff fa0d 	bl	8000c9c <__aeabi_ui2f>
 8001882:	6130      	str	r0, [r6, #16]
    }
    if (pObj->IsSignalEnabled == 1U)
 8001884:	7f6b      	ldrb	r3, [r5, #29]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d104      	bne.n	8001894 <VL53L4CD_GetDistance+0x6c>
    {
      pResult->ZoneResult[0].Signal[0] = (float_t)data.signal_per_spad_kcps;
 800188a:	466b      	mov	r3, sp
 800188c:	8958      	ldrh	r0, [r3, #10]
 800188e:	f7ff fa05 	bl	8000c9c <__aeabi_ui2f>
 8001892:	6170      	str	r0, [r6, #20]
    else if (pObj->IsContinuous == 1U)
 8001894:	7eeb      	ldrb	r3, [r5, #27]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d103      	bne.n	80018a2 <VL53L4CD_GetDistance+0x7a>
      ret = (int32_t)VL53L4CD_ClearInterrupt(pObj);
 800189a:	0028      	movs	r0, r5
 800189c:	f7ff fc7b 	bl	8001196 <VL53L4CD_ClearInterrupt>
 80018a0:	0004      	movs	r4, r0
}
 80018a2:	0020      	movs	r0, r4
 80018a4:	b004      	add	sp, #16
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
    ret = VL53L4CD_INVALID_PARAM;
 80018a8:	2402      	movs	r4, #2
    ret = VL53L4CD_ERROR;
 80018aa:	4264      	negs	r4, r4
  return ret;
 80018ac:	e7f9      	b.n	80018a2 <VL53L4CD_GetDistance+0x7a>
    ret = VL53L4CD_ERROR;
 80018ae:	2401      	movs	r4, #1
 80018b0:	e7fb      	b.n	80018aa <VL53L4CD_GetDistance+0x82>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	0000ffff 	.word	0x0000ffff

080018b8 <VL53L4CD_Start>:
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	0004      	movs	r4, r0
 80018bc:	000d      	movs	r5, r1
  if (pObj == NULL)
 80018be:	2800      	cmp	r0, #0
 80018c0:	d017      	beq.n	80018f2 <VL53L4CD_Start+0x3a>
  else if (VL53L4CD_StartRanging(pObj) == VL53L4CD_ERROR_NONE)
 80018c2:	f7ff fc6e 	bl	80011a2 <VL53L4CD_StartRanging>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d116      	bne.n	80018f8 <VL53L4CD_Start+0x40>
    pObj->IsRanging = 1U;
 80018ca:	2201      	movs	r2, #1
    switch (Mode)
 80018cc:	1e68      	subs	r0, r5, #1
    pObj->IsRanging = 1U;
 80018ce:	7662      	strb	r2, [r4, #25]
    switch (Mode)
 80018d0:	2803      	cmp	r0, #3
 80018d2:	d80d      	bhi.n	80018f0 <VL53L4CD_Start+0x38>
 80018d4:	f7fe fc14 	bl	8000100 <__gnu_thumb1_case_uqi>
 80018d8:	04090602 	.word	0x04090602
        pObj->IsBlocking = 1U;
 80018dc:	2302      	movs	r3, #2
 80018de:	33ff      	adds	r3, #255	; 0xff
        pObj->IsBlocking = 0U;
 80018e0:	8363      	strh	r3, [r4, #26]
 80018e2:	e000      	b.n	80018e6 <VL53L4CD_Start+0x2e>
        pObj->IsBlocking = 1U;
 80018e4:	8362      	strh	r2, [r4, #26]
    ret = VL53L4CD_OK;
 80018e6:	2000      	movs	r0, #0
}
 80018e8:	bd70      	pop	{r4, r5, r6, pc}
        pObj->IsBlocking = 0U;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	e7f7      	b.n	80018e0 <VL53L4CD_Start+0x28>
        pObj->IsRanging = 0U;
 80018f0:	7663      	strb	r3, [r4, #25]
    ret = VL53L4CD_INVALID_PARAM;
 80018f2:	2002      	movs	r0, #2
    ret = VL53L4CD_ERROR;
 80018f4:	4240      	negs	r0, r0
  return ret;
 80018f6:	e7f7      	b.n	80018e8 <VL53L4CD_Start+0x30>
    ret = VL53L4CD_ERROR;
 80018f8:	2001      	movs	r0, #1
 80018fa:	e7fb      	b.n	80018f4 <VL53L4CD_Start+0x3c>

080018fc <VL53L4CD_Stop>:
{
 80018fc:	b510      	push	{r4, lr}
 80018fe:	1e04      	subs	r4, r0, #0
  if (pObj == NULL)
 8001900:	d00b      	beq.n	800191a <VL53L4CD_Stop+0x1e>
  else if (pObj->IsRanging == 0U)
 8001902:	7e43      	ldrb	r3, [r0, #25]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <VL53L4CD_Stop+0x12>
    ret = VL53L4CD_ERROR;
 8001908:	2001      	movs	r0, #1
    ret = VL53L4CD_INVALID_PARAM;
 800190a:	4240      	negs	r0, r0
  return ret;
 800190c:	e004      	b.n	8001918 <VL53L4CD_Stop+0x1c>
  else if (VL53L4CD_StopRanging(pObj) == VL53L4CD_ERROR_NONE)
 800190e:	f7ff fc5b 	bl	80011c8 <VL53L4CD_StopRanging>
 8001912:	2800      	cmp	r0, #0
 8001914:	d1f8      	bne.n	8001908 <VL53L4CD_Stop+0xc>
    pObj->IsRanging = 0U;
 8001916:	7660      	strb	r0, [r4, #25]
}
 8001918:	bd10      	pop	{r4, pc}
    ret = VL53L4CD_INVALID_PARAM;
 800191a:	2002      	movs	r0, #2
 800191c:	e7f5      	b.n	800190a <VL53L4CD_Stop+0xe>

0800191e <VL53L4CD_SetAddress>:
{
 800191e:	b570      	push	{r4, r5, r6, lr}
 8001920:	1e05      	subs	r5, r0, #0
  if (pObj == NULL)
 8001922:	d007      	beq.n	8001934 <VL53L4CD_SetAddress+0x16>
  else if (VL53L4CD_SetI2CAddress(pObj, (uint8_t)Address) != VL53L4CD_ERROR_NONE)
 8001924:	b2cc      	uxtb	r4, r1
 8001926:	0021      	movs	r1, r4
 8001928:	f7ff fc2f 	bl	800118a <VL53L4CD_SetI2CAddress>
 800192c:	2800      	cmp	r0, #0
 800192e:	d104      	bne.n	800193a <VL53L4CD_SetAddress+0x1c>
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8001930:	812c      	strh	r4, [r5, #8]
}
 8001932:	bd70      	pop	{r4, r5, r6, pc}
    ret = VL53L4CD_INVALID_PARAM;
 8001934:	2002      	movs	r0, #2
    ret = VL53L4CD_ERROR;
 8001936:	4240      	negs	r0, r0
  return ret;
 8001938:	e7fb      	b.n	8001932 <VL53L4CD_SetAddress+0x14>
    ret = VL53L4CD_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	e7fb      	b.n	8001936 <VL53L4CD_SetAddress+0x18>

0800193e <VL53L4CD_GetPowerMode>:
 800193e:	2004      	movs	r0, #4
 8001940:	4240      	negs	r0, r0
 8001942:	4770      	bx	lr

08001944 <VL53L4CD_RegisterBusIO>:
{
 8001944:	b510      	push	{r4, lr}
  if ((pObj == NULL) || (pIO == NULL))
 8001946:	2800      	cmp	r0, #0
 8001948:	d011      	beq.n	800196e <VL53L4CD_RegisterBusIO+0x2a>
 800194a:	2900      	cmp	r1, #0
 800194c:	d00f      	beq.n	800196e <VL53L4CD_RegisterBusIO+0x2a>
    pObj->IO.Init      = pIO->Init;
 800194e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001950:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001952:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001954:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8001956:	890a      	ldrh	r2, [r1, #8]
 8001958:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800195a:	68ca      	ldr	r2, [r1, #12]
 800195c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800195e:	690a      	ldr	r2, [r1, #16]
 8001960:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001962:	694a      	ldr	r2, [r1, #20]
 8001964:	6142      	str	r2, [r0, #20]
    if (pObj->IO.Init != NULL)
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <VL53L4CD_RegisterBusIO+0x30>
      ret = pObj->IO.Init();
 800196a:	4798      	blx	r3
}
 800196c:	bd10      	pop	{r4, pc}
    ret = VL53L4CD_INVALID_PARAM;
 800196e:	2002      	movs	r0, #2
      ret = VL53L4CD_ERROR;
 8001970:	4240      	negs	r0, r0
  return ret;
 8001972:	e7fb      	b.n	800196c <VL53L4CD_RegisterBusIO+0x28>
      ret = VL53L4CD_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	e7fb      	b.n	8001970 <VL53L4CD_RegisterBusIO+0x2c>

08001978 <MX_USART1_UART_Init>:

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;

  huart->Instance = USART1;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_USART1_UART_Init+0x5c>)
{
 800197a:	b570      	push	{r4, r5, r6, lr}
  huart->Instance = USART1;
 800197c:	6003      	str	r3, [r0, #0]
  huart->Init.BaudRate = 115200;
 800197e:	23e1      	movs	r3, #225	; 0xe1
 8001980:	025b      	lsls	r3, r3, #9
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	2600      	movs	r6, #0
  huart->Init.BaudRate = 115200;
 8001984:	6043      	str	r3, [r0, #4]
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8001986:	230c      	movs	r3, #12
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001988:	6086      	str	r6, [r0, #8]
  huart->Init.Mode = UART_MODE_TX_RX;
 800198a:	6143      	str	r3, [r0, #20]
  huart->Init.StopBits = UART_STOPBITS_1;
 800198c:	60c6      	str	r6, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800198e:	6106      	str	r6, [r0, #16]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001990:	6186      	str	r6, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001992:	61c6      	str	r6, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001994:	6206      	str	r6, [r0, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001996:	6246      	str	r6, [r0, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	6286      	str	r6, [r0, #40]	; 0x28
{
 800199a:	0004      	movs	r4, r0
  if (HAL_UART_Init(huart) != HAL_OK)
 800199c:	f001 fbe8 	bl	8003170 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a0:	0031      	movs	r1, r6
  if (HAL_UART_Init(huart) != HAL_OK)
 80019a2:	0005      	movs	r5, r0
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	0020      	movs	r0, r4
 80019a6:	f001 fc5b 	bl	8003260 <HAL_UARTEx_SetTxFifoThreshold>
 80019aa:	4305      	orrs	r5, r0
 80019ac:	b2ed      	uxtb	r5, r5
 80019ae:	1e6b      	subs	r3, r5, #1
 80019b0:	419d      	sbcs	r5, r3
  {
    ret = HAL_ERROR;
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	0031      	movs	r1, r6
 80019b4:	0020      	movs	r0, r4
    ret = HAL_ERROR;
 80019b6:	b2ed      	uxtb	r5, r5
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b8:	f001 fc76 	bl	80032a8 <HAL_UARTEx_SetRxFifoThreshold>
 80019bc:	42b0      	cmp	r0, r6
 80019be:	d000      	beq.n	80019c2 <MX_USART1_UART_Init+0x4a>
  {
    ret = HAL_ERROR;
 80019c0:	2501      	movs	r5, #1
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80019c2:	0020      	movs	r0, r4
 80019c4:	f001 fc2e 	bl	8003224 <HAL_UARTEx_DisableFifoMode>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d000      	beq.n	80019ce <MX_USART1_UART_Init+0x56>
  {
    ret = HAL_ERROR;
 80019cc:	2501      	movs	r5, #1
  }

  return ret;
}
 80019ce:	0028      	movs	r0, r5
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40013800 	.word	0x40013800

080019d8 <BSP_COM_Init>:
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b091      	sub	sp, #68	; 0x44
  if(COM > COMn)
 80019dc:	2801      	cmp	r0, #1
 80019de:	d847      	bhi.n	8001a70 <BSP_COM_Init+0x98>
     hcom_uart[COM].Instance = COM_USART[COM];
 80019e0:	2594      	movs	r5, #148	; 0x94

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019e2:	2601      	movs	r6, #1
     hcom_uart[COM].Instance = COM_USART[COM];
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <BSP_COM_Init+0xa0>)
 80019e6:	4345      	muls	r5, r0
 80019e8:	0080      	lsls	r0, r0, #2
 80019ea:	58c3      	ldr	r3, [r0, r3]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	2100      	movs	r1, #0
     hcom_uart[COM].Instance = COM_USART[COM];
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9a01      	ldr	r2, [sp, #4]
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <BSP_COM_Init+0xa4>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	a80b      	add	r0, sp, #44	; 0x2c
     hcom_uart[COM].Instance = COM_USART[COM];
 80019f6:	50ea      	str	r2, [r5, r3]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	2214      	movs	r2, #20
 80019fa:	f001 fe2c 	bl	8003656 <memset>
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80019fe:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a00:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001a02:	f001 f8eb 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a06:	2080      	movs	r0, #128	; 0x80
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <BSP_COM_Init+0xa8>)
 8001a0a:	01c0      	lsls	r0, r0, #7
 8001a0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a10:	4301      	orrs	r1, r0
 8001a12:	6419      	str	r1, [r3, #64]	; 0x40
 8001a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a18:	4002      	ands	r2, r0
 8001a1a:	9203      	str	r2, [sp, #12]
 8001a1c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a20:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4332      	orrs	r2, r6
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a28:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4033      	ands	r3, r6
 8001a2c:	9304      	str	r3, [sp, #16]
 8001a2e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8001a30:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a32:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8001a3e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a40:	f000 f8ec 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8001a44:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001a46:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8001a48:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001a4a:	05c0      	lsls	r0, r0, #23
 8001a4c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8001a4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8001a56:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001a58:	f000 f8e0 	bl	8001c1c <HAL_GPIO_Init>
    USART1_MspInit(&hcom_uart[COM]);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <BSP_COM_Init+0xa4>)
 8001a5e:	18e8      	adds	r0, r5, r3
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8001a60:	f7ff ff8a 	bl	8001978 <MX_USART1_UART_Init>
 8001a64:	42a0      	cmp	r0, r4
 8001a66:	d000      	beq.n	8001a6a <BSP_COM_Init+0x92>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a68:	3c04      	subs	r4, #4
}
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	b011      	add	sp, #68	; 0x44
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001a70:	2402      	movs	r4, #2
 8001a72:	4264      	negs	r4, r4
 8001a74:	e7f9      	b.n	8001a6a <BSP_COM_Init+0x92>
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	2000003c 	.word	0x2000003c
 8001a7c:	20000228 	.word	0x20000228
 8001a80:	40021000 	.word	0x40021000

08001a84 <__io_putchar>:
{
 8001a84:	b507      	push	{r0, r1, r2, lr}
 8001a86:	9001      	str	r0, [sp, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001a88:	2094      	movs	r0, #148	; 0x94
 8001a8a:	23fa      	movs	r3, #250	; 0xfa
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <__io_putchar+0x20>)
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	a901      	add	r1, sp, #4
 8001a94:	4350      	muls	r0, r2
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__io_putchar+0x24>)
 8001a98:	1880      	adds	r0, r0, r2
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f001 faca 	bl	8003034 <HAL_UART_Transmit>
}
 8001aa0:	9801      	ldr	r0, [sp, #4]
 8001aa2:	bd0e      	pop	{r1, r2, r3, pc}
 8001aa4:	20000224 	.word	0x20000224
 8001aa8:	20000228 	.word	0x20000228

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_InitTick+0x44>)
{
 8001ab0:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001ab2:	7819      	ldrb	r1, [r3, #0]
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001abc:	20fa      	movs	r0, #250	; 0xfa
 8001abe:	0080      	lsls	r0, r0, #2
 8001ac0:	f7fe fb32 	bl	8000128 <__udivsi3>
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_InitTick+0x48>)
 8001ac6:	0001      	movs	r1, r0
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f7fe fb2d 	bl	8000128 <__udivsi3>
 8001ace:	f000 f88b 	bl	8001be8 <HAL_SYSTICK_Config>
 8001ad2:	1e04      	subs	r4, r0, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	2d03      	cmp	r5, #3
 8001ad8:	d8ee      	bhi.n	8001ab8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ada:	0002      	movs	r2, r0
 8001adc:	2001      	movs	r0, #1
 8001ade:	0029      	movs	r1, r5
 8001ae0:	4240      	negs	r0, r0
 8001ae2:	f000 f84b 	bl	8001b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_InitTick+0x4c>)
 8001ae8:	0020      	movs	r0, r4
 8001aea:	601d      	str	r5, [r3, #0]
  return status;
 8001aec:	e7e5      	b.n	8001aba <HAL_InitTick+0xe>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	20000040 	.word	0x20000040
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000044 	.word	0x20000044

08001afc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_Init+0x24>)
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	6811      	ldr	r1, [r2, #0]
{
 8001b04:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b06:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b08:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0c:	f7ff ffce 	bl	8001aac <HAL_InitTick>
 8001b10:	1e04      	subs	r4, r0, #0
 8001b12:	d103      	bne.n	8001b1c <HAL_Init+0x20>
  HAL_MspInit();
 8001b14:	f7ff fa9e 	bl	8001054 <HAL_MspInit>
}
 8001b18:	0020      	movs	r0, r4
 8001b1a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001b1c:	2401      	movs	r4, #1
 8001b1e:	e7fb      	b.n	8001b18 <HAL_Init+0x1c>
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <HAL_IncTick+0x10>)
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_IncTick+0x14>)
 8001b28:	6811      	ldr	r1, [r2, #0]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	4770      	bx	lr
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	200002bc 	.word	0x200002bc
 8001b38:	20000040 	.word	0x20000040

08001b3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b3c:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <HAL_GetTick+0x8>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
}
 8001b40:	4770      	bx	lr
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	200002bc 	.word	0x200002bc

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fff6 	bl	8001b3c <HAL_GetTick>
 8001b50:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	1c63      	adds	r3, r4, #1
 8001b54:	d002      	beq.n	8001b5c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_Delay+0x20>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	1b40      	subs	r0, r0, r5
 8001b62:	42a0      	cmp	r0, r4
 8001b64:	d3fa      	bcc.n	8001b5c <HAL_Delay+0x14>
  {
  }
}
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	20000040 	.word	0x20000040

08001b6c <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8001b6c:	4a02      	ldr	r2, [pc, #8]	; (8001b78 <HAL_SYSCFG_EnableRemap+0xc>)
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	4303      	orrs	r3, r0
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	4770      	bx	lr
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40010000 	.word	0x40010000

08001b7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7e:	25ff      	movs	r5, #255	; 0xff
 8001b80:	2403      	movs	r4, #3
 8001b82:	002a      	movs	r2, r5
 8001b84:	4004      	ands	r4, r0
 8001b86:	00e4      	lsls	r4, r4, #3
 8001b88:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8a:	0189      	lsls	r1, r1, #6
 8001b8c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b8e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b90:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b92:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001b94:	2800      	cmp	r0, #0
 8001b96:	db0a      	blt.n	8001bae <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	24c0      	movs	r4, #192	; 0xc0
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_NVIC_SetPriority+0x4c>)
 8001b9c:	0880      	lsrs	r0, r0, #2
 8001b9e:	0080      	lsls	r0, r0, #2
 8001ba0:	18c0      	adds	r0, r0, r3
 8001ba2:	00a4      	lsls	r4, r4, #2
 8001ba4:	5903      	ldr	r3, [r0, r4]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	5101      	str	r1, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001bac:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bae:	200f      	movs	r0, #15
 8001bb0:	4003      	ands	r3, r0
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <HAL_NVIC_SetPriority+0x50>)
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	181b      	adds	r3, r3, r0
 8001bbc:	69d8      	ldr	r0, [r3, #28]
 8001bbe:	4002      	ands	r2, r0
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	61d9      	str	r1, [r3, #28]
 8001bc4:	e7f2      	b.n	8001bac <HAL_NVIC_SetPriority+0x30>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	db05      	blt.n	8001be0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd4:	231f      	movs	r3, #31
 8001bd6:	4018      	ands	r0, r3
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	4083      	lsls	r3, r0
 8001bdc:	4a01      	ldr	r2, [pc, #4]	; (8001be4 <HAL_NVIC_EnableIRQ+0x14>)
 8001bde:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001be0:	4770      	bx	lr
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	1e43      	subs	r3, r0, #1
 8001bec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d20d      	bcs.n	8001c10 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bfc:	6a03      	ldr	r3, [r0, #32]
 8001bfe:	0609      	lsls	r1, r1, #24
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001c10:	4770      	bx	lr
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	e000e010 	.word	0xe000e010
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001c1c:	2300      	movs	r3, #0
{
 8001c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c20:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	680a      	ldr	r2, [r1, #0]
 8001c24:	0014      	movs	r4, r2
 8001c26:	40dc      	lsrs	r4, r3
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001c2a:	b005      	add	sp, #20
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c2e:	2501      	movs	r5, #1
 8001c30:	0014      	movs	r4, r2
 8001c32:	409d      	lsls	r5, r3
 8001c34:	402c      	ands	r4, r5
 8001c36:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001c38:	422a      	tst	r2, r5
 8001c3a:	d100      	bne.n	8001c3e <HAL_GPIO_Init+0x22>
 8001c3c:	e08e      	b.n	8001d5c <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c3e:	684a      	ldr	r2, [r1, #4]
 8001c40:	005e      	lsls	r6, r3, #1
 8001c42:	4694      	mov	ip, r2
 8001c44:	2203      	movs	r2, #3
 8001c46:	4664      	mov	r4, ip
 8001c48:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4a:	2403      	movs	r4, #3
 8001c4c:	40b4      	lsls	r4, r6
 8001c4e:	43e4      	mvns	r4, r4
 8001c50:	9402      	str	r4, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c52:	1e54      	subs	r4, r2, #1
 8001c54:	2c01      	cmp	r4, #1
 8001c56:	d82a      	bhi.n	8001cae <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001c58:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5a:	9c02      	ldr	r4, [sp, #8]
 8001c5c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5e:	68cc      	ldr	r4, [r1, #12]
 8001c60:	40b4      	lsls	r4, r6
 8001c62:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001c64:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c66:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c68:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	43ac      	bics	r4, r5
 8001c6c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6e:	4664      	mov	r4, ip
 8001c70:	0924      	lsrs	r4, r4, #4
 8001c72:	403c      	ands	r4, r7
 8001c74:	409c      	lsls	r4, r3
 8001c76:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001c78:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001c7a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c7c:	9c02      	ldr	r4, [sp, #8]
 8001c7e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c80:	688c      	ldr	r4, [r1, #8]
 8001c82:	40b4      	lsls	r4, r6
 8001c84:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001c86:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	2a02      	cmp	r2, #2
 8001c8a:	d112      	bne.n	8001cb2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001c8c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8e:	2507      	movs	r5, #7
 8001c90:	00a4      	lsls	r4, r4, #2
 8001c92:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c96:	9403      	str	r4, [sp, #12]
 8001c98:	240f      	movs	r4, #15
 8001c9a:	401d      	ands	r5, r3
 8001c9c:	00ad      	lsls	r5, r5, #2
 8001c9e:	40ac      	lsls	r4, r5
 8001ca0:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	690c      	ldr	r4, [r1, #16]
 8001ca4:	40ac      	lsls	r4, r5
 8001ca6:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001ca8:	9c03      	ldr	r4, [sp, #12]
 8001caa:	6227      	str	r7, [r4, #32]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	2a03      	cmp	r2, #3
 8001cb0:	d1e3      	bne.n	8001c7a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001cb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb4:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb6:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb8:	4025      	ands	r5, r4
 8001cba:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cbc:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001cbe:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc0:	24c0      	movs	r4, #192	; 0xc0
 8001cc2:	4662      	mov	r2, ip
 8001cc4:	02a4      	lsls	r4, r4, #10
 8001cc6:	4222      	tst	r2, r4
 8001cc8:	d048      	beq.n	8001d5c <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ccc:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001cce:	089c      	lsrs	r4, r3, #2
 8001cd0:	00a4      	lsls	r4, r4, #2
 8001cd2:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	401d      	ands	r5, r3
 8001cd8:	00ed      	lsls	r5, r5, #3
 8001cda:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001cdc:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001cde:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ce0:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ce2:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	42b8      	cmp	r0, r7
 8001ce8:	d00c      	beq.n	8001d04 <HAL_GPIO_Init+0xe8>
 8001cea:	4f1e      	ldr	r7, [pc, #120]	; (8001d64 <HAL_GPIO_Init+0x148>)
 8001cec:	3201      	adds	r2, #1
 8001cee:	42b8      	cmp	r0, r7
 8001cf0:	d008      	beq.n	8001d04 <HAL_GPIO_Init+0xe8>
 8001cf2:	4f1d      	ldr	r7, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x14c>)
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	42b8      	cmp	r0, r7
 8001cf8:	d004      	beq.n	8001d04 <HAL_GPIO_Init+0xe8>
 8001cfa:	4f1c      	ldr	r7, [pc, #112]	; (8001d6c <HAL_GPIO_Init+0x150>)
 8001cfc:	3201      	adds	r2, #1
 8001cfe:	42b8      	cmp	r0, r7
 8001d00:	d000      	beq.n	8001d04 <HAL_GPIO_Init+0xe8>
 8001d02:	3202      	adds	r2, #2
 8001d04:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d08:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001d0a:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8001d0c:	4c14      	ldr	r4, [pc, #80]	; (8001d60 <HAL_GPIO_Init+0x144>)
        temp &= ~(iocurrent);
 8001d0e:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR1;
 8001d10:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8001d12:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001d14:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001d16:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d18:	02ff      	lsls	r7, r7, #11
 8001d1a:	d401      	bmi.n	8001d20 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 8001d1c:	0035      	movs	r5, r6
 8001d1e:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d20:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001d22:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001d24:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001d26:	9d01      	ldr	r5, [sp, #4]
 8001d28:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d2a:	02bf      	lsls	r7, r7, #10
 8001d2c:	d401      	bmi.n	8001d32 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001d2e:	0035      	movs	r5, r6
 8001d30:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d32:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8001d34:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8001d36:	4c0e      	ldr	r4, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x154>)
          temp |= iocurrent;
 8001d38:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->EMR1;
 8001d3a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001d3c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3e:	03bf      	lsls	r7, r7, #14
 8001d40:	d401      	bmi.n	8001d46 <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 8001d42:	0035      	movs	r5, r6
 8001d44:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d46:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001d48:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8001d4a:	4c0a      	ldr	r4, [pc, #40]	; (8001d74 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8001d4c:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->IMR1;
 8001d4e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001d50:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d52:	03ff      	lsls	r7, r7, #15
 8001d54:	d401      	bmi.n	8001d5a <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 8001d56:	4015      	ands	r5, r2
 8001d58:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8001d5a:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	e760      	b.n	8001c22 <HAL_GPIO_Init+0x6>
 8001d60:	40021800 	.word	0x40021800
 8001d64:	50000400 	.word	0x50000400
 8001d68:	50000800 	.word	0x50000800
 8001d6c:	50000c00 	.word	0x50000c00
 8001d70:	40021808 	.word	0x40021808
 8001d74:	40021804 	.word	0x40021804

08001d78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8001d7a:	2300      	movs	r3, #0
{
 8001d7c:	000f      	movs	r7, r1
 8001d7e:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d80:	003a      	movs	r2, r7
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_DeInit+0x12>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 8001d86:	b005      	add	sp, #20
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	0014      	movs	r4, r2
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 8001d94:	4217      	tst	r7, r2
 8001d96:	d053      	beq.n	8001e40 <HAL_GPIO_DeInit+0xc8>
      tmp = EXTI->EXTICR[position >> 2u];
 8001d98:	492a      	ldr	r1, [pc, #168]	; (8001e44 <HAL_GPIO_DeInit+0xcc>)
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001d9a:	2503      	movs	r5, #3
      tmp = EXTI->EXTICR[position >> 2u];
 8001d9c:	089a      	lsrs	r2, r3, #2
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	1852      	adds	r2, r2, r1
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001da2:	210f      	movs	r1, #15
 8001da4:	401d      	ands	r5, r3
 8001da6:	00ed      	lsls	r5, r5, #3
 8001da8:	40a9      	lsls	r1, r5
      tmp = EXTI->EXTICR[position >> 2u];
 8001daa:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001dac:	9102      	str	r1, [sp, #8]
 8001dae:	400e      	ands	r6, r1
 8001db0:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001db2:	26a0      	movs	r6, #160	; 0xa0
 8001db4:	2100      	movs	r1, #0
 8001db6:	05f6      	lsls	r6, r6, #23
 8001db8:	42b0      	cmp	r0, r6
 8001dba:	d00f      	beq.n	8001ddc <HAL_GPIO_DeInit+0x64>
 8001dbc:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_GPIO_DeInit+0xd0>)
 8001dbe:	468c      	mov	ip, r1
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4560      	cmp	r0, ip
 8001dc4:	d00a      	beq.n	8001ddc <HAL_GPIO_DeInit+0x64>
 8001dc6:	4921      	ldr	r1, [pc, #132]	; (8001e4c <HAL_GPIO_DeInit+0xd4>)
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4560      	cmp	r0, ip
 8001dce:	d005      	beq.n	8001ddc <HAL_GPIO_DeInit+0x64>
 8001dd0:	491f      	ldr	r1, [pc, #124]	; (8001e50 <HAL_GPIO_DeInit+0xd8>)
 8001dd2:	468c      	mov	ip, r1
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	4560      	cmp	r0, ip
 8001dd8:	d000      	beq.n	8001ddc <HAL_GPIO_DeInit+0x64>
 8001dda:	3102      	adds	r1, #2
 8001ddc:	40a9      	lsls	r1, r5
 8001dde:	9d03      	ldr	r5, [sp, #12]
 8001de0:	42a9      	cmp	r1, r5
 8001de2:	d112      	bne.n	8001e0a <HAL_GPIO_DeInit+0x92>
        EXTI->IMR1 &= ~(iocurrent);
 8001de4:	4e1b      	ldr	r6, [pc, #108]	; (8001e54 <HAL_GPIO_DeInit+0xdc>)
 8001de6:	4917      	ldr	r1, [pc, #92]	; (8001e44 <HAL_GPIO_DeInit+0xcc>)
 8001de8:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8001dea:	43a5      	bics	r5, r4
 8001dec:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8001dee:	4e1a      	ldr	r6, [pc, #104]	; (8001e58 <HAL_GPIO_DeInit+0xe0>)
 8001df0:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8001df2:	43a5      	bics	r5, r4
 8001df4:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->FTSR1 &= ~(iocurrent);
 8001df6:	684d      	ldr	r5, [r1, #4]
 8001df8:	43a5      	bics	r5, r4
 8001dfa:	604d      	str	r5, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001dfc:	680d      	ldr	r5, [r1, #0]
 8001dfe:	43a5      	bics	r5, r4
 8001e00:	600d      	str	r5, [r1, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001e02:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e04:	9c02      	ldr	r4, [sp, #8]
 8001e06:	43a1      	bics	r1, r4
 8001e08:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e0a:	2403      	movs	r4, #3
 8001e0c:	0059      	lsls	r1, r3, #1
 8001e0e:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e10:	2107      	movs	r1, #7
 8001e12:	260f      	movs	r6, #15
 8001e14:	4019      	ands	r1, r3
 8001e16:	0089      	lsls	r1, r1, #2
 8001e18:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e1a:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1c:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e1e:	4322      	orrs	r2, r4
 8001e20:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	0092      	lsls	r2, r2, #2
 8001e26:	1882      	adds	r2, r0, r2
 8001e28:	6a15      	ldr	r5, [r2, #32]
 8001e2a:	43b5      	bics	r5, r6
 8001e2c:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e2e:	6882      	ldr	r2, [r0, #8]
 8001e30:	43a2      	bics	r2, r4
 8001e32:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e34:	6842      	ldr	r2, [r0, #4]
 8001e36:	438a      	bics	r2, r1
 8001e38:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e3a:	68c2      	ldr	r2, [r0, #12]
 8001e3c:	43a2      	bics	r2, r4
 8001e3e:	60c2      	str	r2, [r0, #12]
    position++;
 8001e40:	3301      	adds	r3, #1
 8001e42:	e79d      	b.n	8001d80 <HAL_GPIO_DeInit+0x8>
 8001e44:	40021800 	.word	0x40021800
 8001e48:	50000400 	.word	0x50000400
 8001e4c:	50000800 	.word	0x50000800
 8001e50:	50000c00 	.word	0x50000c00
 8001e54:	40021804 	.word	0x40021804
 8001e58:	40021808 	.word	0x40021808

08001e5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e60:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e62:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e64:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001e66:	e7fc      	b.n	8001e62 <HAL_GPIO_WritePin+0x6>

08001e68 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e68:	4770      	bx	lr

08001e6a <HAL_GPIO_EXTI_Falling_Callback>:
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_EXTI_IRQHandler>:
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001e6e:	4d08      	ldr	r5, [pc, #32]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8001e70:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001e72:	68eb      	ldr	r3, [r5, #12]
 8001e74:	4218      	tst	r0, r3
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e78:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e7a:	f7ff fff5 	bl	8001e68 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001e7e:	692b      	ldr	r3, [r5, #16]
 8001e80:	4223      	tst	r3, r4
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e84:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e86:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e88:	f7ff ffef 	bl	8001e6a <HAL_GPIO_EXTI_Falling_Callback>
}
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021800 	.word	0x40021800

08001e94 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	0792      	lsls	r2, r2, #30
 8001e9a:	d501      	bpl.n	8001ea0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	6999      	ldr	r1, [r3, #24]
 8001ea4:	4211      	tst	r1, r2
 8001ea6:	d102      	bne.n	8001eae <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ea8:	6999      	ldr	r1, [r3, #24]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	619a      	str	r2, [r3, #24]
  }
}
 8001eae:	4770      	bx	lr

08001eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001eb0:	b530      	push	{r4, r5, lr}
 8001eb2:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eb4:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb6:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eb8:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eba:	0589      	lsls	r1, r1, #22
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <I2C_TransferConfig+0x28>)
 8001ec2:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec4:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ec6:	0d64      	lsrs	r4, r4, #21
 8001ec8:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eca:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ecc:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ece:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ed0:	432a      	orrs	r2, r5
 8001ed2:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ed4:	bd30      	pop	{r4, r5, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	03ff63ff 	.word	0x03ff63ff

08001edc <I2C_IsErrorOccurred>:
{
 8001edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ede:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ee0:	6802      	ldr	r2, [r0, #0]
{
 8001ee2:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ee4:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	000f      	movs	r7, r1
{
 8001eea:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eec:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ef0:	4219      	tst	r1, r3
 8001ef2:	d00e      	beq.n	8001f12 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ef4:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001ef8:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	423a      	tst	r2, r7
 8001f02:	d164      	bne.n	8001fce <I2C_IsErrorOccurred+0xf2>
 8001f04:	9a01      	ldr	r2, [sp, #4]
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d032      	beq.n	8001f70 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8001f0a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001f0c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f12:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001f14:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f16:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8001f18:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f1a:	420a      	tst	r2, r1
 8001f1c:	d002      	beq.n	8001f24 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8001f1e:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f20:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001f22:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	00c9      	lsls	r1, r1, #3
 8001f28:	420a      	tst	r2, r1
 8001f2a:	d003      	beq.n	8001f34 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8001f2c:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f2e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8001f30:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8001f32:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0089      	lsls	r1, r1, #2
 8001f38:	420a      	tst	r2, r1
 8001f3a:	d04d      	beq.n	8001fd8 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f3c:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f3e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f40:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8001f42:	0020      	movs	r0, r4
 8001f44:	f7ff ffa6 	bl	8001e94 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <I2C_IsErrorOccurred+0x104>)
 8001f4c:	6853      	ldr	r3, [r2, #4]
 8001f4e:	400b      	ands	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	0023      	movs	r3, r4
 8001f54:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001f56:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8001f5a:	4307      	orrs	r7, r0
 8001f5c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	0022      	movs	r2, r4
 8001f62:	2300      	movs	r3, #0
 8001f64:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f66:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	7023      	strb	r3, [r4, #0]
 8001f6e:	e035      	b.n	8001fdc <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	d0c4      	beq.n	8001efe <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f74:	f7ff fde2 	bl	8001b3c <HAL_GetTick>
 8001f78:	1b40      	subs	r0, r0, r5
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	d801      	bhi.n	8001f82 <I2C_IsErrorOccurred+0xa6>
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d1bc      	bne.n	8001efc <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001f82:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f84:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001f86:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f88:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001f8a:	7811      	ldrb	r1, [r2, #0]
 8001f8c:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f8e:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8001f90:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	0209      	lsls	r1, r1, #8
 8001f96:	420a      	tst	r2, r1
 8001f98:	d00c      	beq.n	8001fb4 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f9e:	4210      	tst	r0, r2
 8001fa0:	d108      	bne.n	8001fb4 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	2920      	cmp	r1, #32
 8001fa6:	d005      	beq.n	8001fb4 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001fae:	f7ff fdc5 	bl	8001b3c <HAL_GetTick>
 8001fb2:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	423b      	tst	r3, r7
 8001fba:	d19f      	bne.n	8001efc <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fbc:	f7ff fdbe 	bl	8001b3c <HAL_GetTick>
 8001fc0:	1b40      	subs	r0, r0, r5
 8001fc2:	2819      	cmp	r0, #25
 8001fc4:	d9f6      	bls.n	8001fb4 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001fc8:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	e796      	b.n	8001efc <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8001fce:	9a01      	ldr	r2, [sp, #4]
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	d19a      	bne.n	8001f0a <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd4:	61df      	str	r7, [r3, #28]
 8001fd6:	e798      	b.n	8001f0a <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d1b2      	bne.n	8001f42 <I2C_IsErrorOccurred+0x66>
}
 8001fdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	fe00e800 	.word	0xfe00e800

08001fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	0004      	movs	r4, r0
 8001fe8:	000d      	movs	r5, r1
 8001fea:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fec:	2702      	movs	r7, #2
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	423b      	tst	r3, r7
 8001ff4:	d001      	beq.n	8001ffa <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ff6:	2000      	movs	r0, #0
}
 8001ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	0032      	movs	r2, r6
 8001ffc:	0029      	movs	r1, r5
 8001ffe:	0020      	movs	r0, r4
 8002000:	f7ff ff6c 	bl	8001edc <I2C_IsErrorOccurred>
 8002004:	2800      	cmp	r0, #0
 8002006:	d115      	bne.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002008:	1c6b      	adds	r3, r5, #1
 800200a:	d0f0      	beq.n	8001fee <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200c:	f7ff fd96 	bl	8001b3c <HAL_GetTick>
 8002010:	1b80      	subs	r0, r0, r6
 8002012:	42a8      	cmp	r0, r5
 8002014:	d801      	bhi.n	800201a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002016:	2d00      	cmp	r5, #0
 8002018:	d1e9      	bne.n	8001fee <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	2220      	movs	r2, #32
 800201c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800201e:	4313      	orrs	r3, r2
 8002020:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002022:	0023      	movs	r3, r4
 8002024:	3341      	adds	r3, #65	; 0x41
 8002026:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	0022      	movs	r2, r4
 800202a:	2300      	movs	r3, #0
 800202c:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800202e:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002032:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
 8002036:	e7df      	b.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08002038 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	0004      	movs	r4, r0
 800203c:	000d      	movs	r5, r1
 800203e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002040:	2704      	movs	r7, #4
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	423b      	tst	r3, r7
 8002048:	d111      	bne.n	800206e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	0032      	movs	r2, r6
 800204c:	0029      	movs	r1, r5
 800204e:	0020      	movs	r0, r4
 8002050:	f7ff ff44 	bl	8001edc <I2C_IsErrorOccurred>
 8002054:	2800      	cmp	r0, #0
 8002056:	d124      	bne.n	80020a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002058:	2120      	movs	r1, #32
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	420a      	tst	r2, r1
 8002060:	d023      	beq.n	80020aa <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	423a      	tst	r2, r7
 8002066:	d004      	beq.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002068:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800206a:	2a00      	cmp	r2, #0
 800206c:	d001      	beq.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 800206e:	2000      	movs	r0, #0
}
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002072:	6999      	ldr	r1, [r3, #24]
 8002074:	2210      	movs	r2, #16
 8002076:	0008      	movs	r0, r1
 8002078:	4010      	ands	r0, r2
 800207a:	4211      	tst	r1, r2
 800207c:	d013      	beq.n	80020a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002080:	3a0c      	subs	r2, #12
 8002082:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002084:	2120      	movs	r1, #32
 8002086:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4810      	ldr	r0, [pc, #64]	; (80020cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>)
 800208c:	4002      	ands	r2, r0
 800208e:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8002090:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002094:	3341      	adds	r3, #65	; 0x41
 8002096:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	2300      	movs	r3, #0
 800209a:	3242      	adds	r2, #66	; 0x42
 800209c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800209e:	3440      	adds	r4, #64	; 0x40
      __HAL_UNLOCK(hi2c);
 80020a0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
 80020a4:	e7e4      	b.n	8002070 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a6:	6460      	str	r0, [r4, #68]	; 0x44
 80020a8:	e7ec      	b.n	8002084 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff fd47 	bl	8001b3c <HAL_GetTick>
 80020ae:	1b80      	subs	r0, r0, r6
 80020b0:	42a8      	cmp	r0, r5
 80020b2:	d801      	bhi.n	80020b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	d1c4      	bne.n	8002042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	2220      	movs	r2, #32
 80020ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020bc:	4313      	orrs	r3, r2
 80020be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	0023      	movs	r3, r4
 80020c2:	3341      	adds	r3, #65	; 0x41
 80020c4:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80020c6:	3440      	adds	r4, #64	; 0x40
 80020c8:	2300      	movs	r3, #0
 80020ca:	e7e9      	b.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80020cc:	fe00e800 	.word	0xfe00e800

080020d0 <I2C_WaitOnFlagUntilTimeout>:
{
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	0004      	movs	r4, r0
 80020d4:	000e      	movs	r6, r1
 80020d6:	0017      	movs	r7, r2
 80020d8:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020da:	6822      	ldr	r2, [r4, #0]
 80020dc:	6993      	ldr	r3, [r2, #24]
 80020de:	4033      	ands	r3, r6
 80020e0:	1b9b      	subs	r3, r3, r6
 80020e2:	4259      	negs	r1, r3
 80020e4:	414b      	adcs	r3, r1
 80020e6:	42bb      	cmp	r3, r7
 80020e8:	d001      	beq.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80020ea:	2000      	movs	r0, #0
 80020ec:	e017      	b.n	800211e <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	1c6b      	adds	r3, r5, #1
 80020f0:	d0f4      	beq.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7ff fd23 	bl	8001b3c <HAL_GetTick>
 80020f6:	9b06      	ldr	r3, [sp, #24]
 80020f8:	1ac0      	subs	r0, r0, r3
 80020fa:	42a8      	cmp	r0, r5
 80020fc:	d801      	bhi.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x32>
 80020fe:	2d00      	cmp	r5, #0
 8002100:	d1eb      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	2220      	movs	r2, #32
 8002104:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002106:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	4313      	orrs	r3, r2
 800210a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800210c:	0023      	movs	r3, r4
 800210e:	3341      	adds	r3, #65	; 0x41
 8002110:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	0022      	movs	r2, r4
 8002114:	2300      	movs	r3, #0
 8002116:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002118:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800211c:	7023      	strb	r3, [r4, #0]
}
 800211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002120 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	0004      	movs	r4, r0
 8002124:	000d      	movs	r5, r1
 8002126:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002128:	2720      	movs	r7, #32
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	423b      	tst	r3, r7
 8002130:	d001      	beq.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002132:	2000      	movs	r0, #0
}
 8002134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002136:	0032      	movs	r2, r6
 8002138:	0029      	movs	r1, r5
 800213a:	0020      	movs	r0, r4
 800213c:	f7ff fece 	bl	8001edc <I2C_IsErrorOccurred>
 8002140:	2800      	cmp	r0, #0
 8002142:	d113      	bne.n	800216c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff fcfa 	bl	8001b3c <HAL_GetTick>
 8002148:	1b80      	subs	r0, r0, r6
 800214a:	42a8      	cmp	r0, r5
 800214c:	d801      	bhi.n	8002152 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800214e:	2d00      	cmp	r5, #0
 8002150:	d1eb      	bne.n	800212a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002152:	2220      	movs	r2, #32
 8002154:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002156:	4313      	orrs	r3, r2
 8002158:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800215a:	0023      	movs	r3, r4
 800215c:	3341      	adds	r3, #65	; 0x41
 800215e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	0022      	movs	r2, r4
 8002162:	2300      	movs	r3, #0
 8002164:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002166:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800216a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
 800216e:	e7e1      	b.n	8002134 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002170 <HAL_I2C_MspInit>:
}
 8002170:	4770      	bx	lr
	...

08002174 <HAL_I2C_Init>:
{
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002178:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800217a:	2c00      	cmp	r4, #0
 800217c:	d03f      	beq.n	80021fe <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	0025      	movs	r5, r4
 8002180:	3541      	adds	r5, #65	; 0x41
 8002182:	782b      	ldrb	r3, [r5, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	0023      	movs	r3, r4
 800218c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800218e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002190:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002192:	f7ff ffed 	bl	8002170 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002196:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002198:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800219a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800219c:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800219e:	481d      	ldr	r0, [pc, #116]	; (8002214 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021a2:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80021a4:	438a      	bics	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a8:	6861      	ldr	r1, [r4, #4]
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_I2C_Init+0xa4>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4002      	ands	r2, r0
 80021b4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	68e2      	ldr	r2, [r4, #12]
 80021b8:	2a01      	cmp	r2, #1
 80021ba:	d121      	bne.n	8002200 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0209      	lsls	r1, r1, #8
 80021c0:	4331      	orrs	r1, r6
 80021c2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4915      	ldr	r1, [pc, #84]	; (800221c <HAL_I2C_Init+0xa8>)
 80021c8:	4311      	orrs	r1, r2
 80021ca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021cc:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ce:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d0:	4002      	ands	r2, r0
 80021d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d4:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d6:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021da:	69a1      	ldr	r1, [r4, #24]
 80021dc:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021de:	430a      	orrs	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e2:	6a21      	ldr	r1, [r4, #32]
 80021e4:	69e2      	ldr	r2, [r4, #28]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80021ea:	2201      	movs	r2, #1
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	3442      	adds	r4, #66	; 0x42
 80021fc:	7020      	strb	r0, [r4, #0]
}
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002200:	2184      	movs	r1, #132	; 0x84
 8002202:	0209      	lsls	r1, r1, #8
 8002204:	4331      	orrs	r1, r6
 8002206:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002208:	2a02      	cmp	r2, #2
 800220a:	d1db      	bne.n	80021c4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e7d7      	b.n	80021c4 <HAL_I2C_Init+0x50>
 8002214:	ffff7fff 	.word	0xffff7fff
 8002218:	f0ffffff 	.word	0xf0ffffff
 800221c:	02008000 	.word	0x02008000

08002220 <HAL_I2C_MspDeInit>:
 8002220:	4770      	bx	lr

08002222 <HAL_I2C_DeInit>:
{
 8002222:	b570      	push	{r4, r5, r6, lr}
 8002224:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002226:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002228:	2c00      	cmp	r4, #0
 800222a:	d013      	beq.n	8002254 <HAL_I2C_DeInit+0x32>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800222c:	0025      	movs	r5, r4
 800222e:	2324      	movs	r3, #36	; 0x24
 8002230:	3541      	adds	r5, #65	; 0x41
 8002232:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	4383      	bics	r3, r0
 800223a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800223c:	0020      	movs	r0, r4
 800223e:	f7ff ffef 	bl	8002220 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002242:	2000      	movs	r0, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 800224a:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800224c:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(hi2c);
 800224e:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8002252:	7020      	strb	r0, [r4, #0]
}
 8002254:	bd70      	pop	{r4, r5, r6, pc}
	...

08002258 <HAL_I2C_Master_Transmit>:
{
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800225e:	0003      	movs	r3, r0
 8002260:	3341      	adds	r3, #65	; 0x41
{
 8002262:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002264:	9303      	str	r3, [sp, #12]
 8002266:	781b      	ldrb	r3, [r3, #0]
{
 8002268:	0004      	movs	r4, r0
 800226a:	000f      	movs	r7, r1
    return HAL_BUSY;
 800226c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	2b20      	cmp	r3, #32
 8002270:	d114      	bne.n	800229c <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8002272:	0023      	movs	r3, r4
 8002274:	3340      	adds	r3, #64	; 0x40
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	2a01      	cmp	r2, #1
 800227a:	d00f      	beq.n	800229c <HAL_I2C_Master_Transmit+0x44>
 800227c:	2601      	movs	r6, #1
 800227e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002280:	f7ff fc5c 	bl	8001b3c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002284:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002286:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002288:	9000      	str	r0, [sp, #0]
 800228a:	2319      	movs	r3, #25
 800228c:	0032      	movs	r2, r6
 800228e:	0020      	movs	r0, r4
 8002290:	0209      	lsls	r1, r1, #8
 8002292:	f7ff ff1d 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8002296:	2800      	cmp	r0, #0
 8002298:	d002      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800229a:	2001      	movs	r0, #1
}
 800229c:	b007      	add	sp, #28
 800229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a0:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022a2:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a4:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022a6:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022aa:	3b11      	subs	r3, #17
 80022ac:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80022ae:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80022b2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80022b4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80022b6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80022b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_I2C_Master_Transmit+0x11c>)
 80022be:	2aff      	cmp	r2, #255	; 0xff
 80022c0:	d920      	bls.n	8002304 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022cc:	0039      	movs	r1, r7
 80022ce:	0020      	movs	r0, r4
 80022d0:	f7ff fdee 	bl	8001eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	002a      	movs	r2, r5
 80022d8:	0020      	movs	r0, r4
 80022da:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d119      	bne.n	8002314 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e0:	f7ff ff1e 	bl	8002120 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d1d8      	bne.n	800229a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e8:	2120      	movs	r1, #32
 80022ea:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80022ec:	4d22      	ldr	r5, [pc, #136]	; (8002378 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	402a      	ands	r2, r5
 80022f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80022f8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	3341      	adds	r3, #65	; 0x41
 80022fc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022fe:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002300:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002302:	e7cb      	b.n	800229c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002304:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002306:	b292      	uxth	r2, r2
 8002308:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	e7db      	b.n	80022cc <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	f7ff fe66 	bl	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002318:	2800      	cmp	r0, #0
 800231a:	d1be      	bne.n	800229a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800231c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800231e:	6822      	ldr	r2, [r4, #0]
 8002320:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002322:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002324:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002326:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002328:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800232a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800232c:	3b01      	subs	r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002332:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002334:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002336:	b292      	uxth	r2, r2
 8002338:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ca      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x7c>
 800233e:	2a00      	cmp	r2, #0
 8002340:	d1c8      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0020      	movs	r0, r4
 8002346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002348:	9500      	str	r5, [sp, #0]
 800234a:	f7ff fec1 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 800234e:	2800      	cmp	r0, #0
 8002350:	d1a3      	bne.n	800229a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d906      	bls.n	8002366 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002358:	23ff      	movs	r3, #255	; 0xff
 800235a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	9000      	str	r0, [sp, #0]
 8002362:	045b      	lsls	r3, r3, #17
 8002364:	e7b2      	b.n	80022cc <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002366:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002368:	b292      	uxth	r2, r2
 800236a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	9000      	str	r0, [sp, #0]
 8002370:	e7cd      	b.n	800230e <HAL_I2C_Master_Transmit+0xb6>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	80002000 	.word	0x80002000
 8002378:	fe00e800 	.word	0xfe00e800

0800237c <HAL_I2C_Master_Receive>:
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002382:	0003      	movs	r3, r0
 8002384:	3341      	adds	r3, #65	; 0x41
{
 8002386:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	9303      	str	r3, [sp, #12]
 800238a:	781b      	ldrb	r3, [r3, #0]
{
 800238c:	0004      	movs	r4, r0
 800238e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002390:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002392:	2b20      	cmp	r3, #32
 8002394:	d114      	bne.n	80023c0 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8002396:	0023      	movs	r3, r4
 8002398:	3340      	adds	r3, #64	; 0x40
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	2a01      	cmp	r2, #1
 800239e:	d00f      	beq.n	80023c0 <HAL_I2C_Master_Receive+0x44>
 80023a0:	2601      	movs	r6, #1
 80023a2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80023a4:	f7ff fbca 	bl	8001b3c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80023aa:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2319      	movs	r3, #25
 80023b0:	0032      	movs	r2, r6
 80023b2:	0020      	movs	r0, r4
 80023b4:	0209      	lsls	r1, r1, #8
 80023b6:	f7ff fe8b 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
}
 80023c0:	b007      	add	sp, #28
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023c4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023c6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023c8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ca:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023cc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ce:	3b12      	subs	r3, #18
 80023d0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80023d2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80023d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80023da:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80023dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_I2C_Master_Receive+0x11c>)
 80023e2:	2aff      	cmp	r2, #255	; 0xff
 80023e4:	d920      	bls.n	8002428 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e6:	22ff      	movs	r2, #255	; 0xff
 80023e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f0:	0039      	movs	r1, r7
 80023f2:	0020      	movs	r0, r4
 80023f4:	f7ff fd5c 	bl	8001eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fa:	002a      	movs	r2, r5
 80023fc:	0020      	movs	r0, r4
 80023fe:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002400:	2b00      	cmp	r3, #0
 8002402:	d119      	bne.n	8002438 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	f7ff fe8c 	bl	8002120 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002408:	2800      	cmp	r0, #0
 800240a:	d1d8      	bne.n	80023be <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240c:	2120      	movs	r1, #32
 800240e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002410:	4d22      	ldr	r5, [pc, #136]	; (800249c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002412:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	402a      	ands	r2, r5
 8002418:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800241c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	3341      	adds	r3, #65	; 0x41
 8002420:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002422:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002424:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002426:	e7cb      	b.n	80023c0 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002428:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800242a:	b292      	uxth	r2, r2
 800242c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	049b      	lsls	r3, r3, #18
 8002436:	e7db      	b.n	80023f0 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	f7ff fdfe 	bl	8002038 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243c:	2800      	cmp	r0, #0
 800243e:	d1be      	bne.n	80023be <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002448:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800244a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800244c:	3301      	adds	r3, #1
 800244e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002450:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002452:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002454:	3b01      	subs	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800245a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800245c:	b292      	uxth	r2, r2
 800245e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0c9      	beq.n	80023f8 <HAL_I2C_Master_Receive+0x7c>
 8002464:	2a00      	cmp	r2, #0
 8002466:	d1c7      	bne.n	80023f8 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0020      	movs	r0, r4
 800246c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f7ff fe2e 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8002474:	2800      	cmp	r0, #0
 8002476:	d1a2      	bne.n	80023be <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800247a:	2bff      	cmp	r3, #255	; 0xff
 800247c:	d906      	bls.n	800248c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800247e:	23ff      	movs	r3, #255	; 0xff
 8002480:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	9000      	str	r0, [sp, #0]
 8002488:	045b      	lsls	r3, r3, #17
 800248a:	e7b1      	b.n	80023f0 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800248c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800248e:	b292      	uxth	r2, r2
 8002490:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	9000      	str	r0, [sp, #0]
 8002496:	e7cc      	b.n	8002432 <HAL_I2C_Master_Receive+0xb6>
 8002498:	80002400 	.word	0x80002400
 800249c:	fe00e800 	.word	0xfe00e800

080024a0 <HAL_I2C_GetState>:
  return hi2c->State;
 80024a0:	3041      	adds	r0, #65	; 0x41
 80024a2:	7800      	ldrb	r0, [r0, #0]
 80024a4:	b2c0      	uxtb	r0, r0
}
 80024a6:	4770      	bx	lr

080024a8 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80024a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80024aa:	4770      	bx	lr

080024ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	0004      	movs	r4, r0
 80024b0:	3441      	adds	r4, #65	; 0x41
 80024b2:	7822      	ldrb	r2, [r4, #0]
{
 80024b4:	0003      	movs	r3, r0
 80024b6:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ba:	b2d6      	uxtb	r6, r2
 80024bc:	2a20      	cmp	r2, #32
 80024be:	d118      	bne.n	80024f2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80024c0:	001d      	movs	r5, r3
 80024c2:	3540      	adds	r5, #64	; 0x40
 80024c4:	782a      	ldrb	r2, [r5, #0]
 80024c6:	2a01      	cmp	r2, #1
 80024c8:	d013      	beq.n	80024f2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3a23      	subs	r2, #35	; 0x23
 80024d2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80024d6:	4391      	bics	r1, r2
 80024d8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80024de:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	4339      	orrs	r1, r7
 80024e6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80024f0:	7028      	strb	r0, [r5, #0]
  }
}
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f4:	ffffefff 	.word	0xffffefff

080024f8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f8:	0002      	movs	r2, r0
{
 80024fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fc:	3241      	adds	r2, #65	; 0x41
 80024fe:	7814      	ldrb	r4, [r2, #0]
{
 8002500:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002504:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	2c20      	cmp	r4, #32
 8002508:	d117      	bne.n	800253a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800250a:	001c      	movs	r4, r3
 800250c:	3440      	adds	r4, #64	; 0x40
 800250e:	7826      	ldrb	r6, [r4, #0]
 8002510:	2e01      	cmp	r6, #1
 8002512:	d012      	beq.n	800253a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	3022      	adds	r0, #34	; 0x22
 8002516:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3823      	subs	r0, #35	; 0x23
 800251c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800251e:	4f07      	ldr	r7, [pc, #28]	; (800253c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002520:	4386      	bics	r6, r0
 8002522:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002524:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002526:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002528:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800252a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 800252c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	4308      	orrs	r0, r1
 8002532:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002534:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002538:	7020      	strb	r0, [r4, #0]
  }
}
 800253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253c:	fffff0ff 	.word	0xfffff0ff

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002542:	4c11      	ldr	r4, [pc, #68]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002544:	4911      	ldr	r1, [pc, #68]	; (800258c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002546:	6823      	ldr	r3, [r4, #0]
{
 8002548:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800254a:	400b      	ands	r3, r1
 800254c:	4303      	orrs	r3, r0
 800254e:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002550:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002552:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	429a      	cmp	r2, r3
 8002558:	d10e      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800255c:	490d      	ldr	r1, [pc, #52]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	2306      	movs	r3, #6
 8002562:	4358      	muls	r0, r3
 8002564:	f7fd fde0 	bl	8000128 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002568:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800256a:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256c:	00d2      	lsls	r2, r2, #3
 800256e:	6961      	ldr	r1, [r4, #20]
 8002570:	0008      	movs	r0, r1
 8002572:	4010      	ands	r0, r2
 8002574:	4211      	tst	r1, r2
 8002576:	d100      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8002578:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 800257e:	3b01      	subs	r3, #1
 8002580:	e7f5      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002582:	2003      	movs	r0, #3
 8002584:	e7f8      	b.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x38>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40007000 	.word	0x40007000
 800258c:	fffff9ff 	.word	0xfffff9ff
 8002590:	20000000 	.word	0x20000000
 8002594:	000f4240 	.word	0x000f4240

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	0004      	movs	r4, r0
 800259c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800259e:	2800      	cmp	r0, #0
 80025a0:	d023      	beq.n	80025ea <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	6803      	ldr	r3, [r0, #0]
 80025a4:	07db      	lsls	r3, r3, #31
 80025a6:	d410      	bmi.n	80025ca <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	079b      	lsls	r3, r3, #30
 80025ac:	d45e      	bmi.n	800266c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	071b      	lsls	r3, r3, #28
 80025b2:	d500      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 80025b4:	e0c3      	b.n	800273e <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	075b      	lsls	r3, r3, #29
 80025ba:	d500      	bpl.n	80025be <HAL_RCC_OscConfig+0x26>
 80025bc:	e0f4      	b.n	80027a8 <HAL_RCC_OscConfig+0x210>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025be:	69e3      	ldr	r3, [r4, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d000      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2e>
 80025c4:	e17a      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2000      	movs	r0, #0
 80025c8:	e029      	b.n	800261e <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ca:	2238      	movs	r2, #56	; 0x38
 80025cc:	4daf      	ldr	r5, [pc, #700]	; (800288c <HAL_RCC_OscConfig+0x2f4>)
 80025ce:	68ab      	ldr	r3, [r5, #8]
 80025d0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d2:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d10a      	bne.n	80025ee <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d8:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025da:	0793      	lsls	r3, r2, #30
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025de:	682b      	ldr	r3, [r5, #0]
 80025e0:	039b      	lsls	r3, r3, #14
 80025e2:	d5e1      	bpl.n	80025a8 <HAL_RCC_OscConfig+0x10>
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1de      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e017      	b.n	800261e <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d0f5      	beq.n	80025de <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	0252      	lsls	r2, r2, #9
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d112      	bne.n	8002622 <HAL_RCC_OscConfig+0x8a>
 80025fc:	682a      	ldr	r2, [r5, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002602:	f7ff fa9b 	bl	8001b3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002606:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002608:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	02bf      	lsls	r7, r7, #10
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	423b      	tst	r3, r7
 8002610:	d1ca      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002612:	f7ff fa93 	bl	8001b3c <HAL_GetTick>
 8002616:	1b80      	subs	r0, r0, r6
 8002618:	2864      	cmp	r0, #100	; 0x64
 800261a:	d9f7      	bls.n	800260c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800261c:	2003      	movs	r0, #3
}
 800261e:	b005      	add	sp, #20
 8002620:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	21a0      	movs	r1, #160	; 0xa0
 8002624:	02c9      	lsls	r1, r1, #11
 8002626:	428b      	cmp	r3, r1
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0xa4>
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	6829      	ldr	r1, [r5, #0]
 800262e:	02db      	lsls	r3, r3, #11
 8002630:	430b      	orrs	r3, r1
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	431a      	orrs	r2, r3
 8002638:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263a:	e7e2      	b.n	8002602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	682a      	ldr	r2, [r5, #0]
 800263e:	4994      	ldr	r1, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x2f8>)
 8002640:	400a      	ands	r2, r1
 8002642:	602a      	str	r2, [r5, #0]
 8002644:	682a      	ldr	r2, [r5, #0]
 8002646:	4993      	ldr	r1, [pc, #588]	; (8002894 <HAL_RCC_OscConfig+0x2fc>)
 8002648:	400a      	ands	r2, r1
 800264a:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1d8      	bne.n	8002602 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8002650:	f7ff fa74 	bl	8001b3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002654:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002656:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002658:	02bf      	lsls	r7, r7, #10
 800265a:	682b      	ldr	r3, [r5, #0]
 800265c:	423b      	tst	r3, r7
 800265e:	d0a3      	beq.n	80025a8 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff fa6c 	bl	8001b3c <HAL_GetTick>
 8002664:	1b80      	subs	r0, r0, r6
 8002666:	2864      	cmp	r0, #100	; 0x64
 8002668:	d9f7      	bls.n	800265a <HAL_RCC_OscConfig+0xc2>
 800266a:	e7d7      	b.n	800261c <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266c:	2338      	movs	r3, #56	; 0x38
 800266e:	4d87      	ldr	r5, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x2f4>)
 8002670:	68aa      	ldr	r2, [r5, #8]
 8002672:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002674:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002676:	2b10      	cmp	r3, #16
 8002678:	d128      	bne.n	80026cc <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267a:	2103      	movs	r1, #3
 800267c:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800267e:	2a02      	cmp	r2, #2
 8002680:	d126      	bne.n	80026d0 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002682:	682a      	ldr	r2, [r5, #0]
 8002684:	0552      	lsls	r2, r2, #21
 8002686:	d502      	bpl.n	800268e <HAL_RCC_OscConfig+0xf6>
 8002688:	68e2      	ldr	r2, [r4, #12]
 800268a:	2a00      	cmp	r2, #0
 800268c:	d0ad      	beq.n	80025ea <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	6869      	ldr	r1, [r5, #4]
 8002690:	6962      	ldr	r2, [r4, #20]
 8002692:	4881      	ldr	r0, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x300>)
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	4001      	ands	r1, r0
 8002698:	430a      	orrs	r2, r1
 800269a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	4a7e      	ldr	r2, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x304>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	6922      	ldr	r2, [r4, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	4a7c      	ldr	r2, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x308>)
 80026b0:	049b      	lsls	r3, r3, #18
 80026b2:	0f5b      	lsrs	r3, r3, #29
 80026b4:	40da      	lsrs	r2, r3
 80026b6:	0013      	movs	r3, r2
 80026b8:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x30c>)
 80026ba:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026bc:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x310>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f7ff f9f4 	bl	8001aac <HAL_InitTick>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x132>
 80026c8:	e771      	b.n	80025ae <HAL_RCC_OscConfig+0x16>
 80026ca:	e78e      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0d8      	beq.n	8002682 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d0:	68e3      	ldr	r3, [r4, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d020      	beq.n	8002718 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	4a70      	ldr	r2, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026da:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026dc:	4013      	ands	r3, r2
 80026de:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026e2:	4313      	orrs	r3, r2
 80026e4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	682a      	ldr	r2, [r5, #0]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4313      	orrs	r3, r2
 80026ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026f0:	f7ff fa24 	bl	8001b3c <HAL_GetTick>
 80026f4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f6:	682b      	ldr	r3, [r5, #0]
 80026f8:	423b      	tst	r3, r7
 80026fa:	d007      	beq.n	800270c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	686a      	ldr	r2, [r5, #4]
 80026fe:	6963      	ldr	r3, [r4, #20]
 8002700:	4965      	ldr	r1, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x300>)
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	400a      	ands	r2, r1
 8002706:	4313      	orrs	r3, r2
 8002708:	606b      	str	r3, [r5, #4]
 800270a:	e750      	b.n	80025ae <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff fa16 	bl	8001b3c <HAL_GetTick>
 8002710:	1b80      	subs	r0, r0, r6
 8002712:	2802      	cmp	r0, #2
 8002714:	d9ef      	bls.n	80026f6 <HAL_RCC_OscConfig+0x15e>
 8002716:	e781      	b.n	800261c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	4a64      	ldr	r2, [pc, #400]	; (80028ac <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800271e:	4013      	ands	r3, r2
 8002720:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002722:	f7ff fa0b 	bl	8001b3c <HAL_GetTick>
 8002726:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	00ff      	lsls	r7, r7, #3
 800272a:	682b      	ldr	r3, [r5, #0]
 800272c:	423b      	tst	r3, r7
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x19a>
 8002730:	e73d      	b.n	80025ae <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff fa03 	bl	8001b3c <HAL_GetTick>
 8002736:	1b80      	subs	r0, r0, r6
 8002738:	2802      	cmp	r0, #2
 800273a:	d9f6      	bls.n	800272a <HAL_RCC_OscConfig+0x192>
 800273c:	e76e      	b.n	800261c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800273e:	2238      	movs	r2, #56	; 0x38
 8002740:	4d52      	ldr	r5, [pc, #328]	; (800288c <HAL_RCC_OscConfig+0x2f4>)
 8002742:	68ab      	ldr	r3, [r5, #8]
 8002744:	4013      	ands	r3, r2
 8002746:	2b18      	cmp	r3, #24
 8002748:	d108      	bne.n	800275c <HAL_RCC_OscConfig+0x1c4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800274a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800274c:	079b      	lsls	r3, r3, #30
 800274e:	d400      	bmi.n	8002752 <HAL_RCC_OscConfig+0x1ba>
 8002750:	e731      	b.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 8002752:	69a3      	ldr	r3, [r4, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d000      	beq.n	800275a <HAL_RCC_OscConfig+0x1c2>
 8002758:	e72d      	b.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 800275a:	e746      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275c:	69a2      	ldr	r2, [r4, #24]
 800275e:	2301      	movs	r3, #1
 8002760:	2a00      	cmp	r2, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_LSI_ENABLE();
 8002764:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002766:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002768:	4313      	orrs	r3, r2
 800276a:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800276c:	f7ff f9e6 	bl	8001b3c <HAL_GetTick>
 8002770:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002774:	423b      	tst	r3, r7
 8002776:	d000      	beq.n	800277a <HAL_RCC_OscConfig+0x1e2>
 8002778:	e71d      	b.n	80025b6 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff f9df 	bl	8001b3c <HAL_GetTick>
 800277e:	1b80      	subs	r0, r0, r6
 8002780:	2802      	cmp	r0, #2
 8002782:	d9f6      	bls.n	8002772 <HAL_RCC_OscConfig+0x1da>
 8002784:	e74a      	b.n	800261c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8002786:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 800278a:	439a      	bics	r2, r3
 800278c:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800278e:	f7ff f9d5 	bl	8001b3c <HAL_GetTick>
 8002792:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002794:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002796:	423b      	tst	r3, r7
 8002798:	d100      	bne.n	800279c <HAL_RCC_OscConfig+0x204>
 800279a:	e70c      	b.n	80025b6 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7ff f9ce 	bl	8001b3c <HAL_GetTick>
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	2802      	cmp	r0, #2
 80027a4:	d9f6      	bls.n	8002794 <HAL_RCC_OscConfig+0x1fc>
 80027a6:	e739      	b.n	800261c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027a8:	2238      	movs	r2, #56	; 0x38
 80027aa:	4d38      	ldr	r5, [pc, #224]	; (800288c <HAL_RCC_OscConfig+0x2f4>)
 80027ac:	68ab      	ldr	r3, [r5, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d108      	bne.n	80027c6 <HAL_RCC_OscConfig+0x22e>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027b4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80027b6:	079b      	lsls	r3, r3, #30
 80027b8:	d400      	bmi.n	80027bc <HAL_RCC_OscConfig+0x224>
 80027ba:	e700      	b.n	80025be <HAL_RCC_OscConfig+0x26>
 80027bc:	68a3      	ldr	r3, [r4, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d000      	beq.n	80027c4 <HAL_RCC_OscConfig+0x22c>
 80027c2:	e6fc      	b.n	80025be <HAL_RCC_OscConfig+0x26>
 80027c4:	e711      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c6:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80027cc:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d0:	4213      	tst	r3, r2
 80027d2:	d108      	bne.n	80027e6 <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80027d6:	4313      	orrs	r3, r2
 80027d8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80027da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80027dc:	4013      	ands	r3, r2
 80027de:	9303      	str	r3, [sp, #12]
 80027e0:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e6:	2780      	movs	r7, #128	; 0x80
 80027e8:	4e31      	ldr	r6, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x318>)
 80027ea:	007f      	lsls	r7, r7, #1
 80027ec:	6833      	ldr	r3, [r6, #0]
 80027ee:	423b      	tst	r3, r7
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d122      	bne.n	800283e <HAL_RCC_OscConfig+0x2a6>
 80027f8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80027fa:	4313      	orrs	r3, r2
 80027fc:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80027fe:	f7ff f99d 	bl	8001b3c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002804:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002808:	423b      	tst	r3, r7
 800280a:	d038      	beq.n	800287e <HAL_RCC_OscConfig+0x2e6>
      if (pwrclkchanged == SET)
 800280c:	9b00      	ldr	r3, [sp, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d000      	beq.n	8002814 <HAL_RCC_OscConfig+0x27c>
 8002812:	e6d4      	b.n	80025be <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x31c>)
 8002818:	4013      	ands	r3, r2
 800281a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800281c:	e6cf      	b.n	80025be <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281e:	6833      	ldr	r3, [r6, #0]
 8002820:	433b      	orrs	r3, r7
 8002822:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002824:	f7ff f98a 	bl	8001b3c <HAL_GetTick>
 8002828:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282a:	6833      	ldr	r3, [r6, #0]
 800282c:	423b      	tst	r3, r7
 800282e:	d1e0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7ff f984 	bl	8001b3c <HAL_GetTick>
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	1ac0      	subs	r0, r0, r3
 8002838:	2802      	cmp	r0, #2
 800283a:	d9f6      	bls.n	800282a <HAL_RCC_OscConfig+0x292>
 800283c:	e6ee      	b.n	800261c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002840:	2b05      	cmp	r3, #5
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x2b8>
 8002844:	3b01      	subs	r3, #1
 8002846:	4313      	orrs	r3, r2
 8002848:	65eb      	str	r3, [r5, #92]	; 0x5c
 800284a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800284c:	2301      	movs	r3, #1
 800284e:	e7d4      	b.n	80027fa <HAL_RCC_OscConfig+0x262>
 8002850:	2101      	movs	r1, #1
 8002852:	438a      	bics	r2, r1
 8002854:	65ea      	str	r2, [r5, #92]	; 0x5c
 8002856:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002858:	3103      	adds	r1, #3
 800285a:	438a      	bics	r2, r1
 800285c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1cd      	bne.n	80027fe <HAL_RCC_OscConfig+0x266>
        tickstart = HAL_GetTick();
 8002862:	f7ff f96b 	bl	8001b3c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002866:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002868:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800286c:	423b      	tst	r3, r7
 800286e:	d0cd      	beq.n	800280c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff f964 	bl	8001b3c <HAL_GetTick>
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x320>)
 8002876:	1b80      	subs	r0, r0, r6
 8002878:	4298      	cmp	r0, r3
 800287a:	d9f6      	bls.n	800286a <HAL_RCC_OscConfig+0x2d2>
 800287c:	e6ce      	b.n	800261c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff f95d 	bl	8001b3c <HAL_GetTick>
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x320>)
 8002884:	1b80      	subs	r0, r0, r6
 8002886:	4298      	cmp	r0, r3
 8002888:	d9bd      	bls.n	8002806 <HAL_RCC_OscConfig+0x26e>
 800288a:	e6c7      	b.n	800261c <HAL_RCC_OscConfig+0x84>
 800288c:	40021000 	.word	0x40021000
 8002890:	fffeffff 	.word	0xfffeffff
 8002894:	fffbffff 	.word	0xfffbffff
 8002898:	ffff80ff 	.word	0xffff80ff
 800289c:	ffffc7ff 	.word	0xffffc7ff
 80028a0:	00f42400 	.word	0x00f42400
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000044 	.word	0x20000044
 80028ac:	fffffeff 	.word	0xfffffeff
 80028b0:	40007000 	.word	0x40007000
 80028b4:	efffffff 	.word	0xefffffff
 80028b8:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	2138      	movs	r1, #56	; 0x38
 80028be:	4d3f      	ldr	r5, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x424>)
 80028c0:	68aa      	ldr	r2, [r5, #8]
 80028c2:	400a      	ands	r2, r1
 80028c4:	2a10      	cmp	r2, #16
 80028c6:	d053      	beq.n	8002970 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c8:	4a3d      	ldr	r2, [pc, #244]	; (80029c0 <HAL_RCC_OscConfig+0x428>)
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d138      	bne.n	8002940 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 80028ce:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4013      	ands	r3, r2
 80028d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028d6:	f7ff f931 	bl	8001b3c <HAL_GetTick>
 80028da:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	04bf      	lsls	r7, r7, #18
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	423b      	tst	r3, r7
 80028e2:	d127      	bne.n	8002934 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028e6:	6a23      	ldr	r3, [r4, #32]
 80028e8:	68ea      	ldr	r2, [r5, #12]
 80028ea:	430b      	orrs	r3, r1
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	400a      	ands	r2, r1
 80028f2:	4313      	orrs	r3, r2
 80028f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028fc:	4313      	orrs	r3, r2
 80028fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	4313      	orrs	r3, r2
 8002904:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	682a      	ldr	r2, [r5, #0]
 800290a:	045b      	lsls	r3, r3, #17
 800290c:	4313      	orrs	r3, r2
 800290e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	68ea      	ldr	r2, [r5, #12]
 8002914:	055b      	lsls	r3, r3, #21
 8002916:	4313      	orrs	r3, r2
 8002918:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800291a:	f7ff f90f 	bl	8001b3c <HAL_GetTick>
 800291e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	4233      	tst	r3, r6
 8002924:	d000      	beq.n	8002928 <HAL_RCC_OscConfig+0x390>
 8002926:	e64e      	b.n	80025c6 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f908 	bl	8001b3c <HAL_GetTick>
 800292c:	1b00      	subs	r0, r0, r4
 800292e:	2802      	cmp	r0, #2
 8002930:	d9f6      	bls.n	8002920 <HAL_RCC_OscConfig+0x388>
 8002932:	e673      	b.n	800261c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f902 	bl	8001b3c <HAL_GetTick>
 8002938:	1b80      	subs	r0, r0, r6
 800293a:	2802      	cmp	r0, #2
 800293c:	d9cf      	bls.n	80028de <HAL_RCC_OscConfig+0x346>
 800293e:	e66d      	b.n	800261c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8002940:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002942:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002944:	4013      	ands	r3, r2
 8002946:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002948:	f7ff f8f8 	bl	8001b3c <HAL_GetTick>
 800294c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	04b6      	lsls	r6, r6, #18
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	0018      	movs	r0, r3
 8002954:	4030      	ands	r0, r6
 8002956:	4233      	tst	r3, r6
 8002958:	d104      	bne.n	8002964 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800295a:	68eb      	ldr	r3, [r5, #12]
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_RCC_OscConfig+0x430>)
 800295e:	4013      	ands	r3, r2
 8002960:	60eb      	str	r3, [r5, #12]
 8002962:	e65c      	b.n	800261e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff f8ea 	bl	8001b3c <HAL_GetTick>
 8002968:	1b00      	subs	r0, r0, r4
 800296a:	2802      	cmp	r0, #2
 800296c:	d9f0      	bls.n	8002950 <HAL_RCC_OscConfig+0x3b8>
 800296e:	e655      	b.n	800261c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	2b01      	cmp	r3, #1
 8002972:	d100      	bne.n	8002976 <HAL_RCC_OscConfig+0x3de>
 8002974:	e639      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002978:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	6a21      	ldr	r1, [r4, #32]
 800297c:	401a      	ands	r2, r3
 800297e:	428a      	cmp	r2, r1
 8002980:	d000      	beq.n	8002984 <HAL_RCC_OscConfig+0x3ec>
 8002982:	e632      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002984:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002988:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	428a      	cmp	r2, r1
 800298c:	d000      	beq.n	8002990 <HAL_RCC_OscConfig+0x3f8>
 800298e:	e62c      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002990:	21fe      	movs	r1, #254	; 0xfe
 8002992:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002994:	01c9      	lsls	r1, r1, #7
 8002996:	4019      	ands	r1, r3
 8002998:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299a:	4291      	cmp	r1, r2
 800299c:	d000      	beq.n	80029a0 <HAL_RCC_OscConfig+0x408>
 800299e:	e624      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a0:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a4:	0392      	lsls	r2, r2, #14
 80029a6:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	428a      	cmp	r2, r1
 80029aa:	d000      	beq.n	80029ae <HAL_RCC_OscConfig+0x416>
 80029ac:	e61d      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029b0:	0f5b      	lsrs	r3, r3, #29
 80029b2:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x422>
 80029b8:	e605      	b.n	80025c6 <HAL_RCC_OscConfig+0x2e>
 80029ba:	e616      	b.n	80025ea <HAL_RCC_OscConfig+0x52>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	feffffff 	.word	0xfeffffff
 80029c4:	1fc1808c 	.word	0x1fc1808c
 80029c8:	effefffc 	.word	0xeffefffc

080029cc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029cc:	2338      	movs	r3, #56	; 0x38
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d0:	4c1e      	ldr	r4, [pc, #120]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x80>)
 80029d2:	68a2      	ldr	r2, [r4, #8]
 80029d4:	421a      	tst	r2, r3
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029d8:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029da:	481d      	ldr	r0, [pc, #116]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029dc:	049b      	lsls	r3, r3, #18
 80029de:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029e0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	68a2      	ldr	r2, [r4, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	2a08      	cmp	r2, #8
 80029ea:	d02a      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	2a10      	cmp	r2, #16
 80029f2:	d11a      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x5e>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029f4:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f6:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029f8:	43db      	mvns	r3, r3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fa:	0649      	lsls	r1, r1, #25
 80029fc:	0f49      	lsrs	r1, r1, #29
 80029fe:	257f      	movs	r5, #127	; 0x7f
 8002a00:	3101      	adds	r1, #1
    switch (pllsource)
 8002a02:	079b      	lsls	r3, r3, #30
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	4812      	ldr	r0, [pc, #72]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	401d      	ands	r5, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a0e:	f7fd fb8b 	bl	8000128 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a12:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a14:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a16:	0f49      	lsrs	r1, r1, #29
 8002a18:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002a1a:	f7fd fb85 	bl	8000128 <__udivsi3>
 8002a1e:	e7e0      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a20:	68e3      	ldr	r3, [r4, #12]
 8002a22:	480b      	ldr	r0, [pc, #44]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	401d      	ands	r5, r3
 8002a28:	e7f1      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a2a:	68a2      	ldr	r2, [r4, #8]
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	2a20      	cmp	r2, #32
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a32:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8002a34:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b18      	cmp	r3, #24
 8002a3a:	d1d2      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8002a3c:	20fa      	movs	r0, #250	; 0xfa
 8002a3e:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8002a40:	e7cf      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002a44:	e7cd      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8002a46:	2080      	movs	r0, #128	; 0x80
 8002a48:	0200      	lsls	r0, r0, #8
 8002a4a:	e7ca      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x16>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_ClockConfig>:
{
 8002a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a5a:	0004      	movs	r4, r0
 8002a5c:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002a62:	2001      	movs	r0, #1
}
 8002a64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a66:	2707      	movs	r7, #7
 8002a68:	4e4a      	ldr	r6, [pc, #296]	; (8002b94 <HAL_RCC_ClockConfig+0x13c>)
 8002a6a:	6833      	ldr	r3, [r6, #0]
 8002a6c:	403b      	ands	r3, r7
 8002a6e:	428b      	cmp	r3, r1
 8002a70:	d32a      	bcc.n	8002ac8 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a72:	6821      	ldr	r1, [r4, #0]
 8002a74:	078b      	lsls	r3, r1, #30
 8002a76:	d43b      	bmi.n	8002af0 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a78:	07cb      	lsls	r3, r1, #31
 8002a7a:	d448      	bmi.n	8002b0e <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	2707      	movs	r7, #7
 8002a7e:	6833      	ldr	r3, [r6, #0]
 8002a80:	403b      	ands	r3, r7
 8002a82:	42ab      	cmp	r3, r5
 8002a84:	d90a      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	6833      	ldr	r3, [r6, #0]
 8002a88:	43bb      	bics	r3, r7
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a8e:	f7ff f855 	bl	8001b3c <HAL_GetTick>
 8002a92:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	403b      	ands	r3, r7
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	d16b      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	4d3e      	ldr	r5, [pc, #248]	; (8002b98 <HAL_RCC_ClockConfig+0x140>)
 8002aa0:	075b      	lsls	r3, r3, #29
 8002aa2:	d46f      	bmi.n	8002b84 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002aa4:	f7ff ff92 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002aa8:	68ab      	ldr	r3, [r5, #8]
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <HAL_RCC_ClockConfig+0x144>)
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	0f1b      	lsrs	r3, r3, #28
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	40d8      	lsrs	r0, r3
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_ClockConfig+0x148>)
 8002abc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_RCC_ClockConfig+0x14c>)
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f7fe fff3 	bl	8001aac <HAL_InitTick>
 8002ac6:	e7cd      	b.n	8002a64 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac8:	6833      	ldr	r3, [r6, #0]
 8002aca:	43bb      	bics	r3, r7
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ad0:	f7ff f834 	bl	8001b3c <HAL_GetTick>
 8002ad4:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad6:	6833      	ldr	r3, [r6, #0]
 8002ad8:	403b      	ands	r3, r7
 8002ada:	42ab      	cmp	r3, r5
 8002adc:	d0c9      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7ff f82d 	bl	8001b3c <HAL_GetTick>
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	1ac0      	subs	r0, r0, r3
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_ClockConfig+0x150>)
 8002ae8:	4298      	cmp	r0, r3
 8002aea:	d9f4      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e7b9      	b.n	8002a64 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <HAL_RCC_ClockConfig+0x140>)
 8002af2:	074b      	lsls	r3, r1, #29
 8002af4:	d504      	bpl.n	8002b00 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002af6:	23e0      	movs	r3, #224	; 0xe0
 8002af8:	6890      	ldr	r0, [r2, #8]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	4303      	orrs	r3, r0
 8002afe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	6893      	ldr	r3, [r2, #8]
 8002b02:	482a      	ldr	r0, [pc, #168]	; (8002bac <HAL_RCC_ClockConfig+0x154>)
 8002b04:	4003      	ands	r3, r0
 8002b06:	68a0      	ldr	r0, [r4, #8]
 8002b08:	4303      	orrs	r3, r0
 8002b0a:	6093      	str	r3, [r2, #8]
 8002b0c:	e7b4      	b.n	8002a78 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0e:	6862      	ldr	r2, [r4, #4]
 8002b10:	4f21      	ldr	r7, [pc, #132]	; (8002b98 <HAL_RCC_ClockConfig+0x140>)
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	d119      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	039b      	lsls	r3, r3, #14
 8002b1a:	d5a2      	bpl.n	8002a62 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1c:	2107      	movs	r1, #7
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	438b      	bics	r3, r1
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002b26:	f7ff f809 	bl	8001b3c <HAL_GetTick>
 8002b2a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2c:	2338      	movs	r3, #56	; 0x38
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	401a      	ands	r2, r3
 8002b32:	6863      	ldr	r3, [r4, #4]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d0a0      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3a:	f7fe ffff 	bl	8001b3c <HAL_GetTick>
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	1ac0      	subs	r0, r0, r3
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_ClockConfig+0x150>)
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d9f1      	bls.n	8002b2c <HAL_RCC_ClockConfig+0xd4>
 8002b48:	e7d0      	b.n	8002aec <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4a:	2a02      	cmp	r2, #2
 8002b4c:	d103      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	d4e3      	bmi.n	8002b1c <HAL_RCC_ClockConfig+0xc4>
 8002b54:	e785      	b.n	8002a62 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d103      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	055b      	lsls	r3, r3, #21
 8002b5e:	d4dd      	bmi.n	8002b1c <HAL_RCC_ClockConfig+0xc4>
 8002b60:	e77f      	b.n	8002a62 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b62:	2302      	movs	r3, #2
 8002b64:	2a03      	cmp	r2, #3
 8002b66:	d103      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b68:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6a:	4219      	tst	r1, r3
 8002b6c:	d1d6      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xc4>
 8002b6e:	e778      	b.n	8002a62 <HAL_RCC_ClockConfig+0xa>
 8002b70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b72:	e7fa      	b.n	8002b6a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe ffe2 	bl	8001b3c <HAL_GetTick>
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	1ac0      	subs	r0, r0, r3
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x150>)
 8002b7e:	4298      	cmp	r0, r3
 8002b80:	d988      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
 8002b82:	e7b3      	b.n	8002aec <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	68ab      	ldr	r3, [r5, #8]
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x158>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	68e2      	ldr	r2, [r4, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60ab      	str	r3, [r5, #8]
 8002b90:	e788      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x4c>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	0800483c 	.word	0x0800483c
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000044 	.word	0x20000044
 8002ba8:	00001388 	.word	0x00001388
 8002bac:	fffff0ff 	.word	0xfffff0ff
 8002bb0:	ffff8fff 	.word	0xffff8fff

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	045b      	lsls	r3, r3, #17
 8002bbc:	0f5b      	lsrs	r3, r3, #29
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	589b      	ldr	r3, [r3, r2]
 8002bc2:	221f      	movs	r2, #31
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc8:	6810      	ldr	r0, [r2, #0]
 8002bca:	40d8      	lsrs	r0, r3
}
 8002bcc:	4770      	bx	lr
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	0800487c 	.word	0x0800487c
 8002bd8:	20000000 	.word	0x20000000

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002be2:	2000      	movs	r0, #0
{
 8002be4:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be6:	039b      	lsls	r3, r3, #14
 8002be8:	d53b      	bpl.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	4c48      	ldr	r4, [pc, #288]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bee:	0552      	lsls	r2, r2, #21
 8002bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf4:	4213      	tst	r3, r2
 8002bf6:	d108      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002bfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c00:	4013      	ands	r3, r2
 8002c02:	9303      	str	r3, [sp, #12]
 8002c04:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0a:	2780      	movs	r7, #128	; 0x80
 8002c0c:	4e41      	ldr	r6, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002c0e:	007f      	lsls	r7, r7, #1
 8002c10:	6833      	ldr	r3, [r6, #0]
 8002c12:	433b      	orrs	r3, r7
 8002c14:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c16:	f7fe ff91 	bl	8001b3c <HAL_GetTick>
 8002c1a:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1c:	6833      	ldr	r3, [r6, #0]
 8002c1e:	423b      	tst	r3, r7
 8002c20:	d011      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c24:	23c0      	movs	r3, #192	; 0xc0
 8002c26:	0011      	movs	r1, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4e3b      	ldr	r6, [pc, #236]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c2c:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c2e:	421a      	tst	r2, r3
 8002c30:	d002      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c32:	696b      	ldr	r3, [r5, #20]
 8002c34:	4299      	cmp	r1, r3
 8002c36:	d14d      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c3a:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	401e      	ands	r6, r3
 8002c3e:	696b      	ldr	r3, [r5, #20]
 8002c40:	431e      	orrs	r6, r3
 8002c42:	65e6      	str	r6, [r4, #92]	; 0x5c
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe ff79 	bl	8001b3c <HAL_GetTick>
 8002c4a:	9b01      	ldr	r3, [sp, #4]
 8002c4c:	1ac0      	subs	r0, r0, r3
 8002c4e:	2802      	cmp	r0, #2
 8002c50:	d9e4      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002c52:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c54:	9b00      	ldr	r3, [sp, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d103      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c5c:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c62:	682a      	ldr	r2, [r5, #0]
 8002c64:	07d3      	lsls	r3, r2, #31
 8002c66:	d506      	bpl.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c68:	2403      	movs	r4, #3
 8002c6a:	4929      	ldr	r1, [pc, #164]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c6c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002c6e:	43a3      	bics	r3, r4
 8002c70:	686c      	ldr	r4, [r5, #4]
 8002c72:	4323      	orrs	r3, r4
 8002c74:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c76:	0693      	lsls	r3, r2, #26
 8002c78:	d506      	bpl.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7a:	4925      	ldr	r1, [pc, #148]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c7c:	4c28      	ldr	r4, [pc, #160]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002c7e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002c80:	4023      	ands	r3, r4
 8002c82:	68ac      	ldr	r4, [r5, #8]
 8002c84:	4323      	orrs	r3, r4
 8002c86:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c88:	0453      	lsls	r3, r2, #17
 8002c8a:	d50f      	bpl.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c8c:	4920      	ldr	r1, [pc, #128]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c8e:	692c      	ldr	r4, [r5, #16]
 8002c90:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	4323      	orrs	r3, r4
 8002c98:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	05db      	lsls	r3, r3, #23
 8002c9e:	429c      	cmp	r4, r3
 8002ca0:	d104      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	68cc      	ldr	r4, [r1, #12]
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	4323      	orrs	r3, r4
 8002caa:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002cac:	0513      	lsls	r3, r2, #20
 8002cae:	d50f      	bpl.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cb2:	4c1c      	ldr	r4, [pc, #112]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002cb6:	68e9      	ldr	r1, [r5, #12]
 8002cb8:	4023      	ands	r3, r4
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	01db      	lsls	r3, r3, #7
 8002cc2:	4299      	cmp	r1, r3
 8002cc4:	d104      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	68d1      	ldr	r1, [r2, #12]
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002cd0:	b005      	add	sp, #20
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cda:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ce4:	4810      	ldr	r0, [pc, #64]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce6:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce8:	4003      	ands	r3, r0
 8002cea:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8002cec:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cee:	07d3      	lsls	r3, r2, #31
 8002cf0:	d5a2      	bpl.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8002cf2:	f7fe ff23 	bl	8001b3c <HAL_GetTick>
 8002cf6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cfc:	4213      	tst	r3, r2
 8002cfe:	d19b      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe ff1c 	bl	8001b3c <HAL_GetTick>
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d06:	1bc0      	subs	r0, r0, r7
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	d9f5      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002d0c:	e7a1      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	fffffcff 	.word	0xfffffcff
 8002d1c:	efffffff 	.word	0xefffffff
 8002d20:	ffffcfff 	.word	0xffffcfff
 8002d24:	ffff3fff 	.word	0xffff3fff
 8002d28:	fffeffff 	.word	0xfffeffff
 8002d2c:	00001388 	.word	0x00001388

08002d30 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002d30:	4770      	bx	lr
	...

08002d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d38:	6925      	ldr	r5, [r4, #16]
 8002d3a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3e:	4329      	orrs	r1, r5
 8002d40:	6965      	ldr	r5, [r4, #20]
 8002d42:	69c3      	ldr	r3, [r0, #28]
 8002d44:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d46:	6810      	ldr	r0, [r2, #0]
 8002d48:	4d48      	ldr	r5, [pc, #288]	; (8002e6c <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d4a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d4c:	4028      	ands	r0, r5
 8002d4e:	4301      	orrs	r1, r0
 8002d50:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d52:	6851      	ldr	r1, [r2, #4]
 8002d54:	4846      	ldr	r0, [pc, #280]	; (8002e70 <UART_SetConfig+0x13c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d56:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d58:	4001      	ands	r1, r0
 8002d5a:	68e0      	ldr	r0, [r4, #12]
 8002d5c:	4301      	orrs	r1, r0
 8002d5e:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002d60:	69a1      	ldr	r1, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d62:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002d64:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d66:	4d43      	ldr	r5, [pc, #268]	; (8002e74 <UART_SetConfig+0x140>)
 8002d68:	4028      	ands	r0, r5
 8002d6a:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d6c:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6e:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d72:	4381      	bics	r1, r0
 8002d74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d76:	4301      	orrs	r1, r0
 8002d78:	62d1      	str	r1, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d7a:	493f      	ldr	r1, [pc, #252]	; (8002e78 <UART_SetConfig+0x144>)
 8002d7c:	428a      	cmp	r2, r1
 8002d7e:	d115      	bne.n	8002dac <UART_SetConfig+0x78>
 8002d80:	2103      	movs	r1, #3
 8002d82:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <UART_SetConfig+0x148>)
 8002d84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d86:	400a      	ands	r2, r1
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	3a01      	subs	r2, #1
 8002d8c:	0209      	lsls	r1, r1, #8
 8002d8e:	2a02      	cmp	r2, #2
 8002d90:	d85f      	bhi.n	8002e52 <UART_SetConfig+0x11e>
 8002d92:	483b      	ldr	r0, [pc, #236]	; (8002e80 <UART_SetConfig+0x14c>)
 8002d94:	5c80      	ldrb	r0, [r0, r2]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	428b      	cmp	r3, r1
 8002d98:	d014      	beq.n	8002dc4 <UART_SetConfig+0x90>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d9a:	2808      	cmp	r0, #8
 8002d9c:	d857      	bhi.n	8002e4e <UART_SetConfig+0x11a>
 8002d9e:	f7fd f9af 	bl	8000100 <__gnu_thumb1_case_uqi>
 8002da2:	560c      	.short	0x560c
 8002da4:	56515654 	.word	0x56515654
 8002da8:	5656      	.short	0x5656
 8002daa:	3b          	.byte	0x3b
 8002dab:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <UART_SetConfig+0x150>)
 8002dae:	428a      	cmp	r2, r1
 8002db0:	d14d      	bne.n	8002e4e <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	0212      	lsls	r2, r2, #8
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04d      	beq.n	8002e56 <UART_SetConfig+0x122>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dba:	f7ff fefb 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d04d      	beq.n	8002e5e <UART_SetConfig+0x12a>
 8002dc2:	e02b      	b.n	8002e1c <UART_SetConfig+0xe8>
    switch (clocksource)
 8002dc4:	2808      	cmp	r0, #8
 8002dc6:	d842      	bhi.n	8002e4e <UART_SetConfig+0x11a>
 8002dc8:	f7fd f99a 	bl	8000100 <__gnu_thumb1_case_uqi>
 8002dcc:	41084145 	.word	0x41084145
 8002dd0:	41414105 	.word	0x41414105
 8002dd4:	09          	.byte	0x09
 8002dd5:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd6:	f7ff fdf9 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8002dda:	e03e      	b.n	8002e5a <UART_SetConfig+0x126>
    switch (clocksource)
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <UART_SetConfig+0x154>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002de0:	492a      	ldr	r1, [pc, #168]	; (8002e8c <UART_SetConfig+0x158>)
 8002de2:	0052      	lsls	r2, r2, #1
 8002de4:	5a51      	ldrh	r1, [r2, r1]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd f99e 	bl	8000128 <__udivsi3>
 8002dec:	6865      	ldr	r5, [r4, #4]
 8002dee:	0040      	lsls	r0, r0, #1
 8002df0:	086b      	lsrs	r3, r5, #1
 8002df2:	18c0      	adds	r0, r0, r3
 8002df4:	0029      	movs	r1, r5
 8002df6:	f7fd f997 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <UART_SetConfig+0x15c>)
 8002dfe:	3a10      	subs	r2, #16
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d824      	bhi.n	8002e4e <UART_SetConfig+0x11a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e04:	230f      	movs	r3, #15
 8002e06:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e08:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e0a:	439a      	bics	r2, r3
 8002e0c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e0e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	4318      	orrs	r0, r3
 8002e14:	60d0      	str	r0, [r2, #12]
 8002e16:	e022      	b.n	8002e5e <UART_SetConfig+0x12a>
    switch (clocksource)
 8002e18:	2080      	movs	r0, #128	; 0x80
 8002e1a:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <UART_SetConfig+0x158>)
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	5a99      	ldrh	r1, [r3, r2]
 8002e24:	f7fd f980 	bl	8000128 <__udivsi3>
 8002e28:	6865      	ldr	r5, [r4, #4]
 8002e2a:	086b      	lsrs	r3, r5, #1
 8002e2c:	18c0      	adds	r0, r0, r3
 8002e2e:	0029      	movs	r1, r5
 8002e30:	f7fd f97a 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e34:	0002      	movs	r2, r0
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <UART_SetConfig+0x15c>)
 8002e38:	3a10      	subs	r2, #16
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d807      	bhi.n	8002e4e <UART_SetConfig+0x11a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	60d8      	str	r0, [r3, #12]
 8002e42:	e00c      	b.n	8002e5e <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e44:	f7ff fdc2 	bl	80029cc <HAL_RCC_GetSysClockFreq>
        break;
 8002e48:	e7b9      	b.n	8002dbe <UART_SetConfig+0x8a>
        pclk = (uint32_t) HSI_VALUE;
 8002e4a:	480f      	ldr	r0, [pc, #60]	; (8002e88 <UART_SetConfig+0x154>)
 8002e4c:	e7e6      	b.n	8002e1c <UART_SetConfig+0xe8>
    switch (clocksource)
 8002e4e:	2001      	movs	r0, #1
 8002e50:	e006      	b.n	8002e60 <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e52:	428b      	cmp	r3, r1
 8002e54:	d1b1      	bne.n	8002dba <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7ff fead 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002e5c:	d1bf      	bne.n	8002dde <UART_SetConfig+0xaa>
 8002e5e:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <UART_SetConfig+0x160>)
 8002e62:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002e68:	67a3      	str	r3, [r4, #120]	; 0x78

  return ret;
}
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	cfff69f3 	.word	0xcfff69f3
 8002e70:	ffffcfff 	.word	0xffffcfff
 8002e74:	11fff4ff 	.word	0x11fff4ff
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	080048f7 	.word	0x080048f7
 8002e84:	40004400 	.word	0x40004400
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	080048fa 	.word	0x080048fa
 8002e90:	0000ffef 	.word	0x0000ffef
 8002e94:	00010001 	.word	0x00010001

08002e98 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002e9a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e9c:	07da      	lsls	r2, r3, #31
 8002e9e:	d506      	bpl.n	8002eae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea0:	6801      	ldr	r1, [r0, #0]
 8002ea2:	4c28      	ldr	r4, [pc, #160]	; (8002f44 <UART_AdvFeatureConfig+0xac>)
 8002ea4:	684a      	ldr	r2, [r1, #4]
 8002ea6:	4022      	ands	r2, r4
 8002ea8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002eaa:	4322      	orrs	r2, r4
 8002eac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eae:	079a      	lsls	r2, r3, #30
 8002eb0:	d506      	bpl.n	8002ec0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	4c24      	ldr	r4, [pc, #144]	; (8002f48 <UART_AdvFeatureConfig+0xb0>)
 8002eb6:	684a      	ldr	r2, [r1, #4]
 8002eb8:	4022      	ands	r2, r4
 8002eba:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ebc:	4322      	orrs	r2, r4
 8002ebe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec0:	075a      	lsls	r2, r3, #29
 8002ec2:	d506      	bpl.n	8002ed2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec4:	6801      	ldr	r1, [r0, #0]
 8002ec6:	4c21      	ldr	r4, [pc, #132]	; (8002f4c <UART_AdvFeatureConfig+0xb4>)
 8002ec8:	684a      	ldr	r2, [r1, #4]
 8002eca:	4022      	ands	r2, r4
 8002ecc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ece:	4322      	orrs	r2, r4
 8002ed0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed2:	071a      	lsls	r2, r3, #28
 8002ed4:	d506      	bpl.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed6:	6801      	ldr	r1, [r0, #0]
 8002ed8:	4c1d      	ldr	r4, [pc, #116]	; (8002f50 <UART_AdvFeatureConfig+0xb8>)
 8002eda:	684a      	ldr	r2, [r1, #4]
 8002edc:	4022      	ands	r2, r4
 8002ede:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ee0:	4322      	orrs	r2, r4
 8002ee2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee4:	06da      	lsls	r2, r3, #27
 8002ee6:	d506      	bpl.n	8002ef6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee8:	6801      	ldr	r1, [r0, #0]
 8002eea:	4c1a      	ldr	r4, [pc, #104]	; (8002f54 <UART_AdvFeatureConfig+0xbc>)
 8002eec:	688a      	ldr	r2, [r1, #8]
 8002eee:	4022      	ands	r2, r4
 8002ef0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ef2:	4322      	orrs	r2, r4
 8002ef4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ef6:	069a      	lsls	r2, r3, #26
 8002ef8:	d506      	bpl.n	8002f08 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efa:	6801      	ldr	r1, [r0, #0]
 8002efc:	4c16      	ldr	r4, [pc, #88]	; (8002f58 <UART_AdvFeatureConfig+0xc0>)
 8002efe:	688a      	ldr	r2, [r1, #8]
 8002f00:	4022      	ands	r2, r4
 8002f02:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f04:	4322      	orrs	r2, r4
 8002f06:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f08:	065a      	lsls	r2, r3, #25
 8002f0a:	d510      	bpl.n	8002f2e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f0c:	6801      	ldr	r1, [r0, #0]
 8002f0e:	4d13      	ldr	r5, [pc, #76]	; (8002f5c <UART_AdvFeatureConfig+0xc4>)
 8002f10:	684a      	ldr	r2, [r1, #4]
 8002f12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f14:	402a      	ands	r2, r5
 8002f16:	4322      	orrs	r2, r4
 8002f18:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0352      	lsls	r2, r2, #13
 8002f1e:	4294      	cmp	r4, r2
 8002f20:	d105      	bne.n	8002f2e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f22:	684a      	ldr	r2, [r1, #4]
 8002f24:	4c0e      	ldr	r4, [pc, #56]	; (8002f60 <UART_AdvFeatureConfig+0xc8>)
 8002f26:	4022      	ands	r2, r4
 8002f28:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002f2a:	4322      	orrs	r2, r4
 8002f2c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	d506      	bpl.n	8002f40 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f32:	6802      	ldr	r2, [r0, #0]
 8002f34:	490b      	ldr	r1, [pc, #44]	; (8002f64 <UART_AdvFeatureConfig+0xcc>)
 8002f36:	6853      	ldr	r3, [r2, #4]
 8002f38:	400b      	ands	r3, r1
 8002f3a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6053      	str	r3, [r2, #4]
  }
}
 8002f40:	bd30      	pop	{r4, r5, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	fffdffff 	.word	0xfffdffff
 8002f48:	fffeffff 	.word	0xfffeffff
 8002f4c:	fffbffff 	.word	0xfffbffff
 8002f50:	ffff7fff 	.word	0xffff7fff
 8002f54:	ffffefff 	.word	0xffffefff
 8002f58:	ffffdfff 	.word	0xffffdfff
 8002f5c:	ffefffff 	.word	0xffefffff
 8002f60:	ff9fffff 	.word	0xff9fffff
 8002f64:	fff7ffff 	.word	0xfff7ffff

08002f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f6a:	2780      	movs	r7, #128	; 0x80
{
 8002f6c:	0004      	movs	r4, r0
 8002f6e:	000d      	movs	r5, r1
 8002f70:	0016      	movs	r6, r2
 8002f72:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f74:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	69d3      	ldr	r3, [r2, #28]
 8002f7a:	402b      	ands	r3, r5
 8002f7c:	1b5b      	subs	r3, r3, r5
 8002f7e:	4259      	negs	r1, r3
 8002f80:	414b      	adcs	r3, r1
 8002f82:	42b3      	cmp	r3, r6
 8002f84:	d001      	beq.n	8002f8a <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2000      	movs	r0, #0
 8002f88:	e02a      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	9b08      	ldr	r3, [sp, #32]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	d0f3      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe fdd4 	bl	8001b3c <HAL_GetTick>
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	1ac0      	subs	r0, r0, r3
 8002f98:	9b08      	ldr	r3, [sp, #32]
 8002f9a:	4298      	cmp	r0, r3
 8002f9c:	d801      	bhi.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11f      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa2:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fac:	6821      	ldr	r1, [r4, #0]
 8002fae:	4d20      	ldr	r5, [pc, #128]	; (8003030 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	402b      	ands	r3, r5
 8002fb4:	600b      	str	r3, [r1, #0]
 8002fb6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	6821      	ldr	r1, [r4, #0]
 8002fc4:	688b      	ldr	r3, [r1, #8]
 8002fc6:	4393      	bics	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002fce:	0022      	movs	r2, r4
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	3288      	adds	r2, #136	; 0x88
 8002fd4:	6013      	str	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	6053      	str	r3, [r2, #4]
          __HAL_UNLOCK(huart);
 8002fd8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002fda:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002fdc:	3484      	adds	r4, #132	; 0x84
 8002fde:	7023      	strb	r3, [r4, #0]
}
 8002fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	420a      	tst	r2, r1
 8002fea:	d0c4      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	423a      	tst	r2, r7
 8002ff0:	d0c1      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ff2:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ffe:	6821      	ldr	r1, [r4, #0]
 8003000:	4d0b      	ldr	r5, [pc, #44]	; (8003030 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8003002:	680b      	ldr	r3, [r1, #0]
 8003004:	402b      	ands	r3, r5
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003014:	6821      	ldr	r1, [r4, #0]
 8003016:	688b      	ldr	r3, [r1, #8]
 8003018:	4393      	bics	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
 800301c:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003020:	0022      	movs	r2, r4
 8003022:	2320      	movs	r3, #32
 8003024:	3288      	adds	r2, #136	; 0x88
 8003026:	6013      	str	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 8003028:	6053      	str	r3, [r2, #4]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	e7d4      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x70>
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	fffffe5f 	.word	0xfffffe5f

08003034 <HAL_UART_Transmit>:
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	0002      	movs	r2, r0
{
 800303a:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 800303c:	3288      	adds	r2, #136	; 0x88
{
 800303e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003040:	6813      	ldr	r3, [r2, #0]
{
 8003042:	0004      	movs	r4, r0
 8003044:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003046:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003048:	2b20      	cmp	r3, #32
 800304a:	d146      	bne.n	80030da <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800304c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800304e:	2900      	cmp	r1, #0
 8003050:	d043      	beq.n	80030da <HAL_UART_Transmit+0xa6>
 8003052:	2e00      	cmp	r6, #0
 8003054:	d041      	beq.n	80030da <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	68a1      	ldr	r1, [r4, #8]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	4299      	cmp	r1, r3
 800305e:	d104      	bne.n	800306a <HAL_UART_Transmit+0x36>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003066:	4205      	tst	r5, r0
 8003068:	d137      	bne.n	80030da <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	0023      	movs	r3, r4
 800306c:	2100      	movs	r1, #0
 800306e:	3390      	adds	r3, #144	; 0x90
 8003070:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003072:	2321      	movs	r3, #33	; 0x21
 8003074:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003076:	f7fe fd61 	bl	8001b3c <HAL_GetTick>
    huart->TxXferSize  = Size;
 800307a:	0023      	movs	r3, r4
 800307c:	3354      	adds	r3, #84	; 0x54
 800307e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003080:	3302      	adds	r3, #2
 8003082:	801e      	strh	r6, [r3, #0]
 8003084:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800308a:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800308c:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	429a      	cmp	r2, r3
 8003092:	d104      	bne.n	800309e <HAL_UART_Transmit+0x6a>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	42b3      	cmp	r3, r6
 8003098:	d101      	bne.n	800309e <HAL_UART_Transmit+0x6a>
 800309a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800309c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800309e:	0023      	movs	r3, r4
 80030a0:	3356      	adds	r3, #86	; 0x56
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	0020      	movs	r0, r4
 80030b2:	003b      	movs	r3, r7
 80030b4:	f7ff ff58 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d10d      	bne.n	80030d8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80030bc:	2320      	movs	r3, #32
 80030be:	3488      	adds	r4, #136	; 0x88
 80030c0:	6023      	str	r3, [r4, #0]
    return HAL_OK;
 80030c2:	e00a      	b.n	80030da <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	9b03      	ldr	r3, [sp, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2180      	movs	r1, #128	; 0x80
 80030cc:	003b      	movs	r3, r7
 80030ce:	0020      	movs	r0, r4
 80030d0:	f7ff ff4a 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80030d8:	2003      	movs	r0, #3
}
 80030da:	b005      	add	sp, #20
 80030dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030de:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e4:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80030e6:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e8:	05db      	lsls	r3, r3, #23
 80030ea:	0ddb      	lsrs	r3, r3, #23
 80030ec:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	9a02      	ldr	r2, [sp, #8]
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
 80030fa:	e7d0      	b.n	800309e <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030fc:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80030fe:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003100:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003102:	e7f4      	b.n	80030ee <HAL_UART_Transmit+0xba>

08003104 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	0003      	movs	r3, r0
{
 8003106:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	2600      	movs	r6, #0
{
 800310a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	3390      	adds	r3, #144	; 0x90
 800310e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003110:	f7fe fd14 	bl	8001b3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003114:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003116:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	071b      	lsls	r3, r3, #28
 800311c:	d419      	bmi.n	8003152 <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	075b      	lsls	r3, r3, #29
 8003124:	d50a      	bpl.n	800313c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <UART_CheckIdleState+0x68>)
 800312a:	2200      	movs	r2, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	0020      	movs	r0, r4
 8003130:	002b      	movs	r3, r5
 8003132:	03c9      	lsls	r1, r1, #15
 8003134:	f7ff ff18 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8003138:	2800      	cmp	r0, #0
 800313a:	d115      	bne.n	8003168 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800313c:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003140:	2320      	movs	r3, #32
 8003142:	3288      	adds	r2, #136	; 0x88
 8003144:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003146:	6053      	str	r3, [r2, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003148:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800314a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800314c:	3484      	adds	r4, #132	; 0x84
 800314e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003150:	e00b      	b.n	800316a <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <UART_CheckIdleState+0x68>)
 8003156:	0032      	movs	r2, r6
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	0389      	lsls	r1, r1, #14
 800315c:	0003      	movs	r3, r0
 800315e:	0020      	movs	r0, r4
 8003160:	f7ff ff02 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8003164:	2800      	cmp	r0, #0
 8003166:	d0da      	beq.n	800311e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003168:	2003      	movs	r0, #3
}
 800316a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800316c:	01ffffff 	.word	0x01ffffff

08003170 <HAL_UART_Init>:
{
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003176:	2001      	movs	r0, #1
}
 8003178:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	0005      	movs	r5, r0
 800317c:	3588      	adds	r5, #136	; 0x88
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8003184:	0002      	movs	r2, r0
 8003186:	3284      	adds	r2, #132	; 0x84
 8003188:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800318a:	f7ff fdd1 	bl	8002d30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800318e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003190:	2101      	movs	r1, #1
 8003192:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003196:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003198:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800319a:	438b      	bics	r3, r1
 800319c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319e:	f7ff fdc9 	bl	8002d34 <UART_SetConfig>
 80031a2:	2801      	cmp	r0, #1
 80031a4:	d0e7      	beq.n	8003176 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 80031ac:	0020      	movs	r0, r4
 80031ae:	f7ff fe73 	bl	8002e98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <HAL_UART_Init+0x64>)
 80031b6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80031b8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031bc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	438a      	bics	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031c6:	2201      	movs	r2, #1
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031ce:	f7ff ff99 	bl	8003104 <UART_CheckIdleState>
 80031d2:	e7d1      	b.n	8003178 <HAL_UART_Init+0x8>
 80031d4:	ffffb7ff 	.word	0xffffb7ff

080031d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031da:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80031dc:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <UARTEx_SetNbDataToProcess+0x40>)
 80031e4:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031e8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031ea:	4e0c      	ldr	r6, [pc, #48]	; (800321c <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031ec:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031ee:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80031f0:	4d0b      	ldr	r5, [pc, #44]	; (8003220 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031f2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031f4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80031f6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031f8:	00c0      	lsls	r0, r0, #3
 80031fa:	f7fd f81f 	bl	800023c <__divsi3>
 80031fe:	0023      	movs	r3, r4
 8003200:	336a      	adds	r3, #106	; 0x6a
 8003202:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003204:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003206:	0f5b      	lsrs	r3, r3, #29
 8003208:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800320a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800320c:	00c0      	lsls	r0, r0, #3
 800320e:	f7fd f815 	bl	800023c <__divsi3>
 8003212:	3468      	adds	r4, #104	; 0x68
 8003214:	8020      	strh	r0, [r4, #0]
}
 8003216:	e7e6      	b.n	80031e6 <UARTEx_SetNbDataToProcess+0xe>
 8003218:	00010001 	.word	0x00010001
 800321c:	0800491a 	.word	0x0800491a
 8003220:	08004912 	.word	0x08004912

08003224 <HAL_UARTEx_DisableFifoMode>:
{
 8003224:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003226:	0004      	movs	r4, r0
 8003228:	3484      	adds	r4, #132	; 0x84
 800322a:	7822      	ldrb	r2, [r4, #0]
{
 800322c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 800322e:	2002      	movs	r0, #2
 8003230:	2a01      	cmp	r2, #1
 8003232:	d011      	beq.n	8003258 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8003234:	001d      	movs	r5, r3
 8003236:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003238:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800323a:	3588      	adds	r5, #136	; 0x88
 800323c:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003242:	6810      	ldr	r0, [r2, #0]
 8003244:	43b0      	bics	r0, r6
 8003246:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <HAL_UARTEx_DisableFifoMode+0x38>)
 800324a:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800324c:	2000      	movs	r0, #0
 800324e:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8003250:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003252:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003254:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8003256:	7020      	strb	r0, [r4, #0]
}
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	dfffffff 	.word	0xdfffffff

08003260 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8003264:	0025      	movs	r5, r4
 8003266:	3584      	adds	r5, #132	; 0x84
 8003268:	782a      	ldrb	r2, [r5, #0]
{
 800326a:	0008      	movs	r0, r1
  __HAL_LOCK(huart);
 800326c:	2302      	movs	r3, #2
 800326e:	2a01      	cmp	r2, #1
 8003270:	d018      	beq.n	80032a4 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003272:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	0026      	movs	r6, r4
  __HAL_LOCK(huart);
 8003276:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003278:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800327a:	3688      	adds	r6, #136	; 0x88
 800327c:	3322      	adds	r3, #34	; 0x22
 800327e:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003280:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	438b      	bics	r3, r1
 8003286:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003288:	6893      	ldr	r3, [r2, #8]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	08d9      	lsrs	r1, r3, #3
 800328e:	4301      	orrs	r1, r0
 8003290:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003292:	0020      	movs	r0, r4
 8003294:	f7ff ffa0 	bl	80031d8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800329c:	2320      	movs	r3, #32
 800329e:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80032a0:	2300      	movs	r3, #0
 80032a2:	702b      	strb	r3, [r5, #0]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032a8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80032aa:	0005      	movs	r5, r0
 80032ac:	3584      	adds	r5, #132	; 0x84
 80032ae:	782b      	ldrb	r3, [r5, #0]
{
 80032b0:	0004      	movs	r4, r0
 80032b2:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80032b4:	2002      	movs	r0, #2
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d018      	beq.n	80032ec <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 80032ba:	0026      	movs	r6, r4
 80032bc:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80032be:	3801      	subs	r0, #1
 80032c0:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032c2:	3688      	adds	r6, #136	; 0x88
 80032c4:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	4381      	bics	r1, r0
 80032ce:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	4807      	ldr	r0, [pc, #28]	; (80032f0 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 80032d4:	4001      	ands	r1, r0
 80032d6:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 80032d8:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032da:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032dc:	f7ff ff7c 	bl	80031d8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032e0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80032e2:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032e4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032e6:	2320      	movs	r3, #32
 80032e8:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80032ea:	7028      	strb	r0, [r5, #0]
}
 80032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	f1ffffff 	.word	0xf1ffffff

080032f4 <MX_TOF_Init>:
static void MX_VL53L4CD_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);
static int32_t decimal_part(float_t x);

void MX_TOF_Init(void)
{
 80032f4:	b510      	push	{r4, lr}
}

static void MX_VL53L4CD_SimpleRanging_Init(void)
{
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fe fb6e 	bl	80019d8 <BSP_COM_Init>

  printf("VL53L4CD Simple Ranging demo application\n");
 80032fc:	4806      	ldr	r0, [pc, #24]	; (8003318 <MX_TOF_Init+0x24>)
 80032fe:	f000 fa53 	bl	80037a8 <puts>
  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L4CD);
 8003302:	2000      	movs	r0, #0
 8003304:	f000 f918 	bl	8003538 <CUSTOM_RANGING_SENSOR_Init>

  if (status != BSP_ERROR_NONE)
 8003308:	2800      	cmp	r0, #0
 800330a:	d003      	beq.n	8003314 <MX_TOF_Init+0x20>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <MX_TOF_Init+0x28>)
 800330e:	f000 fa4b 	bl	80037a8 <puts>
    while(1);
 8003312:	e7fe      	b.n	8003312 <MX_TOF_Init+0x1e>
}
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	08004922 	.word	0x08004922
 800331c:	0800494b 	.word	0x0800494b

08003320 <MX_TOF_Process>:
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003322:	b08b      	sub	sp, #44	; 0x2c
static void MX_VL53L4CD_SimpleRanging_Process(void)
{
  uint32_t Id;
  RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L4CD, &Id);
 8003324:	a903      	add	r1, sp, #12
 8003326:	2000      	movs	r0, #0
 8003328:	f000 f880 	bl	800342c <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L4CD, &Cap);

  Profile.RangingProfile = VL53L4CD_PROFILE_CONTINUOUS;
  Profile.TimingBudget = TIMING_BUDGET; /* 10 ms < TimingBudget < 200 ms */
  Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 800332c:	2600      	movs	r6, #0
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L4CD, &Cap);
 800332e:	4937      	ldr	r1, [pc, #220]	; (800340c <MX_TOF_Process+0xec>)
 8003330:	2000      	movs	r0, #0
 8003332:	f000 f88f 	bl	8003454 <CUSTOM_RANGING_SENSOR_GetCapabilities>
  Profile.RangingProfile = VL53L4CD_PROFILE_CONTINUOUS;
 8003336:	2401      	movs	r4, #1
  Profile.TimingBudget = TIMING_BUDGET; /* 10 ms < TimingBudget < 200 ms */
 8003338:	231e      	movs	r3, #30
  Profile.RangingProfile = VL53L4CD_PROFILE_CONTINUOUS;
 800333a:	4d35      	ldr	r5, [pc, #212]	; (8003410 <MX_TOF_Process+0xf0>)
  Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L4CD, &Profile);
 800333c:	0030      	movs	r0, r6
 800333e:	0029      	movs	r1, r5
  Profile.RangingProfile = VL53L4CD_PROFILE_CONTINUOUS;
 8003340:	602c      	str	r4, [r5, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 10 ms < TimingBudget < 200 ms */
 8003342:	606b      	str	r3, [r5, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, NOT USED for normal ranging */
 8003344:	60ae      	str	r6, [r5, #8]
  Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8003346:	60ec      	str	r4, [r5, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8003348:	612c      	str	r4, [r5, #16]
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L4CD, &Profile);
 800334a:	f000 f897 	bl	800347c <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L4CD, RS_MODE_BLOCKING_CONTINUOUS);
 800334e:	0021      	movs	r1, r4
 8003350:	0030      	movs	r0, r6
 8003352:	f000 f8bb 	bl	80034cc <CUSTOM_RANGING_SENSOR_Start>

  while (1)
  {
    /* polling mode */
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L4CD, &Result);
 8003356:	2000      	movs	r0, #0
 8003358:	a904      	add	r1, sp, #16
 800335a:	f000 f8a3 	bl	80034a4 <CUSTOM_RANGING_SENSOR_GetDistance>
 800335e:	1e04      	subs	r4, r0, #0

    if (status == BSP_ERROR_NONE)
 8003360:	d04f      	beq.n	8003402 <MX_TOF_Process+0xe2>
    {
      print_result(&Result);
    }

    HAL_Delay(POLLING_PERIOD);
 8003362:	20fa      	movs	r0, #250	; 0xfa
 8003364:	f7fe fbf0 	bl	8001b48 <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L4CD, &Result);
 8003368:	e7f5      	b.n	8003356 <MX_TOF_Process+0x36>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
    {
      printf("\n |---> ");
 800336a:	482a      	ldr	r0, [pc, #168]	; (8003414 <MX_TOF_Process+0xf4>)

      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 800336c:	1ca6      	adds	r6, r4, #2
      printf("\n |---> ");
 800336e:	f000 f97b 	bl	8003668 <iprintf>
        (long)Result->ZoneResult[i].Status[j],
 8003372:	00b6      	lsls	r6, r6, #2
        (long)Result->ZoneResult[i].Distance[j]);
 8003374:	aa04      	add	r2, sp, #16
 8003376:	00a3      	lsls	r3, r4, #2
 8003378:	18d3      	adds	r3, r2, r3
        (long)Result->ZoneResult[i].Status[j],
 800337a:	1996      	adds	r6, r2, r6
      printf("Status = %ld, Distance = %5ld mm ",
 800337c:	6871      	ldr	r1, [r6, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4825      	ldr	r0, [pc, #148]	; (8003418 <MX_TOF_Process+0xf8>)
 8003382:	f000 f971 	bl	8003668 <iprintf>

      if (Profile.EnableAmbient)
 8003386:	68eb      	ldr	r3, [r5, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <MX_TOF_Process+0x96>
        printf(", Ambient = %ld.%02ld kcps/spad",
          (long)Result->ZoneResult[i].Ambient[j],
 800338c:	68b7      	ldr	r7, [r6, #8]
        printf(", Ambient = %ld.%02ld kcps/spad",
 800338e:	1c38      	adds	r0, r7, #0
 8003390:	f7fd fc16 	bl	8000bc0 <__aeabi_f2iz>
 8003394:	0006      	movs	r6, r0
}

static int32_t decimal_part(float_t x)
{
  int32_t int_part = (int32_t) x;
  return (int32_t)((x - int_part) * 100);
 8003396:	f7fd fc33 	bl	8000c00 <__aeabi_i2f>
 800339a:	1c01      	adds	r1, r0, #0
 800339c:	1c38      	adds	r0, r7, #0
 800339e:	f7fd fa61 	bl	8000864 <__aeabi_fsub>
 80033a2:	491e      	ldr	r1, [pc, #120]	; (800341c <MX_TOF_Process+0xfc>)
 80033a4:	f7fd f938 	bl	8000618 <__aeabi_fmul>
 80033a8:	f7fd fc0a 	bl	8000bc0 <__aeabi_f2iz>
        printf(", Ambient = %ld.%02ld kcps/spad",
 80033ac:	0031      	movs	r1, r6
  return (int32_t)((x - int_part) * 100);
 80033ae:	0002      	movs	r2, r0
        printf(", Ambient = %ld.%02ld kcps/spad",
 80033b0:	481b      	ldr	r0, [pc, #108]	; (8003420 <MX_TOF_Process+0x100>)
 80033b2:	f000 f959 	bl	8003668 <iprintf>
      if (Profile.EnableSignal)
 80033b6:	692b      	ldr	r3, [r5, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d018      	beq.n	80033ee <MX_TOF_Process+0xce>
          (long)Result->ZoneResult[i].Signal[j],
 80033bc:	1d23      	adds	r3, r4, #4
 80033be:	aa04      	add	r2, sp, #16
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	18d3      	adds	r3, r2, r3
 80033c4:	685f      	ldr	r7, [r3, #4]
        printf(", Signal = %ld.%02ld kcps/spad",
 80033c6:	1c38      	adds	r0, r7, #0
 80033c8:	f7fd fbfa 	bl	8000bc0 <__aeabi_f2iz>
 80033cc:	0006      	movs	r6, r0
  return (int32_t)((x - int_part) * 100);
 80033ce:	f7fd fc17 	bl	8000c00 <__aeabi_i2f>
 80033d2:	1c01      	adds	r1, r0, #0
 80033d4:	1c38      	adds	r0, r7, #0
 80033d6:	f7fd fa45 	bl	8000864 <__aeabi_fsub>
 80033da:	4910      	ldr	r1, [pc, #64]	; (800341c <MX_TOF_Process+0xfc>)
 80033dc:	f7fd f91c 	bl	8000618 <__aeabi_fmul>
 80033e0:	f7fd fbee 	bl	8000bc0 <__aeabi_f2iz>
        printf(", Signal = %ld.%02ld kcps/spad",
 80033e4:	0031      	movs	r1, r6
  return (int32_t)((x - int_part) * 100);
 80033e6:	0002      	movs	r2, r0
        printf(", Signal = %ld.%02ld kcps/spad",
 80033e8:	480e      	ldr	r0, [pc, #56]	; (8003424 <MX_TOF_Process+0x104>)
 80033ea:	f000 f93d 	bl	8003668 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80033ee:	3401      	adds	r4, #1
 80033f0:	b2e4      	uxtb	r4, r4
 80033f2:	9b05      	ldr	r3, [sp, #20]
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	429c      	cmp	r4, r3
 80033f8:	d3b7      	bcc.n	800336a <MX_TOF_Process+0x4a>
  printf ("\n");
 80033fa:	200a      	movs	r0, #10
 80033fc:	f000 f94e 	bl	800369c <putchar>
}
 8003400:	e7af      	b.n	8003362 <MX_TOF_Process+0x42>
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8003402:	9905      	ldr	r1, [sp, #20]
 8003404:	4808      	ldr	r0, [pc, #32]	; (8003428 <MX_TOF_Process+0x108>)
 8003406:	f000 f92f 	bl	8003668 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800340a:	e7f2      	b.n	80033f2 <MX_TOF_Process+0xd2>
 800340c:	200002c0 	.word	0x200002c0
 8003410:	200002d0 	.word	0x200002d0
 8003414:	0800496d 	.word	0x0800496d
 8003418:	08004976 	.word	0x08004976
 800341c:	42c80000 	.word	0x42c80000
 8003420:	08004998 	.word	0x08004998
 8003424:	080049b8 	.word	0x080049b8
 8003428:	080049d7 	.word	0x080049d7

0800342c <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 800342c:	b510      	push	{r4, lr}
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800342e:	2800      	cmp	r0, #0
 8003430:	d109      	bne.n	8003446 <CUSTOM_RANGING_SENSOR_ReadID+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <CUSTOM_RANGING_SENSOR_ReadID+0x20>)
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <CUSTOM_RANGING_SENSOR_ReadID+0x24>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6810      	ldr	r0, [r2, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4798      	blx	r3
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800343e:	2304      	movs	r3, #4
 8003440:	17c0      	asrs	r0, r0, #31
 8003442:	4398      	bics	r0, r3
  }

  return ret;
}
 8003444:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003446:	2002      	movs	r0, #2
 8003448:	4240      	negs	r0, r0
 800344a:	e7fb      	b.n	8003444 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
 800344c:	200002e8 	.word	0x200002e8
 8003450:	200002e4 	.word	0x200002e4

08003454 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8003454:	b510      	push	{r4, lr}
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8003456:	2800      	cmp	r0, #0
 8003458:	d109      	bne.n	800346e <CUSTOM_RANGING_SENSOR_GetCapabilities+0x1a>
    {
      ret = BSP_ERROR_WRONG_PARAM;
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x20>)
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x24>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6810      	ldr	r0, [r2, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4798      	blx	r3
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8003466:	2304      	movs	r3, #4
 8003468:	17c0      	asrs	r0, r0, #31
 800346a:	4398      	bics	r0, r3
    }

    return ret;
}
 800346c:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800346e:	2002      	movs	r0, #2
 8003470:	4240      	negs	r0, r0
 8003472:	e7fb      	b.n	800346c <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
 8003474:	200002e8 	.word	0x200002e8
 8003478:	200002e4 	.word	0x200002e4

0800347c <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 800347c:	b510      	push	{r4, lr}
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800347e:	2800      	cmp	r0, #0
 8003480:	d109      	bne.n	8003496 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x20>)
 8003484:	4a06      	ldr	r2, [pc, #24]	; (80034a0 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x24>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6810      	ldr	r0, [r2, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	4798      	blx	r3
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800348e:	2304      	movs	r3, #4
 8003490:	17c0      	asrs	r0, r0, #31
 8003492:	4398      	bics	r0, r3
  }

  return ret;
}
 8003494:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003496:	2002      	movs	r0, #2
 8003498:	4240      	negs	r0, r0
 800349a:	e7fb      	b.n	8003494 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
 800349c:	200002e8 	.word	0x200002e8
 80034a0:	200002e4 	.word	0x200002e4

080034a4 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80034a4:	b510      	push	{r4, lr}
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d109      	bne.n	80034be <CUSTOM_RANGING_SENSOR_GetDistance+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <CUSTOM_RANGING_SENSOR_GetDistance+0x20>)
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <CUSTOM_RANGING_SENSOR_GetDistance+0x24>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6810      	ldr	r0, [r2, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4798      	blx	r3
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80034b6:	2304      	movs	r3, #4
 80034b8:	17c0      	asrs	r0, r0, #31
 80034ba:	4398      	bics	r0, r3
  }

  return ret;
}
 80034bc:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80034be:	2002      	movs	r0, #2
 80034c0:	4240      	negs	r0, r0
 80034c2:	e7fb      	b.n	80034bc <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
 80034c4:	200002e8 	.word	0x200002e8
 80034c8:	200002e4 	.word	0x200002e4

080034cc <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 80034cc:	b510      	push	{r4, lr}
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d109      	bne.n	80034e6 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <CUSTOM_RANGING_SENSOR_Start+0x20>)
 80034d4:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <CUSTOM_RANGING_SENSOR_Start+0x24>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6810      	ldr	r0, [r2, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4798      	blx	r3
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80034de:	2304      	movs	r3, #4
 80034e0:	17c0      	asrs	r0, r0, #31
 80034e2:	4398      	bics	r0, r3
  }

  return ret;
}
 80034e4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80034e6:	2002      	movs	r0, #2
 80034e8:	4240      	negs	r0, r0
 80034ea:	e7fb      	b.n	80034e4 <CUSTOM_RANGING_SENSOR_Start+0x18>
 80034ec:	200002e8 	.word	0x200002e8
 80034f0:	200002e4 	.word	0x200002e4

080034f4 <CUSTOM_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	0004      	movs	r4, r0
 80034f8:	000d      	movs	r5, r1
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d119      	bne.n	8003532 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_ON)
 80034fe:	2900      	cmp	r1, #0
 8003500:	d10a      	bne.n	8003518 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x24>
  {
       switch (Instance)
        {
#if (USE_CUSTOM_RANGING_VL53L4CD == 1U)
          case CUSTOM_VL53L4CD:
            HAL_GPIO_WritePin(CUSTOM_VL53L4CD_XSHUT_PORT,
 8003502:	20a0      	movs	r0, #160	; 0xa0
 8003504:	2201      	movs	r2, #1
 8003506:	2104      	movs	r1, #4
 8003508:	05c0      	lsls	r0, r0, #23
 800350a:	f7fe fca7 	bl	8001e5c <HAL_GPIO_WritePin>
                CUSTOM_VL53L4CD_XSHUT_PIN, GPIO_PIN_SET);
            HAL_Delay(2);
 800350e:	2002      	movs	r0, #2
 8003510:	f7fe fb1a 	bl	8001b48 <HAL_Delay>
 8003514:	0028      	movs	r0, r5
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }

    return ret;
}
 8003516:	bd70      	pop	{r4, r5, r6, pc}
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_OFF)
 8003518:	2901      	cmp	r1, #1
 800351a:	d10a      	bne.n	8003532 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x3e>
            HAL_GPIO_WritePin(CUSTOM_VL53L4CD_XSHUT_PORT,
 800351c:	0002      	movs	r2, r0
 800351e:	20a0      	movs	r0, #160	; 0xa0
 8003520:	2104      	movs	r1, #4
 8003522:	05c0      	lsls	r0, r0, #23
 8003524:	f7fe fc9a 	bl	8001e5c <HAL_GPIO_WritePin>
            HAL_Delay(2);
 8003528:	2002      	movs	r0, #2
 800352a:	f7fe fb0d 	bl	8001b48 <HAL_Delay>
            ret = BSP_ERROR_NONE;
 800352e:	0020      	movs	r0, r4
            break;
 8003530:	e7f1      	b.n	8003516 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x22>
    ret = BSP_ERROR_WRONG_PARAM;
 8003532:	2002      	movs	r0, #2
 8003534:	4240      	negs	r0, r0
    return ret;
 8003536:	e7ee      	b.n	8003516 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x22>

08003538 <CUSTOM_RANGING_SENSOR_Init>:
{
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	b088      	sub	sp, #32
  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800353c:	2800      	cmp	r0, #0
 800353e:	d13e      	bne.n	80035be <CUSTOM_RANGING_SENSOR_Init+0x86>
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_OFF);
 8003540:	2101      	movs	r1, #1
 8003542:	f7ff ffd7 	bl	80034f4 <CUSTOM_RANGING_SENSOR_SetPowerMode>
            HAL_GPIO_WritePin(CUSTOM_VL53L4CD_XSHUT_PORT,
 8003546:	20a0      	movs	r0, #160	; 0xa0
 8003548:	2104      	movs	r1, #4
 800354a:	2201      	movs	r2, #1
 800354c:	05c0      	lsls	r0, r0, #23
 800354e:	f7fe fc85 	bl	8001e5c <HAL_GPIO_WritePin>
            HAL_Delay(2);
 8003552:	2002      	movs	r0, #2
 8003554:	f7fe faf8 	bl	8001b48 <HAL_Delay>
  VL53L4CD_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L4CD_Object_t   VL53L4CDObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L4CD_ADDRESS;
 8003558:	2352      	movs	r3, #82	; 0x52
 800355a:	a902      	add	r1, sp, #8
 800355c:	810b      	strh	r3, [r1, #8]
  IOCtx.Init        = CUSTOM_VL53L4CD_I2C_Init;
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <CUSTOM_RANGING_SENSOR_Init+0x8c>)
  IOCtx.DeInit      = CUSTOM_VL53L4CD_I2C_DeInit;
  IOCtx.WriteReg    = CUSTOM_VL53L4CD_I2C_WriteReg;
  IOCtx.ReadReg     = CUSTOM_VL53L4CD_I2C_ReadReg;
  IOCtx.GetTick     = BSP_GetTick;

  if (VL53L4CD_RegisterBusIO(&VL53L4CDObj, &IOCtx) != VL53L4CD_OK)
 8003560:	4c19      	ldr	r4, [pc, #100]	; (80035c8 <CUSTOM_RANGING_SENSOR_Init+0x90>)
  IOCtx.Init        = CUSTOM_VL53L4CD_I2C_Init;
 8003562:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = CUSTOM_VL53L4CD_I2C_DeInit;
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <CUSTOM_RANGING_SENSOR_Init+0x94>)
  if (VL53L4CD_RegisterBusIO(&VL53L4CDObj, &IOCtx) != VL53L4CD_OK)
 8003566:	0020      	movs	r0, r4
  IOCtx.DeInit      = CUSTOM_VL53L4CD_I2C_DeInit;
 8003568:	604b      	str	r3, [r1, #4]
  IOCtx.WriteReg    = CUSTOM_VL53L4CD_I2C_WriteReg;
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <CUSTOM_RANGING_SENSOR_Init+0x98>)
 800356c:	60cb      	str	r3, [r1, #12]
  IOCtx.ReadReg     = CUSTOM_VL53L4CD_I2C_ReadReg;
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <CUSTOM_RANGING_SENSOR_Init+0x9c>)
 8003570:	610b      	str	r3, [r1, #16]
  IOCtx.GetTick     = BSP_GetTick;
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <CUSTOM_RANGING_SENSOR_Init+0xa0>)
 8003574:	614b      	str	r3, [r1, #20]
  if (VL53L4CD_RegisterBusIO(&VL53L4CDObj, &IOCtx) != VL53L4CD_OK)
 8003576:	f7fe f9e5 	bl	8001944 <VL53L4CD_RegisterBusIO>
 800357a:	2800      	cmp	r0, #0
 800357c:	d002      	beq.n	8003584 <CUSTOM_RANGING_SENSOR_Init+0x4c>
            ret = BSP_ERROR_NO_INIT;
 800357e:	2001      	movs	r0, #1
    ret = BSP_ERROR_WRONG_PARAM;
 8003580:	4240      	negs	r0, r0
  return ret;
 8003582:	e01a      	b.n	80035ba <CUSTOM_RANGING_SENSOR_Init+0x82>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if (VL53L4CD_ReadID(&VL53L4CDObj, &id) != VL53L4CD_OK)
 8003584:	0020      	movs	r0, r4
 8003586:	a901      	add	r1, sp, #4
 8003588:	f7fe f8d2 	bl	8001730 <VL53L4CD_ReadID>
 800358c:	2800      	cmp	r0, #0
 800358e:	d1f6      	bne.n	800357e <CUSTOM_RANGING_SENSOR_Init+0x46>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if (id != VL53L4CD_ID)
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <CUSTOM_RANGING_SENSOR_Init+0xa4>)
 8003592:	9a01      	ldr	r2, [sp, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d1f2      	bne.n	800357e <CUSTOM_RANGING_SENSOR_Init+0x46>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L4CD_RANGING_SENSOR_Driver;
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <CUSTOM_RANGING_SENSOR_Init+0xa8>)
 800359a:	4e12      	ldr	r6, [pc, #72]	; (80035e4 <CUSTOM_RANGING_SENSOR_Init+0xac>)
      CUSTOM_RANGING_CompObj[Instance] = &VL53L4CDObj;
 800359c:	4d12      	ldr	r5, [pc, #72]	; (80035e8 <CUSTOM_RANGING_SENSOR_Init+0xb0>)
      CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L4CD_RANGING_SENSOR_Driver;
 800359e:	6033      	str	r3, [r6, #0]

      if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L4CD_OK)
 80035a0:	0020      	movs	r0, r4
 80035a2:	681b      	ldr	r3, [r3, #0]
      CUSTOM_RANGING_CompObj[Instance] = &VL53L4CDObj;
 80035a4:	602c      	str	r4, [r5, #0]
      if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L4CD_OK)
 80035a6:	4798      	blx	r3
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d1e8      	bne.n	800357e <CUSTOM_RANGING_SENSOR_Init+0x46>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], &RANGING_SENSOR_Cap[Instance]) != VL53L4CD_OK)
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	490f      	ldr	r1, [pc, #60]	; (80035ec <CUSTOM_RANGING_SENSOR_Init+0xb4>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	6828      	ldr	r0, [r5, #0]
 80035b4:	4798      	blx	r3
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1e1      	bne.n	800357e <CUSTOM_RANGING_SENSOR_Init+0x46>
}
 80035ba:	b008      	add	sp, #32
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80035be:	2002      	movs	r0, #2
 80035c0:	e7de      	b.n	8003580 <CUSTOM_RANGING_SENSOR_Init+0x48>
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	08000e71 	.word	0x08000e71
 80035c8:	200002fc 	.word	0x200002fc
 80035cc:	08000d5d 	.word	0x08000d5d
 80035d0:	08000db1 	.word	0x08000db1
 80035d4:	08000de5 	.word	0x08000de5
 80035d8:	08000e19 	.word	0x08000e19
 80035dc:	0000eaaa 	.word	0x0000eaaa
 80035e0:	20000004 	.word	0x20000004
 80035e4:	200002e8 	.word	0x200002e8
 80035e8:	200002e4 	.word	0x200002e4
 80035ec:	200002ec 	.word	0x200002ec

080035f0 <__errno>:
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <__errno+0x8>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	4770      	bx	lr
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000048 	.word	0x20000048

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	2600      	movs	r6, #0
 8003600:	4d0c      	ldr	r5, [pc, #48]	; (8003634 <__libc_init_array+0x38>)
 8003602:	4c0d      	ldr	r4, [pc, #52]	; (8003638 <__libc_init_array+0x3c>)
 8003604:	1b64      	subs	r4, r4, r5
 8003606:	10a4      	asrs	r4, r4, #2
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	2600      	movs	r6, #0
 800360e:	f001 f8dd 	bl	80047cc <_init>
 8003612:	4d0a      	ldr	r5, [pc, #40]	; (800363c <__libc_init_array+0x40>)
 8003614:	4c0a      	ldr	r4, [pc, #40]	; (8003640 <__libc_init_array+0x44>)
 8003616:	1b64      	subs	r4, r4, r5
 8003618:	10a4      	asrs	r4, r4, #2
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	00b3      	lsls	r3, r6, #2
 8003622:	58eb      	ldr	r3, [r5, r3]
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	00b3      	lsls	r3, r6, #2
 800362c:	58eb      	ldr	r3, [r5, r3]
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	08004a80 	.word	0x08004a80
 8003638:	08004a80 	.word	0x08004a80
 800363c:	08004a80 	.word	0x08004a80
 8003640:	08004a84 	.word	0x08004a84

08003644 <memcpy>:
 8003644:	2300      	movs	r3, #0
 8003646:	b510      	push	{r4, lr}
 8003648:	429a      	cmp	r2, r3
 800364a:	d100      	bne.n	800364e <memcpy+0xa>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	5ccc      	ldrb	r4, [r1, r3]
 8003650:	54c4      	strb	r4, [r0, r3]
 8003652:	3301      	adds	r3, #1
 8003654:	e7f8      	b.n	8003648 <memcpy+0x4>

08003656 <memset>:
 8003656:	0003      	movs	r3, r0
 8003658:	1882      	adds	r2, r0, r2
 800365a:	4293      	cmp	r3, r2
 800365c:	d100      	bne.n	8003660 <memset+0xa>
 800365e:	4770      	bx	lr
 8003660:	7019      	strb	r1, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	e7f9      	b.n	800365a <memset+0x4>
	...

08003668 <iprintf>:
 8003668:	b40f      	push	{r0, r1, r2, r3}
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <iprintf+0x30>)
 800366c:	b513      	push	{r0, r1, r4, lr}
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	2c00      	cmp	r4, #0
 8003672:	d005      	beq.n	8003680 <iprintf+0x18>
 8003674:	69a3      	ldr	r3, [r4, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <iprintf+0x18>
 800367a:	0020      	movs	r0, r4
 800367c:	f000 fa9a 	bl	8003bb4 <__sinit>
 8003680:	ab05      	add	r3, sp, #20
 8003682:	0020      	movs	r0, r4
 8003684:	9a04      	ldr	r2, [sp, #16]
 8003686:	68a1      	ldr	r1, [r4, #8]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f000 fcad 	bl	8003fe8 <_vfiprintf_r>
 800368e:	bc16      	pop	{r1, r2, r4}
 8003690:	bc08      	pop	{r3}
 8003692:	b004      	add	sp, #16
 8003694:	4718      	bx	r3
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20000048 	.word	0x20000048

0800369c <putchar>:
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <putchar+0x24>)
 800369e:	b570      	push	{r4, r5, r6, lr}
 80036a0:	681c      	ldr	r4, [r3, #0]
 80036a2:	0005      	movs	r5, r0
 80036a4:	2c00      	cmp	r4, #0
 80036a6:	d005      	beq.n	80036b4 <putchar+0x18>
 80036a8:	69a3      	ldr	r3, [r4, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <putchar+0x18>
 80036ae:	0020      	movs	r0, r4
 80036b0:	f000 fa80 	bl	8003bb4 <__sinit>
 80036b4:	0029      	movs	r1, r5
 80036b6:	0020      	movs	r0, r4
 80036b8:	68a2      	ldr	r2, [r4, #8]
 80036ba:	f000 ff51 	bl	8004560 <_putc_r>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	20000048 	.word	0x20000048

080036c4 <_puts_r>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	0005      	movs	r5, r0
 80036c8:	000e      	movs	r6, r1
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d004      	beq.n	80036d8 <_puts_r+0x14>
 80036ce:	6983      	ldr	r3, [r0, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <_puts_r+0x14>
 80036d4:	f000 fa6e 	bl	8003bb4 <__sinit>
 80036d8:	69ab      	ldr	r3, [r5, #24]
 80036da:	68ac      	ldr	r4, [r5, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <_puts_r+0x22>
 80036e0:	0028      	movs	r0, r5
 80036e2:	f000 fa67 	bl	8003bb4 <__sinit>
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <_puts_r+0xd8>)
 80036e8:	429c      	cmp	r4, r3
 80036ea:	d122      	bne.n	8003732 <_puts_r+0x6e>
 80036ec:	686c      	ldr	r4, [r5, #4]
 80036ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f0:	07db      	lsls	r3, r3, #31
 80036f2:	d405      	bmi.n	8003700 <_puts_r+0x3c>
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	059b      	lsls	r3, r3, #22
 80036f8:	d402      	bmi.n	8003700 <_puts_r+0x3c>
 80036fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fc:	f000 fafb 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	d502      	bpl.n	800370c <_puts_r+0x48>
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d129      	bne.n	8003760 <_puts_r+0x9c>
 800370c:	0021      	movs	r1, r4
 800370e:	0028      	movs	r0, r5
 8003710:	f000 f8aa 	bl	8003868 <__swsetup_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	d023      	beq.n	8003760 <_puts_r+0x9c>
 8003718:	2501      	movs	r5, #1
 800371a:	426d      	negs	r5, r5
 800371c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800371e:	07db      	lsls	r3, r3, #31
 8003720:	d405      	bmi.n	800372e <_puts_r+0x6a>
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	059b      	lsls	r3, r3, #22
 8003726:	d402      	bmi.n	800372e <_puts_r+0x6a>
 8003728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800372a:	f000 fae5 	bl	8003cf8 <__retarget_lock_release_recursive>
 800372e:	0028      	movs	r0, r5
 8003730:	bd70      	pop	{r4, r5, r6, pc}
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <_puts_r+0xdc>)
 8003734:	429c      	cmp	r4, r3
 8003736:	d101      	bne.n	800373c <_puts_r+0x78>
 8003738:	68ac      	ldr	r4, [r5, #8]
 800373a:	e7d8      	b.n	80036ee <_puts_r+0x2a>
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <_puts_r+0xe0>)
 800373e:	429c      	cmp	r4, r3
 8003740:	d1d5      	bne.n	80036ee <_puts_r+0x2a>
 8003742:	68ec      	ldr	r4, [r5, #12]
 8003744:	e7d3      	b.n	80036ee <_puts_r+0x2a>
 8003746:	3601      	adds	r6, #1
 8003748:	60a3      	str	r3, [r4, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da04      	bge.n	8003758 <_puts_r+0x94>
 800374e:	69a2      	ldr	r2, [r4, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	dc16      	bgt.n	8003782 <_puts_r+0xbe>
 8003754:	290a      	cmp	r1, #10
 8003756:	d014      	beq.n	8003782 <_puts_r+0xbe>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	6022      	str	r2, [r4, #0]
 800375e:	7019      	strb	r1, [r3, #0]
 8003760:	68a3      	ldr	r3, [r4, #8]
 8003762:	7831      	ldrb	r1, [r6, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	2900      	cmp	r1, #0
 8003768:	d1ed      	bne.n	8003746 <_puts_r+0x82>
 800376a:	60a3      	str	r3, [r4, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da0f      	bge.n	8003790 <_puts_r+0xcc>
 8003770:	0028      	movs	r0, r5
 8003772:	0022      	movs	r2, r4
 8003774:	310a      	adds	r1, #10
 8003776:	f000 f821 	bl	80037bc <__swbuf_r>
 800377a:	250a      	movs	r5, #10
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d1cd      	bne.n	800371c <_puts_r+0x58>
 8003780:	e7ca      	b.n	8003718 <_puts_r+0x54>
 8003782:	0022      	movs	r2, r4
 8003784:	0028      	movs	r0, r5
 8003786:	f000 f819 	bl	80037bc <__swbuf_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	d1e8      	bne.n	8003760 <_puts_r+0x9c>
 800378e:	e7c3      	b.n	8003718 <_puts_r+0x54>
 8003790:	250a      	movs	r5, #10
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	6022      	str	r2, [r4, #0]
 8003798:	701d      	strb	r5, [r3, #0]
 800379a:	e7bf      	b.n	800371c <_puts_r+0x58>
 800379c:	08004a0c 	.word	0x08004a0c
 80037a0:	08004a2c 	.word	0x08004a2c
 80037a4:	080049ec 	.word	0x080049ec

080037a8 <puts>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <puts+0x10>)
 80037ac:	0001      	movs	r1, r0
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	f7ff ff88 	bl	80036c4 <_puts_r>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20000048 	.word	0x20000048

080037bc <__swbuf_r>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	0005      	movs	r5, r0
 80037c0:	000e      	movs	r6, r1
 80037c2:	0014      	movs	r4, r2
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d004      	beq.n	80037d2 <__swbuf_r+0x16>
 80037c8:	6983      	ldr	r3, [r0, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <__swbuf_r+0x16>
 80037ce:	f000 f9f1 	bl	8003bb4 <__sinit>
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <__swbuf_r+0xa0>)
 80037d4:	429c      	cmp	r4, r3
 80037d6:	d12e      	bne.n	8003836 <__swbuf_r+0x7a>
 80037d8:	686c      	ldr	r4, [r5, #4]
 80037da:	69a3      	ldr	r3, [r4, #24]
 80037dc:	60a3      	str	r3, [r4, #8]
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	d532      	bpl.n	800384a <__swbuf_r+0x8e>
 80037e4:	6923      	ldr	r3, [r4, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02f      	beq.n	800384a <__swbuf_r+0x8e>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	b2f7      	uxtb	r7, r6
 80037f0:	1a98      	subs	r0, r3, r2
 80037f2:	6963      	ldr	r3, [r4, #20]
 80037f4:	b2f6      	uxtb	r6, r6
 80037f6:	4283      	cmp	r3, r0
 80037f8:	dc05      	bgt.n	8003806 <__swbuf_r+0x4a>
 80037fa:	0021      	movs	r1, r4
 80037fc:	0028      	movs	r0, r5
 80037fe:	f000 f937 	bl	8003a70 <_fflush_r>
 8003802:	2800      	cmp	r0, #0
 8003804:	d127      	bne.n	8003856 <__swbuf_r+0x9a>
 8003806:	68a3      	ldr	r3, [r4, #8]
 8003808:	3001      	adds	r0, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	701f      	strb	r7, [r3, #0]
 8003816:	6963      	ldr	r3, [r4, #20]
 8003818:	4283      	cmp	r3, r0
 800381a:	d004      	beq.n	8003826 <__swbuf_r+0x6a>
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	07db      	lsls	r3, r3, #31
 8003820:	d507      	bpl.n	8003832 <__swbuf_r+0x76>
 8003822:	2e0a      	cmp	r6, #10
 8003824:	d105      	bne.n	8003832 <__swbuf_r+0x76>
 8003826:	0021      	movs	r1, r4
 8003828:	0028      	movs	r0, r5
 800382a:	f000 f921 	bl	8003a70 <_fflush_r>
 800382e:	2800      	cmp	r0, #0
 8003830:	d111      	bne.n	8003856 <__swbuf_r+0x9a>
 8003832:	0030      	movs	r0, r6
 8003834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <__swbuf_r+0xa4>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d101      	bne.n	8003840 <__swbuf_r+0x84>
 800383c:	68ac      	ldr	r4, [r5, #8]
 800383e:	e7cc      	b.n	80037da <__swbuf_r+0x1e>
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <__swbuf_r+0xa8>)
 8003842:	429c      	cmp	r4, r3
 8003844:	d1c9      	bne.n	80037da <__swbuf_r+0x1e>
 8003846:	68ec      	ldr	r4, [r5, #12]
 8003848:	e7c7      	b.n	80037da <__swbuf_r+0x1e>
 800384a:	0021      	movs	r1, r4
 800384c:	0028      	movs	r0, r5
 800384e:	f000 f80b 	bl	8003868 <__swsetup_r>
 8003852:	2800      	cmp	r0, #0
 8003854:	d0c9      	beq.n	80037ea <__swbuf_r+0x2e>
 8003856:	2601      	movs	r6, #1
 8003858:	4276      	negs	r6, r6
 800385a:	e7ea      	b.n	8003832 <__swbuf_r+0x76>
 800385c:	08004a0c 	.word	0x08004a0c
 8003860:	08004a2c 	.word	0x08004a2c
 8003864:	080049ec 	.word	0x080049ec

08003868 <__swsetup_r>:
 8003868:	4b37      	ldr	r3, [pc, #220]	; (8003948 <__swsetup_r+0xe0>)
 800386a:	b570      	push	{r4, r5, r6, lr}
 800386c:	681d      	ldr	r5, [r3, #0]
 800386e:	0006      	movs	r6, r0
 8003870:	000c      	movs	r4, r1
 8003872:	2d00      	cmp	r5, #0
 8003874:	d005      	beq.n	8003882 <__swsetup_r+0x1a>
 8003876:	69ab      	ldr	r3, [r5, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <__swsetup_r+0x1a>
 800387c:	0028      	movs	r0, r5
 800387e:	f000 f999 	bl	8003bb4 <__sinit>
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <__swsetup_r+0xe4>)
 8003884:	429c      	cmp	r4, r3
 8003886:	d10f      	bne.n	80038a8 <__swsetup_r+0x40>
 8003888:	686c      	ldr	r4, [r5, #4]
 800388a:	230c      	movs	r3, #12
 800388c:	5ee2      	ldrsh	r2, [r4, r3]
 800388e:	b293      	uxth	r3, r2
 8003890:	0711      	lsls	r1, r2, #28
 8003892:	d42d      	bmi.n	80038f0 <__swsetup_r+0x88>
 8003894:	06d9      	lsls	r1, r3, #27
 8003896:	d411      	bmi.n	80038bc <__swsetup_r+0x54>
 8003898:	2309      	movs	r3, #9
 800389a:	2001      	movs	r0, #1
 800389c:	6033      	str	r3, [r6, #0]
 800389e:	3337      	adds	r3, #55	; 0x37
 80038a0:	4313      	orrs	r3, r2
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	4240      	negs	r0, r0
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <__swsetup_r+0xe8>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d101      	bne.n	80038b2 <__swsetup_r+0x4a>
 80038ae:	68ac      	ldr	r4, [r5, #8]
 80038b0:	e7eb      	b.n	800388a <__swsetup_r+0x22>
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <__swsetup_r+0xec>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	d1e8      	bne.n	800388a <__swsetup_r+0x22>
 80038b8:	68ec      	ldr	r4, [r5, #12]
 80038ba:	e7e6      	b.n	800388a <__swsetup_r+0x22>
 80038bc:	075b      	lsls	r3, r3, #29
 80038be:	d513      	bpl.n	80038e8 <__swsetup_r+0x80>
 80038c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d008      	beq.n	80038d8 <__swsetup_r+0x70>
 80038c6:	0023      	movs	r3, r4
 80038c8:	3344      	adds	r3, #68	; 0x44
 80038ca:	4299      	cmp	r1, r3
 80038cc:	d002      	beq.n	80038d4 <__swsetup_r+0x6c>
 80038ce:	0030      	movs	r0, r6
 80038d0:	f000 fa80 	bl	8003dd4 <_free_r>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6363      	str	r3, [r4, #52]	; 0x34
 80038d8:	2224      	movs	r2, #36	; 0x24
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	4393      	bics	r3, r2
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	2300      	movs	r3, #0
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	2308      	movs	r3, #8
 80038ea:	89a2      	ldrh	r2, [r4, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <__swsetup_r+0xa6>
 80038f6:	21a0      	movs	r1, #160	; 0xa0
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	0089      	lsls	r1, r1, #2
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	400b      	ands	r3, r1
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <__swsetup_r+0xa6>
 8003906:	0021      	movs	r1, r4
 8003908:	0030      	movs	r0, r6
 800390a:	f000 fa1f 	bl	8003d4c <__smakebuf_r>
 800390e:	220c      	movs	r2, #12
 8003910:	5ea3      	ldrsh	r3, [r4, r2]
 8003912:	2001      	movs	r0, #1
 8003914:	001a      	movs	r2, r3
 8003916:	b299      	uxth	r1, r3
 8003918:	4002      	ands	r2, r0
 800391a:	4203      	tst	r3, r0
 800391c:	d00f      	beq.n	800393e <__swsetup_r+0xd6>
 800391e:	2200      	movs	r2, #0
 8003920:	60a2      	str	r2, [r4, #8]
 8003922:	6962      	ldr	r2, [r4, #20]
 8003924:	4252      	negs	r2, r2
 8003926:	61a2      	str	r2, [r4, #24]
 8003928:	2000      	movs	r0, #0
 800392a:	6922      	ldr	r2, [r4, #16]
 800392c:	4282      	cmp	r2, r0
 800392e:	d1ba      	bne.n	80038a6 <__swsetup_r+0x3e>
 8003930:	060a      	lsls	r2, r1, #24
 8003932:	d5b8      	bpl.n	80038a6 <__swsetup_r+0x3e>
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	4313      	orrs	r3, r2
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	3801      	subs	r0, #1
 800393c:	e7b3      	b.n	80038a6 <__swsetup_r+0x3e>
 800393e:	0788      	lsls	r0, r1, #30
 8003940:	d400      	bmi.n	8003944 <__swsetup_r+0xdc>
 8003942:	6962      	ldr	r2, [r4, #20]
 8003944:	60a2      	str	r2, [r4, #8]
 8003946:	e7ef      	b.n	8003928 <__swsetup_r+0xc0>
 8003948:	20000048 	.word	0x20000048
 800394c:	08004a0c 	.word	0x08004a0c
 8003950:	08004a2c 	.word	0x08004a2c
 8003954:	080049ec 	.word	0x080049ec

08003958 <__sflush_r>:
 8003958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	0005      	movs	r5, r0
 800395e:	000c      	movs	r4, r1
 8003960:	071a      	lsls	r2, r3, #28
 8003962:	d45f      	bmi.n	8003a24 <__sflush_r+0xcc>
 8003964:	684a      	ldr	r2, [r1, #4]
 8003966:	2a00      	cmp	r2, #0
 8003968:	dc04      	bgt.n	8003974 <__sflush_r+0x1c>
 800396a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800396c:	2a00      	cmp	r2, #0
 800396e:	dc01      	bgt.n	8003974 <__sflush_r+0x1c>
 8003970:	2000      	movs	r0, #0
 8003972:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003974:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003976:	2f00      	cmp	r7, #0
 8003978:	d0fa      	beq.n	8003970 <__sflush_r+0x18>
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	682e      	ldr	r6, [r5, #0]
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	001a      	movs	r2, r3
 8003984:	0149      	lsls	r1, r1, #5
 8003986:	400a      	ands	r2, r1
 8003988:	420b      	tst	r3, r1
 800398a:	d034      	beq.n	80039f6 <__sflush_r+0x9e>
 800398c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	075b      	lsls	r3, r3, #29
 8003992:	d506      	bpl.n	80039a2 <__sflush_r+0x4a>
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	1ac0      	subs	r0, r0, r3
 8003998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <__sflush_r+0x4a>
 800399e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039a0:	1ac0      	subs	r0, r0, r3
 80039a2:	0002      	movs	r2, r0
 80039a4:	6a21      	ldr	r1, [r4, #32]
 80039a6:	2300      	movs	r3, #0
 80039a8:	0028      	movs	r0, r5
 80039aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039ac:	47b8      	blx	r7
 80039ae:	89a1      	ldrh	r1, [r4, #12]
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d106      	bne.n	80039c2 <__sflush_r+0x6a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	2b1d      	cmp	r3, #29
 80039b8:	d831      	bhi.n	8003a1e <__sflush_r+0xc6>
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <__sflush_r+0x114>)
 80039bc:	40da      	lsrs	r2, r3
 80039be:	07d3      	lsls	r3, r2, #31
 80039c0:	d52d      	bpl.n	8003a1e <__sflush_r+0xc6>
 80039c2:	2300      	movs	r3, #0
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	04cb      	lsls	r3, r1, #19
 80039cc:	d505      	bpl.n	80039da <__sflush_r+0x82>
 80039ce:	1c43      	adds	r3, r0, #1
 80039d0:	d102      	bne.n	80039d8 <__sflush_r+0x80>
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d100      	bne.n	80039da <__sflush_r+0x82>
 80039d8:	6560      	str	r0, [r4, #84]	; 0x54
 80039da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039dc:	602e      	str	r6, [r5, #0]
 80039de:	2900      	cmp	r1, #0
 80039e0:	d0c6      	beq.n	8003970 <__sflush_r+0x18>
 80039e2:	0023      	movs	r3, r4
 80039e4:	3344      	adds	r3, #68	; 0x44
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d002      	beq.n	80039f0 <__sflush_r+0x98>
 80039ea:	0028      	movs	r0, r5
 80039ec:	f000 f9f2 	bl	8003dd4 <_free_r>
 80039f0:	2000      	movs	r0, #0
 80039f2:	6360      	str	r0, [r4, #52]	; 0x34
 80039f4:	e7bd      	b.n	8003972 <__sflush_r+0x1a>
 80039f6:	2301      	movs	r3, #1
 80039f8:	0028      	movs	r0, r5
 80039fa:	6a21      	ldr	r1, [r4, #32]
 80039fc:	47b8      	blx	r7
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d1c5      	bne.n	800398e <__sflush_r+0x36>
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0c2      	beq.n	800398e <__sflush_r+0x36>
 8003a08:	2b1d      	cmp	r3, #29
 8003a0a:	d001      	beq.n	8003a10 <__sflush_r+0xb8>
 8003a0c:	2b16      	cmp	r3, #22
 8003a0e:	d101      	bne.n	8003a14 <__sflush_r+0xbc>
 8003a10:	602e      	str	r6, [r5, #0]
 8003a12:	e7ad      	b.n	8003970 <__sflush_r+0x18>
 8003a14:	2340      	movs	r3, #64	; 0x40
 8003a16:	89a2      	ldrh	r2, [r4, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	81a3      	strh	r3, [r4, #12]
 8003a1c:	e7a9      	b.n	8003972 <__sflush_r+0x1a>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	430b      	orrs	r3, r1
 8003a22:	e7fa      	b.n	8003a1a <__sflush_r+0xc2>
 8003a24:	690f      	ldr	r7, [r1, #16]
 8003a26:	2f00      	cmp	r7, #0
 8003a28:	d0a2      	beq.n	8003970 <__sflush_r+0x18>
 8003a2a:	680a      	ldr	r2, [r1, #0]
 8003a2c:	600f      	str	r7, [r1, #0]
 8003a2e:	1bd2      	subs	r2, r2, r7
 8003a30:	9201      	str	r2, [sp, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	079b      	lsls	r3, r3, #30
 8003a36:	d100      	bne.n	8003a3a <__sflush_r+0xe2>
 8003a38:	694a      	ldr	r2, [r1, #20]
 8003a3a:	60a2      	str	r2, [r4, #8]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	dc00      	bgt.n	8003a44 <__sflush_r+0xec>
 8003a42:	e795      	b.n	8003970 <__sflush_r+0x18>
 8003a44:	003a      	movs	r2, r7
 8003a46:	0028      	movs	r0, r5
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	6a21      	ldr	r1, [r4, #32]
 8003a4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a4e:	47b0      	blx	r6
 8003a50:	2800      	cmp	r0, #0
 8003a52:	dc06      	bgt.n	8003a62 <__sflush_r+0x10a>
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	2001      	movs	r0, #1
 8003a58:	89a2      	ldrh	r2, [r4, #12]
 8003a5a:	4240      	negs	r0, r0
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	e787      	b.n	8003972 <__sflush_r+0x1a>
 8003a62:	9b01      	ldr	r3, [sp, #4]
 8003a64:	183f      	adds	r7, r7, r0
 8003a66:	1a1b      	subs	r3, r3, r0
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	e7e7      	b.n	8003a3c <__sflush_r+0xe4>
 8003a6c:	20400001 	.word	0x20400001

08003a70 <_fflush_r>:
 8003a70:	690b      	ldr	r3, [r1, #16]
 8003a72:	b570      	push	{r4, r5, r6, lr}
 8003a74:	0005      	movs	r5, r0
 8003a76:	000c      	movs	r4, r1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_fflush_r+0x12>
 8003a7c:	2500      	movs	r5, #0
 8003a7e:	0028      	movs	r0, r5
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d004      	beq.n	8003a90 <_fflush_r+0x20>
 8003a86:	6983      	ldr	r3, [r0, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <_fflush_r+0x20>
 8003a8c:	f000 f892 	bl	8003bb4 <__sinit>
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <_fflush_r+0x74>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d11b      	bne.n	8003ace <_fflush_r+0x5e>
 8003a96:	686c      	ldr	r4, [r5, #4]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	5ea3      	ldrsh	r3, [r4, r2]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ed      	beq.n	8003a7c <_fflush_r+0xc>
 8003aa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa2:	07d2      	lsls	r2, r2, #31
 8003aa4:	d404      	bmi.n	8003ab0 <_fflush_r+0x40>
 8003aa6:	059b      	lsls	r3, r3, #22
 8003aa8:	d402      	bmi.n	8003ab0 <_fflush_r+0x40>
 8003aaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aac:	f000 f923 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	0021      	movs	r1, r4
 8003ab4:	f7ff ff50 	bl	8003958 <__sflush_r>
 8003ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aba:	0005      	movs	r5, r0
 8003abc:	07db      	lsls	r3, r3, #31
 8003abe:	d4de      	bmi.n	8003a7e <_fflush_r+0xe>
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	059b      	lsls	r3, r3, #22
 8003ac4:	d4db      	bmi.n	8003a7e <_fflush_r+0xe>
 8003ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac8:	f000 f916 	bl	8003cf8 <__retarget_lock_release_recursive>
 8003acc:	e7d7      	b.n	8003a7e <_fflush_r+0xe>
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <_fflush_r+0x78>)
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d101      	bne.n	8003ad8 <_fflush_r+0x68>
 8003ad4:	68ac      	ldr	r4, [r5, #8]
 8003ad6:	e7df      	b.n	8003a98 <_fflush_r+0x28>
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_fflush_r+0x7c>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d1dc      	bne.n	8003a98 <_fflush_r+0x28>
 8003ade:	68ec      	ldr	r4, [r5, #12]
 8003ae0:	e7da      	b.n	8003a98 <_fflush_r+0x28>
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	08004a0c 	.word	0x08004a0c
 8003ae8:	08004a2c 	.word	0x08004a2c
 8003aec:	080049ec 	.word	0x080049ec

08003af0 <std>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b510      	push	{r4, lr}
 8003af4:	0004      	movs	r4, r0
 8003af6:	6003      	str	r3, [r0, #0]
 8003af8:	6043      	str	r3, [r0, #4]
 8003afa:	6083      	str	r3, [r0, #8]
 8003afc:	8181      	strh	r1, [r0, #12]
 8003afe:	6643      	str	r3, [r0, #100]	; 0x64
 8003b00:	0019      	movs	r1, r3
 8003b02:	81c2      	strh	r2, [r0, #14]
 8003b04:	6103      	str	r3, [r0, #16]
 8003b06:	6143      	str	r3, [r0, #20]
 8003b08:	6183      	str	r3, [r0, #24]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	305c      	adds	r0, #92	; 0x5c
 8003b0e:	f7ff fda2 	bl	8003656 <memset>
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x38>)
 8003b14:	6224      	str	r4, [r4, #32]
 8003b16:	6263      	str	r3, [r4, #36]	; 0x24
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <std+0x3c>)
 8003b1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <std+0x40>)
 8003b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <std+0x44>)
 8003b22:	6323      	str	r3, [r4, #48]	; 0x30
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	08004619 	.word	0x08004619
 8003b2c:	08004641 	.word	0x08004641
 8003b30:	08004679 	.word	0x08004679
 8003b34:	080046a5 	.word	0x080046a5

08003b38 <_cleanup_r>:
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4902      	ldr	r1, [pc, #8]	; (8003b44 <_cleanup_r+0xc>)
 8003b3c:	f000 f8ba 	bl	8003cb4 <_fwalk_reent>
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	08003a71 	.word	0x08003a71

08003b48 <__sfmoreglue>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2568      	movs	r5, #104	; 0x68
 8003b4c:	1e4a      	subs	r2, r1, #1
 8003b4e:	4355      	muls	r5, r2
 8003b50:	000e      	movs	r6, r1
 8003b52:	0029      	movs	r1, r5
 8003b54:	3174      	adds	r1, #116	; 0x74
 8003b56:	f000 f9a9 	bl	8003eac <_malloc_r>
 8003b5a:	1e04      	subs	r4, r0, #0
 8003b5c:	d008      	beq.n	8003b70 <__sfmoreglue+0x28>
 8003b5e:	2100      	movs	r1, #0
 8003b60:	002a      	movs	r2, r5
 8003b62:	6001      	str	r1, [r0, #0]
 8003b64:	6046      	str	r6, [r0, #4]
 8003b66:	300c      	adds	r0, #12
 8003b68:	60a0      	str	r0, [r4, #8]
 8003b6a:	3268      	adds	r2, #104	; 0x68
 8003b6c:	f7ff fd73 	bl	8003656 <memset>
 8003b70:	0020      	movs	r0, r4
 8003b72:	bd70      	pop	{r4, r5, r6, pc}

08003b74 <__sfp_lock_acquire>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4802      	ldr	r0, [pc, #8]	; (8003b80 <__sfp_lock_acquire+0xc>)
 8003b78:	f000 f8bd 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	2000031d 	.word	0x2000031d

08003b84 <__sfp_lock_release>:
 8003b84:	b510      	push	{r4, lr}
 8003b86:	4802      	ldr	r0, [pc, #8]	; (8003b90 <__sfp_lock_release+0xc>)
 8003b88:	f000 f8b6 	bl	8003cf8 <__retarget_lock_release_recursive>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	2000031d 	.word	0x2000031d

08003b94 <__sinit_lock_acquire>:
 8003b94:	b510      	push	{r4, lr}
 8003b96:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <__sinit_lock_acquire+0xc>)
 8003b98:	f000 f8ad 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	2000031e 	.word	0x2000031e

08003ba4 <__sinit_lock_release>:
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <__sinit_lock_release+0xc>)
 8003ba8:	f000 f8a6 	bl	8003cf8 <__retarget_lock_release_recursive>
 8003bac:	bd10      	pop	{r4, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	2000031e 	.word	0x2000031e

08003bb4 <__sinit>:
 8003bb4:	b513      	push	{r0, r1, r4, lr}
 8003bb6:	0004      	movs	r4, r0
 8003bb8:	f7ff ffec 	bl	8003b94 <__sinit_lock_acquire>
 8003bbc:	69a3      	ldr	r3, [r4, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <__sinit+0x14>
 8003bc2:	f7ff ffef 	bl	8003ba4 <__sinit_lock_release>
 8003bc6:	bd13      	pop	{r0, r1, r4, pc}
 8003bc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8003bca:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <__sinit+0x68>)
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <__sinit+0x6c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d101      	bne.n	8003be0 <__sinit+0x2c>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61a3      	str	r3, [r4, #24]
 8003be0:	0020      	movs	r0, r4
 8003be2:	f000 f81f 	bl	8003c24 <__sfp>
 8003be6:	6060      	str	r0, [r4, #4]
 8003be8:	0020      	movs	r0, r4
 8003bea:	f000 f81b 	bl	8003c24 <__sfp>
 8003bee:	60a0      	str	r0, [r4, #8]
 8003bf0:	0020      	movs	r0, r4
 8003bf2:	f000 f817 	bl	8003c24 <__sfp>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	60e0      	str	r0, [r4, #12]
 8003bfc:	6860      	ldr	r0, [r4, #4]
 8003bfe:	f7ff ff77 	bl	8003af0 <std>
 8003c02:	2201      	movs	r2, #1
 8003c04:	2109      	movs	r1, #9
 8003c06:	68a0      	ldr	r0, [r4, #8]
 8003c08:	f7ff ff72 	bl	8003af0 <std>
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	2112      	movs	r1, #18
 8003c10:	68e0      	ldr	r0, [r4, #12]
 8003c12:	f7ff ff6d 	bl	8003af0 <std>
 8003c16:	2301      	movs	r3, #1
 8003c18:	61a3      	str	r3, [r4, #24]
 8003c1a:	e7d2      	b.n	8003bc2 <__sinit+0xe>
 8003c1c:	080049e8 	.word	0x080049e8
 8003c20:	08003b39 	.word	0x08003b39

08003c24 <__sfp>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	0007      	movs	r7, r0
 8003c28:	f7ff ffa4 	bl	8003b74 <__sfp_lock_acquire>
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <__sfp+0x88>)
 8003c2e:	681e      	ldr	r6, [r3, #0]
 8003c30:	69b3      	ldr	r3, [r6, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <__sfp+0x18>
 8003c36:	0030      	movs	r0, r6
 8003c38:	f7ff ffbc 	bl	8003bb4 <__sinit>
 8003c3c:	3648      	adds	r6, #72	; 0x48
 8003c3e:	68b4      	ldr	r4, [r6, #8]
 8003c40:	6873      	ldr	r3, [r6, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	d504      	bpl.n	8003c50 <__sfp+0x2c>
 8003c46:	6833      	ldr	r3, [r6, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d022      	beq.n	8003c92 <__sfp+0x6e>
 8003c4c:	6836      	ldr	r6, [r6, #0]
 8003c4e:	e7f6      	b.n	8003c3e <__sfp+0x1a>
 8003c50:	220c      	movs	r2, #12
 8003c52:	5ea5      	ldrsh	r5, [r4, r2]
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d11a      	bne.n	8003c8e <__sfp+0x6a>
 8003c58:	0020      	movs	r0, r4
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <__sfp+0x8c>)
 8003c5c:	3058      	adds	r0, #88	; 0x58
 8003c5e:	60e3      	str	r3, [r4, #12]
 8003c60:	6665      	str	r5, [r4, #100]	; 0x64
 8003c62:	f000 f847 	bl	8003cf4 <__retarget_lock_init_recursive>
 8003c66:	f7ff ff8d 	bl	8003b84 <__sfp_lock_release>
 8003c6a:	0020      	movs	r0, r4
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	0029      	movs	r1, r5
 8003c70:	6025      	str	r5, [r4, #0]
 8003c72:	60a5      	str	r5, [r4, #8]
 8003c74:	6065      	str	r5, [r4, #4]
 8003c76:	6125      	str	r5, [r4, #16]
 8003c78:	6165      	str	r5, [r4, #20]
 8003c7a:	61a5      	str	r5, [r4, #24]
 8003c7c:	305c      	adds	r0, #92	; 0x5c
 8003c7e:	f7ff fcea 	bl	8003656 <memset>
 8003c82:	6365      	str	r5, [r4, #52]	; 0x34
 8003c84:	63a5      	str	r5, [r4, #56]	; 0x38
 8003c86:	64a5      	str	r5, [r4, #72]	; 0x48
 8003c88:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8e:	3468      	adds	r4, #104	; 0x68
 8003c90:	e7d7      	b.n	8003c42 <__sfp+0x1e>
 8003c92:	2104      	movs	r1, #4
 8003c94:	0038      	movs	r0, r7
 8003c96:	f7ff ff57 	bl	8003b48 <__sfmoreglue>
 8003c9a:	1e04      	subs	r4, r0, #0
 8003c9c:	6030      	str	r0, [r6, #0]
 8003c9e:	d1d5      	bne.n	8003c4c <__sfp+0x28>
 8003ca0:	f7ff ff70 	bl	8003b84 <__sfp_lock_release>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	e7ef      	b.n	8003c8a <__sfp+0x66>
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	080049e8 	.word	0x080049e8
 8003cb0:	ffff0001 	.word	0xffff0001

08003cb4 <_fwalk_reent>:
 8003cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cb6:	0004      	movs	r4, r0
 8003cb8:	0006      	movs	r6, r0
 8003cba:	2700      	movs	r7, #0
 8003cbc:	9101      	str	r1, [sp, #4]
 8003cbe:	3448      	adds	r4, #72	; 0x48
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	68a5      	ldr	r5, [r4, #8]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	d504      	bpl.n	8003cd8 <_fwalk_reent+0x24>
 8003cce:	6824      	ldr	r4, [r4, #0]
 8003cd0:	2c00      	cmp	r4, #0
 8003cd2:	d1f5      	bne.n	8003cc0 <_fwalk_reent+0xc>
 8003cd4:	0038      	movs	r0, r7
 8003cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cd8:	89ab      	ldrh	r3, [r5, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d908      	bls.n	8003cf0 <_fwalk_reent+0x3c>
 8003cde:	220e      	movs	r2, #14
 8003ce0:	5eab      	ldrsh	r3, [r5, r2]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d004      	beq.n	8003cf0 <_fwalk_reent+0x3c>
 8003ce6:	0029      	movs	r1, r5
 8003ce8:	0030      	movs	r0, r6
 8003cea:	9b01      	ldr	r3, [sp, #4]
 8003cec:	4798      	blx	r3
 8003cee:	4307      	orrs	r7, r0
 8003cf0:	3568      	adds	r5, #104	; 0x68
 8003cf2:	e7e8      	b.n	8003cc6 <_fwalk_reent+0x12>

08003cf4 <__retarget_lock_init_recursive>:
 8003cf4:	4770      	bx	lr

08003cf6 <__retarget_lock_acquire_recursive>:
 8003cf6:	4770      	bx	lr

08003cf8 <__retarget_lock_release_recursive>:
 8003cf8:	4770      	bx	lr
	...

08003cfc <__swhatbuf_r>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	000e      	movs	r6, r1
 8003d00:	001d      	movs	r5, r3
 8003d02:	230e      	movs	r3, #14
 8003d04:	5ec9      	ldrsh	r1, [r1, r3]
 8003d06:	0014      	movs	r4, r2
 8003d08:	b096      	sub	sp, #88	; 0x58
 8003d0a:	2900      	cmp	r1, #0
 8003d0c:	da08      	bge.n	8003d20 <__swhatbuf_r+0x24>
 8003d0e:	220c      	movs	r2, #12
 8003d10:	5eb3      	ldrsh	r3, [r6, r2]
 8003d12:	2200      	movs	r2, #0
 8003d14:	602a      	str	r2, [r5, #0]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	d411      	bmi.n	8003d3e <__swhatbuf_r+0x42>
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	e00f      	b.n	8003d40 <__swhatbuf_r+0x44>
 8003d20:	466a      	mov	r2, sp
 8003d22:	f000 fceb 	bl	80046fc <_fstat_r>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	dbf1      	blt.n	8003d0e <__swhatbuf_r+0x12>
 8003d2a:	23f0      	movs	r3, #240	; 0xf0
 8003d2c:	9901      	ldr	r1, [sp, #4]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	4019      	ands	r1, r3
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <__swhatbuf_r+0x4c>)
 8003d34:	18c9      	adds	r1, r1, r3
 8003d36:	424b      	negs	r3, r1
 8003d38:	4159      	adcs	r1, r3
 8003d3a:	6029      	str	r1, [r5, #0]
 8003d3c:	e7ed      	b.n	8003d1a <__swhatbuf_r+0x1e>
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	2000      	movs	r0, #0
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	b016      	add	sp, #88	; 0x58
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	ffffe000 	.word	0xffffe000

08003d4c <__smakebuf_r>:
 8003d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d4e:	2602      	movs	r6, #2
 8003d50:	898b      	ldrh	r3, [r1, #12]
 8003d52:	0005      	movs	r5, r0
 8003d54:	000c      	movs	r4, r1
 8003d56:	4233      	tst	r3, r6
 8003d58:	d006      	beq.n	8003d68 <__smakebuf_r+0x1c>
 8003d5a:	0023      	movs	r3, r4
 8003d5c:	3347      	adds	r3, #71	; 0x47
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	2301      	movs	r3, #1
 8003d64:	6163      	str	r3, [r4, #20]
 8003d66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003d68:	466a      	mov	r2, sp
 8003d6a:	ab01      	add	r3, sp, #4
 8003d6c:	f7ff ffc6 	bl	8003cfc <__swhatbuf_r>
 8003d70:	9900      	ldr	r1, [sp, #0]
 8003d72:	0007      	movs	r7, r0
 8003d74:	0028      	movs	r0, r5
 8003d76:	f000 f899 	bl	8003eac <_malloc_r>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d108      	bne.n	8003d90 <__smakebuf_r+0x44>
 8003d7e:	220c      	movs	r2, #12
 8003d80:	5ea3      	ldrsh	r3, [r4, r2]
 8003d82:	059a      	lsls	r2, r3, #22
 8003d84:	d4ef      	bmi.n	8003d66 <__smakebuf_r+0x1a>
 8003d86:	2203      	movs	r2, #3
 8003d88:	4393      	bics	r3, r2
 8003d8a:	431e      	orrs	r6, r3
 8003d8c:	81a6      	strh	r6, [r4, #12]
 8003d8e:	e7e4      	b.n	8003d5a <__smakebuf_r+0xe>
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <__smakebuf_r+0x84>)
 8003d92:	62ab      	str	r3, [r5, #40]	; 0x28
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	89a2      	ldrh	r2, [r4, #12]
 8003d98:	6020      	str	r0, [r4, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	9b00      	ldr	r3, [sp, #0]
 8003da0:	6120      	str	r0, [r4, #16]
 8003da2:	6163      	str	r3, [r4, #20]
 8003da4:	9b01      	ldr	r3, [sp, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <__smakebuf_r+0x7a>
 8003daa:	0028      	movs	r0, r5
 8003dac:	230e      	movs	r3, #14
 8003dae:	5ee1      	ldrsh	r1, [r4, r3]
 8003db0:	f000 fcb6 	bl	8004720 <_isatty_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d006      	beq.n	8003dc6 <__smakebuf_r+0x7a>
 8003db8:	2203      	movs	r2, #3
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	89a0      	ldrh	r0, [r4, #12]
 8003dc8:	4307      	orrs	r7, r0
 8003dca:	81a7      	strh	r7, [r4, #12]
 8003dcc:	e7cb      	b.n	8003d66 <__smakebuf_r+0x1a>
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	08003b39 	.word	0x08003b39

08003dd4 <_free_r>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	0005      	movs	r5, r0
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d010      	beq.n	8003dfe <_free_r+0x2a>
 8003ddc:	1f0c      	subs	r4, r1, #4
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da00      	bge.n	8003de6 <_free_r+0x12>
 8003de4:	18e4      	adds	r4, r4, r3
 8003de6:	0028      	movs	r0, r5
 8003de8:	f000 fccc 	bl	8004784 <__malloc_lock>
 8003dec:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <_free_r+0x90>)
 8003dee:	6813      	ldr	r3, [r2, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <_free_r+0x2c>
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	6014      	str	r4, [r2, #0]
 8003df8:	0028      	movs	r0, r5
 8003dfa:	f000 fccb 	bl	8004794 <__malloc_unlock>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	42a3      	cmp	r3, r4
 8003e02:	d908      	bls.n	8003e16 <_free_r+0x42>
 8003e04:	6821      	ldr	r1, [r4, #0]
 8003e06:	1860      	adds	r0, r4, r1
 8003e08:	4283      	cmp	r3, r0
 8003e0a:	d1f3      	bne.n	8003df4 <_free_r+0x20>
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	1841      	adds	r1, r0, r1
 8003e12:	6021      	str	r1, [r4, #0]
 8003e14:	e7ee      	b.n	8003df4 <_free_r+0x20>
 8003e16:	001a      	movs	r2, r3
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <_free_r+0x4e>
 8003e1e:	42a3      	cmp	r3, r4
 8003e20:	d9f9      	bls.n	8003e16 <_free_r+0x42>
 8003e22:	6811      	ldr	r1, [r2, #0]
 8003e24:	1850      	adds	r0, r2, r1
 8003e26:	42a0      	cmp	r0, r4
 8003e28:	d10b      	bne.n	8003e42 <_free_r+0x6e>
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	1809      	adds	r1, r1, r0
 8003e2e:	1850      	adds	r0, r2, r1
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	4283      	cmp	r3, r0
 8003e34:	d1e0      	bne.n	8003df8 <_free_r+0x24>
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	1841      	adds	r1, r0, r1
 8003e3c:	6011      	str	r1, [r2, #0]
 8003e3e:	6053      	str	r3, [r2, #4]
 8003e40:	e7da      	b.n	8003df8 <_free_r+0x24>
 8003e42:	42a0      	cmp	r0, r4
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x78>
 8003e46:	230c      	movs	r3, #12
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	e7d5      	b.n	8003df8 <_free_r+0x24>
 8003e4c:	6821      	ldr	r1, [r4, #0]
 8003e4e:	1860      	adds	r0, r4, r1
 8003e50:	4283      	cmp	r3, r0
 8003e52:	d103      	bne.n	8003e5c <_free_r+0x88>
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	1841      	adds	r1, r0, r1
 8003e5a:	6021      	str	r1, [r4, #0]
 8003e5c:	6063      	str	r3, [r4, #4]
 8003e5e:	6054      	str	r4, [r2, #4]
 8003e60:	e7ca      	b.n	8003df8 <_free_r+0x24>
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	20000320 	.word	0x20000320

08003e68 <sbrk_aligned>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4e0f      	ldr	r6, [pc, #60]	; (8003ea8 <sbrk_aligned+0x40>)
 8003e6c:	000d      	movs	r5, r1
 8003e6e:	6831      	ldr	r1, [r6, #0]
 8003e70:	0004      	movs	r4, r0
 8003e72:	2900      	cmp	r1, #0
 8003e74:	d102      	bne.n	8003e7c <sbrk_aligned+0x14>
 8003e76:	f000 fbbd 	bl	80045f4 <_sbrk_r>
 8003e7a:	6030      	str	r0, [r6, #0]
 8003e7c:	0029      	movs	r1, r5
 8003e7e:	0020      	movs	r0, r4
 8003e80:	f000 fbb8 	bl	80045f4 <_sbrk_r>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d00a      	beq.n	8003e9e <sbrk_aligned+0x36>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	1cc5      	adds	r5, r0, #3
 8003e8c:	439d      	bics	r5, r3
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	d007      	beq.n	8003ea2 <sbrk_aligned+0x3a>
 8003e92:	1a29      	subs	r1, r5, r0
 8003e94:	0020      	movs	r0, r4
 8003e96:	f000 fbad 	bl	80045f4 <_sbrk_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d101      	bne.n	8003ea2 <sbrk_aligned+0x3a>
 8003e9e:	2501      	movs	r5, #1
 8003ea0:	426d      	negs	r5, r5
 8003ea2:	0028      	movs	r0, r5
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	20000324 	.word	0x20000324

08003eac <_malloc_r>:
 8003eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eae:	2203      	movs	r2, #3
 8003eb0:	1ccb      	adds	r3, r1, #3
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	0006      	movs	r6, r0
 8003eb8:	001f      	movs	r7, r3
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d232      	bcs.n	8003f24 <_malloc_r+0x78>
 8003ebe:	270c      	movs	r7, #12
 8003ec0:	42b9      	cmp	r1, r7
 8003ec2:	d831      	bhi.n	8003f28 <_malloc_r+0x7c>
 8003ec4:	0030      	movs	r0, r6
 8003ec6:	f000 fc5d 	bl	8004784 <__malloc_lock>
 8003eca:	4d32      	ldr	r5, [pc, #200]	; (8003f94 <_malloc_r+0xe8>)
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	001c      	movs	r4, r3
 8003ed0:	2c00      	cmp	r4, #0
 8003ed2:	d12e      	bne.n	8003f32 <_malloc_r+0x86>
 8003ed4:	0039      	movs	r1, r7
 8003ed6:	0030      	movs	r0, r6
 8003ed8:	f7ff ffc6 	bl	8003e68 <sbrk_aligned>
 8003edc:	0004      	movs	r4, r0
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	d11e      	bne.n	8003f20 <_malloc_r+0x74>
 8003ee2:	682c      	ldr	r4, [r5, #0]
 8003ee4:	0025      	movs	r5, r4
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	d14a      	bne.n	8003f80 <_malloc_r+0xd4>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	0029      	movs	r1, r5
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	0030      	movs	r0, r6
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	f000 fb7e 	bl	80045f4 <_sbrk_r>
 8003ef8:	9b01      	ldr	r3, [sp, #4]
 8003efa:	4283      	cmp	r3, r0
 8003efc:	d143      	bne.n	8003f86 <_malloc_r+0xda>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	3703      	adds	r7, #3
 8003f02:	1aff      	subs	r7, r7, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	439f      	bics	r7, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	2f0c      	cmp	r7, #12
 8003f0c:	d200      	bcs.n	8003f10 <_malloc_r+0x64>
 8003f0e:	270c      	movs	r7, #12
 8003f10:	0039      	movs	r1, r7
 8003f12:	0030      	movs	r0, r6
 8003f14:	f7ff ffa8 	bl	8003e68 <sbrk_aligned>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d034      	beq.n	8003f86 <_malloc_r+0xda>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	19df      	adds	r7, r3, r7
 8003f20:	6027      	str	r7, [r4, #0]
 8003f22:	e013      	b.n	8003f4c <_malloc_r+0xa0>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dacb      	bge.n	8003ec0 <_malloc_r+0x14>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	2500      	movs	r5, #0
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	0028      	movs	r0, r5
 8003f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	1bd1      	subs	r1, r2, r7
 8003f36:	d420      	bmi.n	8003f7a <_malloc_r+0xce>
 8003f38:	290b      	cmp	r1, #11
 8003f3a:	d917      	bls.n	8003f6c <_malloc_r+0xc0>
 8003f3c:	19e2      	adds	r2, r4, r7
 8003f3e:	6027      	str	r7, [r4, #0]
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	d111      	bne.n	8003f68 <_malloc_r+0xbc>
 8003f44:	602a      	str	r2, [r5, #0]
 8003f46:	6863      	ldr	r3, [r4, #4]
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	6053      	str	r3, [r2, #4]
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	0025      	movs	r5, r4
 8003f50:	f000 fc20 	bl	8004794 <__malloc_unlock>
 8003f54:	2207      	movs	r2, #7
 8003f56:	350b      	adds	r5, #11
 8003f58:	1d23      	adds	r3, r4, #4
 8003f5a:	4395      	bics	r5, r2
 8003f5c:	1aea      	subs	r2, r5, r3
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	d0e5      	beq.n	8003f2e <_malloc_r+0x82>
 8003f62:	1b5b      	subs	r3, r3, r5
 8003f64:	50a3      	str	r3, [r4, r2]
 8003f66:	e7e2      	b.n	8003f2e <_malloc_r+0x82>
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e7ec      	b.n	8003f46 <_malloc_r+0x9a>
 8003f6c:	6862      	ldr	r2, [r4, #4]
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	d101      	bne.n	8003f76 <_malloc_r+0xca>
 8003f72:	602a      	str	r2, [r5, #0]
 8003f74:	e7ea      	b.n	8003f4c <_malloc_r+0xa0>
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	e7e8      	b.n	8003f4c <_malloc_r+0xa0>
 8003f7a:	0023      	movs	r3, r4
 8003f7c:	6864      	ldr	r4, [r4, #4]
 8003f7e:	e7a7      	b.n	8003ed0 <_malloc_r+0x24>
 8003f80:	002c      	movs	r4, r5
 8003f82:	686d      	ldr	r5, [r5, #4]
 8003f84:	e7af      	b.n	8003ee6 <_malloc_r+0x3a>
 8003f86:	230c      	movs	r3, #12
 8003f88:	0030      	movs	r0, r6
 8003f8a:	6033      	str	r3, [r6, #0]
 8003f8c:	f000 fc02 	bl	8004794 <__malloc_unlock>
 8003f90:	e7cd      	b.n	8003f2e <_malloc_r+0x82>
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000320 	.word	0x20000320

08003f98 <__sfputc_r>:
 8003f98:	6893      	ldr	r3, [r2, #8]
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	6093      	str	r3, [r2, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da04      	bge.n	8003fae <__sfputc_r+0x16>
 8003fa4:	6994      	ldr	r4, [r2, #24]
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	db07      	blt.n	8003fba <__sfputc_r+0x22>
 8003faa:	290a      	cmp	r1, #10
 8003fac:	d005      	beq.n	8003fba <__sfputc_r+0x22>
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	1c58      	adds	r0, r3, #1
 8003fb2:	6010      	str	r0, [r2, #0]
 8003fb4:	7019      	strb	r1, [r3, #0]
 8003fb6:	0008      	movs	r0, r1
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	f7ff fbff 	bl	80037bc <__swbuf_r>
 8003fbe:	0001      	movs	r1, r0
 8003fc0:	e7f9      	b.n	8003fb6 <__sfputc_r+0x1e>

08003fc2 <__sfputs_r>:
 8003fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc4:	0006      	movs	r6, r0
 8003fc6:	000f      	movs	r7, r1
 8003fc8:	0014      	movs	r4, r2
 8003fca:	18d5      	adds	r5, r2, r3
 8003fcc:	42ac      	cmp	r4, r5
 8003fce:	d101      	bne.n	8003fd4 <__sfputs_r+0x12>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e007      	b.n	8003fe4 <__sfputs_r+0x22>
 8003fd4:	7821      	ldrb	r1, [r4, #0]
 8003fd6:	003a      	movs	r2, r7
 8003fd8:	0030      	movs	r0, r6
 8003fda:	f7ff ffdd 	bl	8003f98 <__sfputc_r>
 8003fde:	3401      	adds	r4, #1
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d1f3      	bne.n	8003fcc <__sfputs_r+0xa>
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fe8 <_vfiprintf_r>:
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	b0a1      	sub	sp, #132	; 0x84
 8003fec:	0006      	movs	r6, r0
 8003fee:	000c      	movs	r4, r1
 8003ff0:	001f      	movs	r7, r3
 8003ff2:	9203      	str	r2, [sp, #12]
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d004      	beq.n	8004002 <_vfiprintf_r+0x1a>
 8003ff8:	6983      	ldr	r3, [r0, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <_vfiprintf_r+0x1a>
 8003ffe:	f7ff fdd9 	bl	8003bb4 <__sinit>
 8004002:	4b8e      	ldr	r3, [pc, #568]	; (800423c <_vfiprintf_r+0x254>)
 8004004:	429c      	cmp	r4, r3
 8004006:	d11c      	bne.n	8004042 <_vfiprintf_r+0x5a>
 8004008:	6874      	ldr	r4, [r6, #4]
 800400a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800400c:	07db      	lsls	r3, r3, #31
 800400e:	d405      	bmi.n	800401c <_vfiprintf_r+0x34>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	059b      	lsls	r3, r3, #22
 8004014:	d402      	bmi.n	800401c <_vfiprintf_r+0x34>
 8004016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004018:	f7ff fe6d 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	071b      	lsls	r3, r3, #28
 8004020:	d502      	bpl.n	8004028 <_vfiprintf_r+0x40>
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11d      	bne.n	8004064 <_vfiprintf_r+0x7c>
 8004028:	0021      	movs	r1, r4
 800402a:	0030      	movs	r0, r6
 800402c:	f7ff fc1c 	bl	8003868 <__swsetup_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	d017      	beq.n	8004064 <_vfiprintf_r+0x7c>
 8004034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004036:	07db      	lsls	r3, r3, #31
 8004038:	d50d      	bpl.n	8004056 <_vfiprintf_r+0x6e>
 800403a:	2001      	movs	r0, #1
 800403c:	4240      	negs	r0, r0
 800403e:	b021      	add	sp, #132	; 0x84
 8004040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <_vfiprintf_r+0x258>)
 8004044:	429c      	cmp	r4, r3
 8004046:	d101      	bne.n	800404c <_vfiprintf_r+0x64>
 8004048:	68b4      	ldr	r4, [r6, #8]
 800404a:	e7de      	b.n	800400a <_vfiprintf_r+0x22>
 800404c:	4b7d      	ldr	r3, [pc, #500]	; (8004244 <_vfiprintf_r+0x25c>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d1db      	bne.n	800400a <_vfiprintf_r+0x22>
 8004052:	68f4      	ldr	r4, [r6, #12]
 8004054:	e7d9      	b.n	800400a <_vfiprintf_r+0x22>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	059b      	lsls	r3, r3, #22
 800405a:	d4ee      	bmi.n	800403a <_vfiprintf_r+0x52>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f7ff fe4b 	bl	8003cf8 <__retarget_lock_release_recursive>
 8004062:	e7ea      	b.n	800403a <_vfiprintf_r+0x52>
 8004064:	2300      	movs	r3, #0
 8004066:	ad08      	add	r5, sp, #32
 8004068:	616b      	str	r3, [r5, #20]
 800406a:	3320      	adds	r3, #32
 800406c:	766b      	strb	r3, [r5, #25]
 800406e:	3310      	adds	r3, #16
 8004070:	76ab      	strb	r3, [r5, #26]
 8004072:	9707      	str	r7, [sp, #28]
 8004074:	9f03      	ldr	r7, [sp, #12]
 8004076:	783b      	ldrb	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_vfiprintf_r+0x98>
 800407c:	2b25      	cmp	r3, #37	; 0x25
 800407e:	d14e      	bne.n	800411e <_vfiprintf_r+0x136>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	1afb      	subs	r3, r7, r3
 8004084:	9305      	str	r3, [sp, #20]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	429f      	cmp	r7, r3
 800408a:	d00d      	beq.n	80040a8 <_vfiprintf_r+0xc0>
 800408c:	9b05      	ldr	r3, [sp, #20]
 800408e:	0021      	movs	r1, r4
 8004090:	0030      	movs	r0, r6
 8004092:	9a03      	ldr	r2, [sp, #12]
 8004094:	f7ff ff95 	bl	8003fc2 <__sfputs_r>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d100      	bne.n	800409e <_vfiprintf_r+0xb6>
 800409c:	e0b5      	b.n	800420a <_vfiprintf_r+0x222>
 800409e:	696a      	ldr	r2, [r5, #20]
 80040a0:	9b05      	ldr	r3, [sp, #20]
 80040a2:	4694      	mov	ip, r2
 80040a4:	4463      	add	r3, ip
 80040a6:	616b      	str	r3, [r5, #20]
 80040a8:	783b      	ldrb	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d100      	bne.n	80040b0 <_vfiprintf_r+0xc8>
 80040ae:	e0ac      	b.n	800420a <_vfiprintf_r+0x222>
 80040b0:	2201      	movs	r2, #1
 80040b2:	1c7b      	adds	r3, r7, #1
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	2300      	movs	r3, #0
 80040b8:	4252      	negs	r2, r2
 80040ba:	606a      	str	r2, [r5, #4]
 80040bc:	a904      	add	r1, sp, #16
 80040be:	3254      	adds	r2, #84	; 0x54
 80040c0:	1852      	adds	r2, r2, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	60eb      	str	r3, [r5, #12]
 80040c6:	60ab      	str	r3, [r5, #8]
 80040c8:	7013      	strb	r3, [r2, #0]
 80040ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	2205      	movs	r2, #5
 80040d0:	7819      	ldrb	r1, [r3, #0]
 80040d2:	485d      	ldr	r0, [pc, #372]	; (8004248 <_vfiprintf_r+0x260>)
 80040d4:	f000 fb4a 	bl	800476c <memchr>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1c5f      	adds	r7, r3, #1
 80040dc:	2800      	cmp	r0, #0
 80040de:	d120      	bne.n	8004122 <_vfiprintf_r+0x13a>
 80040e0:	682a      	ldr	r2, [r5, #0]
 80040e2:	06d3      	lsls	r3, r2, #27
 80040e4:	d504      	bpl.n	80040f0 <_vfiprintf_r+0x108>
 80040e6:	2353      	movs	r3, #83	; 0x53
 80040e8:	a904      	add	r1, sp, #16
 80040ea:	185b      	adds	r3, r3, r1
 80040ec:	2120      	movs	r1, #32
 80040ee:	7019      	strb	r1, [r3, #0]
 80040f0:	0713      	lsls	r3, r2, #28
 80040f2:	d504      	bpl.n	80040fe <_vfiprintf_r+0x116>
 80040f4:	2353      	movs	r3, #83	; 0x53
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	185b      	adds	r3, r3, r1
 80040fa:	212b      	movs	r1, #43	; 0x2b
 80040fc:	7019      	strb	r1, [r3, #0]
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b2a      	cmp	r3, #42	; 0x2a
 8004104:	d016      	beq.n	8004134 <_vfiprintf_r+0x14c>
 8004106:	2100      	movs	r1, #0
 8004108:	68eb      	ldr	r3, [r5, #12]
 800410a:	9f03      	ldr	r7, [sp, #12]
 800410c:	783a      	ldrb	r2, [r7, #0]
 800410e:	1c78      	adds	r0, r7, #1
 8004110:	3a30      	subs	r2, #48	; 0x30
 8004112:	4684      	mov	ip, r0
 8004114:	2a09      	cmp	r2, #9
 8004116:	d94f      	bls.n	80041b8 <_vfiprintf_r+0x1d0>
 8004118:	2900      	cmp	r1, #0
 800411a:	d111      	bne.n	8004140 <_vfiprintf_r+0x158>
 800411c:	e017      	b.n	800414e <_vfiprintf_r+0x166>
 800411e:	3701      	adds	r7, #1
 8004120:	e7a9      	b.n	8004076 <_vfiprintf_r+0x8e>
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <_vfiprintf_r+0x260>)
 8004124:	682a      	ldr	r2, [r5, #0]
 8004126:	1ac0      	subs	r0, r0, r3
 8004128:	2301      	movs	r3, #1
 800412a:	4083      	lsls	r3, r0
 800412c:	4313      	orrs	r3, r2
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	9703      	str	r7, [sp, #12]
 8004132:	e7cb      	b.n	80040cc <_vfiprintf_r+0xe4>
 8004134:	9b07      	ldr	r3, [sp, #28]
 8004136:	1d19      	adds	r1, r3, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	9107      	str	r1, [sp, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db01      	blt.n	8004144 <_vfiprintf_r+0x15c>
 8004140:	930b      	str	r3, [sp, #44]	; 0x2c
 8004142:	e004      	b.n	800414e <_vfiprintf_r+0x166>
 8004144:	425b      	negs	r3, r3
 8004146:	60eb      	str	r3, [r5, #12]
 8004148:	2302      	movs	r3, #2
 800414a:	4313      	orrs	r3, r2
 800414c:	602b      	str	r3, [r5, #0]
 800414e:	783b      	ldrb	r3, [r7, #0]
 8004150:	2b2e      	cmp	r3, #46	; 0x2e
 8004152:	d10a      	bne.n	800416a <_vfiprintf_r+0x182>
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b2a      	cmp	r3, #42	; 0x2a
 8004158:	d137      	bne.n	80041ca <_vfiprintf_r+0x1e2>
 800415a:	9b07      	ldr	r3, [sp, #28]
 800415c:	3702      	adds	r7, #2
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	9207      	str	r2, [sp, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db2d      	blt.n	80041c4 <_vfiprintf_r+0x1dc>
 8004168:	9309      	str	r3, [sp, #36]	; 0x24
 800416a:	2203      	movs	r2, #3
 800416c:	7839      	ldrb	r1, [r7, #0]
 800416e:	4837      	ldr	r0, [pc, #220]	; (800424c <_vfiprintf_r+0x264>)
 8004170:	f000 fafc 	bl	800476c <memchr>
 8004174:	2800      	cmp	r0, #0
 8004176:	d007      	beq.n	8004188 <_vfiprintf_r+0x1a0>
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <_vfiprintf_r+0x264>)
 800417a:	682a      	ldr	r2, [r5, #0]
 800417c:	1ac0      	subs	r0, r0, r3
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	4083      	lsls	r3, r0
 8004182:	4313      	orrs	r3, r2
 8004184:	3701      	adds	r7, #1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	7839      	ldrb	r1, [r7, #0]
 800418a:	1c7b      	adds	r3, r7, #1
 800418c:	2206      	movs	r2, #6
 800418e:	4830      	ldr	r0, [pc, #192]	; (8004250 <_vfiprintf_r+0x268>)
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	7629      	strb	r1, [r5, #24]
 8004194:	f000 faea 	bl	800476c <memchr>
 8004198:	2800      	cmp	r0, #0
 800419a:	d045      	beq.n	8004228 <_vfiprintf_r+0x240>
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <_vfiprintf_r+0x26c>)
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d127      	bne.n	80041f2 <_vfiprintf_r+0x20a>
 80041a2:	2207      	movs	r2, #7
 80041a4:	9b07      	ldr	r3, [sp, #28]
 80041a6:	3307      	adds	r3, #7
 80041a8:	4393      	bics	r3, r2
 80041aa:	3308      	adds	r3, #8
 80041ac:	9307      	str	r3, [sp, #28]
 80041ae:	696b      	ldr	r3, [r5, #20]
 80041b0:	9a04      	ldr	r2, [sp, #16]
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	616b      	str	r3, [r5, #20]
 80041b6:	e75d      	b.n	8004074 <_vfiprintf_r+0x8c>
 80041b8:	210a      	movs	r1, #10
 80041ba:	434b      	muls	r3, r1
 80041bc:	4667      	mov	r7, ip
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	3909      	subs	r1, #9
 80041c2:	e7a3      	b.n	800410c <_vfiprintf_r+0x124>
 80041c4:	2301      	movs	r3, #1
 80041c6:	425b      	negs	r3, r3
 80041c8:	e7ce      	b.n	8004168 <_vfiprintf_r+0x180>
 80041ca:	2300      	movs	r3, #0
 80041cc:	001a      	movs	r2, r3
 80041ce:	3701      	adds	r7, #1
 80041d0:	606b      	str	r3, [r5, #4]
 80041d2:	7839      	ldrb	r1, [r7, #0]
 80041d4:	1c78      	adds	r0, r7, #1
 80041d6:	3930      	subs	r1, #48	; 0x30
 80041d8:	4684      	mov	ip, r0
 80041da:	2909      	cmp	r1, #9
 80041dc:	d903      	bls.n	80041e6 <_vfiprintf_r+0x1fe>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0c3      	beq.n	800416a <_vfiprintf_r+0x182>
 80041e2:	9209      	str	r2, [sp, #36]	; 0x24
 80041e4:	e7c1      	b.n	800416a <_vfiprintf_r+0x182>
 80041e6:	230a      	movs	r3, #10
 80041e8:	435a      	muls	r2, r3
 80041ea:	4667      	mov	r7, ip
 80041ec:	1852      	adds	r2, r2, r1
 80041ee:	3b09      	subs	r3, #9
 80041f0:	e7ef      	b.n	80041d2 <_vfiprintf_r+0x1ea>
 80041f2:	ab07      	add	r3, sp, #28
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	0022      	movs	r2, r4
 80041f8:	0029      	movs	r1, r5
 80041fa:	0030      	movs	r0, r6
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <_vfiprintf_r+0x270>)
 80041fe:	e000      	b.n	8004202 <_vfiprintf_r+0x21a>
 8004200:	bf00      	nop
 8004202:	9004      	str	r0, [sp, #16]
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	3301      	adds	r3, #1
 8004208:	d1d1      	bne.n	80041ae <_vfiprintf_r+0x1c6>
 800420a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800420c:	07db      	lsls	r3, r3, #31
 800420e:	d405      	bmi.n	800421c <_vfiprintf_r+0x234>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	059b      	lsls	r3, r3, #22
 8004214:	d402      	bmi.n	800421c <_vfiprintf_r+0x234>
 8004216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004218:	f7ff fd6e 	bl	8003cf8 <__retarget_lock_release_recursive>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	065b      	lsls	r3, r3, #25
 8004220:	d500      	bpl.n	8004224 <_vfiprintf_r+0x23c>
 8004222:	e70a      	b.n	800403a <_vfiprintf_r+0x52>
 8004224:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004226:	e70a      	b.n	800403e <_vfiprintf_r+0x56>
 8004228:	ab07      	add	r3, sp, #28
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	0022      	movs	r2, r4
 800422e:	0029      	movs	r1, r5
 8004230:	0030      	movs	r0, r6
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <_vfiprintf_r+0x270>)
 8004234:	f000 f882 	bl	800433c <_printf_i>
 8004238:	e7e3      	b.n	8004202 <_vfiprintf_r+0x21a>
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	08004a0c 	.word	0x08004a0c
 8004240:	08004a2c 	.word	0x08004a2c
 8004244:	080049ec 	.word	0x080049ec
 8004248:	08004a4c 	.word	0x08004a4c
 800424c:	08004a52 	.word	0x08004a52
 8004250:	08004a56 	.word	0x08004a56
 8004254:	00000000 	.word	0x00000000
 8004258:	08003fc3 	.word	0x08003fc3

0800425c <_printf_common>:
 800425c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800425e:	0015      	movs	r5, r2
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	688a      	ldr	r2, [r1, #8]
 8004264:	690b      	ldr	r3, [r1, #16]
 8004266:	000c      	movs	r4, r1
 8004268:	9000      	str	r0, [sp, #0]
 800426a:	4293      	cmp	r3, r2
 800426c:	da00      	bge.n	8004270 <_printf_common+0x14>
 800426e:	0013      	movs	r3, r2
 8004270:	0022      	movs	r2, r4
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	3243      	adds	r2, #67	; 0x43
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	2a00      	cmp	r2, #0
 800427a:	d001      	beq.n	8004280 <_printf_common+0x24>
 800427c:	3301      	adds	r3, #1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	069b      	lsls	r3, r3, #26
 8004284:	d502      	bpl.n	800428c <_printf_common+0x30>
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	3302      	adds	r3, #2
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	2306      	movs	r3, #6
 8004290:	0017      	movs	r7, r2
 8004292:	401f      	ands	r7, r3
 8004294:	421a      	tst	r2, r3
 8004296:	d027      	beq.n	80042e8 <_printf_common+0x8c>
 8004298:	0023      	movs	r3, r4
 800429a:	3343      	adds	r3, #67	; 0x43
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	4193      	sbcs	r3, r2
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	0692      	lsls	r2, r2, #26
 80042a6:	d430      	bmi.n	800430a <_printf_common+0xae>
 80042a8:	0022      	movs	r2, r4
 80042aa:	9901      	ldr	r1, [sp, #4]
 80042ac:	9800      	ldr	r0, [sp, #0]
 80042ae:	9e08      	ldr	r6, [sp, #32]
 80042b0:	3243      	adds	r2, #67	; 0x43
 80042b2:	47b0      	blx	r6
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d025      	beq.n	8004304 <_printf_common+0xa8>
 80042b8:	2306      	movs	r3, #6
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	682a      	ldr	r2, [r5, #0]
 80042be:	68e1      	ldr	r1, [r4, #12]
 80042c0:	2500      	movs	r5, #0
 80042c2:	4003      	ands	r3, r0
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d103      	bne.n	80042d0 <_printf_common+0x74>
 80042c8:	1a8d      	subs	r5, r1, r2
 80042ca:	43eb      	mvns	r3, r5
 80042cc:	17db      	asrs	r3, r3, #31
 80042ce:	401d      	ands	r5, r3
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	6922      	ldr	r2, [r4, #16]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	dd01      	ble.n	80042dc <_printf_common+0x80>
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	18ed      	adds	r5, r5, r3
 80042dc:	2700      	movs	r7, #0
 80042de:	42bd      	cmp	r5, r7
 80042e0:	d120      	bne.n	8004324 <_printf_common+0xc8>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e010      	b.n	8004308 <_printf_common+0xac>
 80042e6:	3701      	adds	r7, #1
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	682a      	ldr	r2, [r5, #0]
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	42bb      	cmp	r3, r7
 80042f0:	ddd2      	ble.n	8004298 <_printf_common+0x3c>
 80042f2:	0022      	movs	r2, r4
 80042f4:	2301      	movs	r3, #1
 80042f6:	9901      	ldr	r1, [sp, #4]
 80042f8:	9800      	ldr	r0, [sp, #0]
 80042fa:	9e08      	ldr	r6, [sp, #32]
 80042fc:	3219      	adds	r2, #25
 80042fe:	47b0      	blx	r6
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d1f0      	bne.n	80042e6 <_printf_common+0x8a>
 8004304:	2001      	movs	r0, #1
 8004306:	4240      	negs	r0, r0
 8004308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800430a:	2030      	movs	r0, #48	; 0x30
 800430c:	18e1      	adds	r1, r4, r3
 800430e:	3143      	adds	r1, #67	; 0x43
 8004310:	7008      	strb	r0, [r1, #0]
 8004312:	0021      	movs	r1, r4
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	3145      	adds	r1, #69	; 0x45
 8004318:	7809      	ldrb	r1, [r1, #0]
 800431a:	18a2      	adds	r2, r4, r2
 800431c:	3243      	adds	r2, #67	; 0x43
 800431e:	3302      	adds	r3, #2
 8004320:	7011      	strb	r1, [r2, #0]
 8004322:	e7c1      	b.n	80042a8 <_printf_common+0x4c>
 8004324:	0022      	movs	r2, r4
 8004326:	2301      	movs	r3, #1
 8004328:	9901      	ldr	r1, [sp, #4]
 800432a:	9800      	ldr	r0, [sp, #0]
 800432c:	9e08      	ldr	r6, [sp, #32]
 800432e:	321a      	adds	r2, #26
 8004330:	47b0      	blx	r6
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d0e6      	beq.n	8004304 <_printf_common+0xa8>
 8004336:	3701      	adds	r7, #1
 8004338:	e7d1      	b.n	80042de <_printf_common+0x82>
	...

0800433c <_printf_i>:
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	9206      	str	r2, [sp, #24]
 8004342:	000a      	movs	r2, r1
 8004344:	3243      	adds	r2, #67	; 0x43
 8004346:	9307      	str	r3, [sp, #28]
 8004348:	9005      	str	r0, [sp, #20]
 800434a:	9204      	str	r2, [sp, #16]
 800434c:	7e0a      	ldrb	r2, [r1, #24]
 800434e:	000c      	movs	r4, r1
 8004350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004352:	2a78      	cmp	r2, #120	; 0x78
 8004354:	d807      	bhi.n	8004366 <_printf_i+0x2a>
 8004356:	2a62      	cmp	r2, #98	; 0x62
 8004358:	d809      	bhi.n	800436e <_printf_i+0x32>
 800435a:	2a00      	cmp	r2, #0
 800435c:	d100      	bne.n	8004360 <_printf_i+0x24>
 800435e:	e0c1      	b.n	80044e4 <_printf_i+0x1a8>
 8004360:	2a58      	cmp	r2, #88	; 0x58
 8004362:	d100      	bne.n	8004366 <_printf_i+0x2a>
 8004364:	e08c      	b.n	8004480 <_printf_i+0x144>
 8004366:	0026      	movs	r6, r4
 8004368:	3642      	adds	r6, #66	; 0x42
 800436a:	7032      	strb	r2, [r6, #0]
 800436c:	e022      	b.n	80043b4 <_printf_i+0x78>
 800436e:	0010      	movs	r0, r2
 8004370:	3863      	subs	r0, #99	; 0x63
 8004372:	2815      	cmp	r0, #21
 8004374:	d8f7      	bhi.n	8004366 <_printf_i+0x2a>
 8004376:	f7fb fecd 	bl	8000114 <__gnu_thumb1_case_shi>
 800437a:	0016      	.short	0x0016
 800437c:	fff6001f 	.word	0xfff6001f
 8004380:	fff6fff6 	.word	0xfff6fff6
 8004384:	001ffff6 	.word	0x001ffff6
 8004388:	fff6fff6 	.word	0xfff6fff6
 800438c:	fff6fff6 	.word	0xfff6fff6
 8004390:	003600a8 	.word	0x003600a8
 8004394:	fff6009a 	.word	0xfff6009a
 8004398:	00b9fff6 	.word	0x00b9fff6
 800439c:	0036fff6 	.word	0x0036fff6
 80043a0:	fff6fff6 	.word	0xfff6fff6
 80043a4:	009e      	.short	0x009e
 80043a6:	0026      	movs	r6, r4
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	3642      	adds	r6, #66	; 0x42
 80043ac:	1d11      	adds	r1, r2, #4
 80043ae:	6019      	str	r1, [r3, #0]
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	7033      	strb	r3, [r6, #0]
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0a7      	b.n	8004508 <_printf_i+0x1cc>
 80043b8:	6808      	ldr	r0, [r1, #0]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	1d0a      	adds	r2, r1, #4
 80043be:	0605      	lsls	r5, r0, #24
 80043c0:	d50b      	bpl.n	80043da <_printf_i+0x9e>
 80043c2:	680d      	ldr	r5, [r1, #0]
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	da03      	bge.n	80043d2 <_printf_i+0x96>
 80043ca:	232d      	movs	r3, #45	; 0x2d
 80043cc:	9a04      	ldr	r2, [sp, #16]
 80043ce:	426d      	negs	r5, r5
 80043d0:	7013      	strb	r3, [r2, #0]
 80043d2:	4b61      	ldr	r3, [pc, #388]	; (8004558 <_printf_i+0x21c>)
 80043d4:	270a      	movs	r7, #10
 80043d6:	9303      	str	r3, [sp, #12]
 80043d8:	e01b      	b.n	8004412 <_printf_i+0xd6>
 80043da:	680d      	ldr	r5, [r1, #0]
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	0641      	lsls	r1, r0, #25
 80043e0:	d5f1      	bpl.n	80043c6 <_printf_i+0x8a>
 80043e2:	b22d      	sxth	r5, r5
 80043e4:	e7ef      	b.n	80043c6 <_printf_i+0x8a>
 80043e6:	680d      	ldr	r5, [r1, #0]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	1d08      	adds	r0, r1, #4
 80043ec:	6018      	str	r0, [r3, #0]
 80043ee:	062e      	lsls	r6, r5, #24
 80043f0:	d501      	bpl.n	80043f6 <_printf_i+0xba>
 80043f2:	680d      	ldr	r5, [r1, #0]
 80043f4:	e003      	b.n	80043fe <_printf_i+0xc2>
 80043f6:	066d      	lsls	r5, r5, #25
 80043f8:	d5fb      	bpl.n	80043f2 <_printf_i+0xb6>
 80043fa:	680d      	ldr	r5, [r1, #0]
 80043fc:	b2ad      	uxth	r5, r5
 80043fe:	4b56      	ldr	r3, [pc, #344]	; (8004558 <_printf_i+0x21c>)
 8004400:	2708      	movs	r7, #8
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	2a6f      	cmp	r2, #111	; 0x6f
 8004406:	d000      	beq.n	800440a <_printf_i+0xce>
 8004408:	3702      	adds	r7, #2
 800440a:	0023      	movs	r3, r4
 800440c:	2200      	movs	r2, #0
 800440e:	3343      	adds	r3, #67	; 0x43
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6863      	ldr	r3, [r4, #4]
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	db03      	blt.n	8004422 <_printf_i+0xe6>
 800441a:	2204      	movs	r2, #4
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	4391      	bics	r1, r2
 8004420:	6021      	str	r1, [r4, #0]
 8004422:	2d00      	cmp	r5, #0
 8004424:	d102      	bne.n	800442c <_printf_i+0xf0>
 8004426:	9e04      	ldr	r6, [sp, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <_printf_i+0x10a>
 800442c:	9e04      	ldr	r6, [sp, #16]
 800442e:	0028      	movs	r0, r5
 8004430:	0039      	movs	r1, r7
 8004432:	f7fb feff 	bl	8000234 <__aeabi_uidivmod>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	3e01      	subs	r6, #1
 800443a:	5c5b      	ldrb	r3, [r3, r1]
 800443c:	7033      	strb	r3, [r6, #0]
 800443e:	002b      	movs	r3, r5
 8004440:	0005      	movs	r5, r0
 8004442:	429f      	cmp	r7, r3
 8004444:	d9f3      	bls.n	800442e <_printf_i+0xf2>
 8004446:	2f08      	cmp	r7, #8
 8004448:	d109      	bne.n	800445e <_printf_i+0x122>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07db      	lsls	r3, r3, #31
 800444e:	d506      	bpl.n	800445e <_printf_i+0x122>
 8004450:	6863      	ldr	r3, [r4, #4]
 8004452:	6922      	ldr	r2, [r4, #16]
 8004454:	4293      	cmp	r3, r2
 8004456:	dc02      	bgt.n	800445e <_printf_i+0x122>
 8004458:	2330      	movs	r3, #48	; 0x30
 800445a:	3e01      	subs	r6, #1
 800445c:	7033      	strb	r3, [r6, #0]
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	1b9b      	subs	r3, r3, r6
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	9b07      	ldr	r3, [sp, #28]
 8004466:	0021      	movs	r1, r4
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	9805      	ldr	r0, [sp, #20]
 800446c:	9b06      	ldr	r3, [sp, #24]
 800446e:	aa09      	add	r2, sp, #36	; 0x24
 8004470:	f7ff fef4 	bl	800425c <_printf_common>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d14c      	bne.n	8004512 <_printf_i+0x1d6>
 8004478:	2001      	movs	r0, #1
 800447a:	4240      	negs	r0, r0
 800447c:	b00b      	add	sp, #44	; 0x2c
 800447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004480:	3145      	adds	r1, #69	; 0x45
 8004482:	700a      	strb	r2, [r1, #0]
 8004484:	4a34      	ldr	r2, [pc, #208]	; (8004558 <_printf_i+0x21c>)
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	6821      	ldr	r1, [r4, #0]
 800448c:	ca20      	ldmia	r2!, {r5}
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	0608      	lsls	r0, r1, #24
 8004492:	d516      	bpl.n	80044c2 <_printf_i+0x186>
 8004494:	07cb      	lsls	r3, r1, #31
 8004496:	d502      	bpl.n	800449e <_printf_i+0x162>
 8004498:	2320      	movs	r3, #32
 800449a:	4319      	orrs	r1, r3
 800449c:	6021      	str	r1, [r4, #0]
 800449e:	2710      	movs	r7, #16
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	d1b2      	bne.n	800440a <_printf_i+0xce>
 80044a4:	2320      	movs	r3, #32
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	439a      	bics	r2, r3
 80044aa:	6022      	str	r2, [r4, #0]
 80044ac:	e7ad      	b.n	800440a <_printf_i+0xce>
 80044ae:	2220      	movs	r2, #32
 80044b0:	6809      	ldr	r1, [r1, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	6022      	str	r2, [r4, #0]
 80044b6:	0022      	movs	r2, r4
 80044b8:	2178      	movs	r1, #120	; 0x78
 80044ba:	3245      	adds	r2, #69	; 0x45
 80044bc:	7011      	strb	r1, [r2, #0]
 80044be:	4a27      	ldr	r2, [pc, #156]	; (800455c <_printf_i+0x220>)
 80044c0:	e7e1      	b.n	8004486 <_printf_i+0x14a>
 80044c2:	0648      	lsls	r0, r1, #25
 80044c4:	d5e6      	bpl.n	8004494 <_printf_i+0x158>
 80044c6:	b2ad      	uxth	r5, r5
 80044c8:	e7e4      	b.n	8004494 <_printf_i+0x158>
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	680d      	ldr	r5, [r1, #0]
 80044ce:	1d10      	adds	r0, r2, #4
 80044d0:	6949      	ldr	r1, [r1, #20]
 80044d2:	6018      	str	r0, [r3, #0]
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	062e      	lsls	r6, r5, #24
 80044d8:	d501      	bpl.n	80044de <_printf_i+0x1a2>
 80044da:	6019      	str	r1, [r3, #0]
 80044dc:	e002      	b.n	80044e4 <_printf_i+0x1a8>
 80044de:	066d      	lsls	r5, r5, #25
 80044e0:	d5fb      	bpl.n	80044da <_printf_i+0x19e>
 80044e2:	8019      	strh	r1, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9e04      	ldr	r6, [sp, #16]
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	e7bb      	b.n	8004464 <_printf_i+0x128>
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	1d11      	adds	r1, r2, #4
 80044f0:	6019      	str	r1, [r3, #0]
 80044f2:	6816      	ldr	r6, [r2, #0]
 80044f4:	2100      	movs	r1, #0
 80044f6:	0030      	movs	r0, r6
 80044f8:	6862      	ldr	r2, [r4, #4]
 80044fa:	f000 f937 	bl	800476c <memchr>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d001      	beq.n	8004506 <_printf_i+0x1ca>
 8004502:	1b80      	subs	r0, r0, r6
 8004504:	6060      	str	r0, [r4, #4]
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	2300      	movs	r3, #0
 800450c:	9a04      	ldr	r2, [sp, #16]
 800450e:	7013      	strb	r3, [r2, #0]
 8004510:	e7a8      	b.n	8004464 <_printf_i+0x128>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	0032      	movs	r2, r6
 8004516:	9906      	ldr	r1, [sp, #24]
 8004518:	9805      	ldr	r0, [sp, #20]
 800451a:	9d07      	ldr	r5, [sp, #28]
 800451c:	47a8      	blx	r5
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d0aa      	beq.n	8004478 <_printf_i+0x13c>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	079b      	lsls	r3, r3, #30
 8004526:	d415      	bmi.n	8004554 <_printf_i+0x218>
 8004528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452a:	68e0      	ldr	r0, [r4, #12]
 800452c:	4298      	cmp	r0, r3
 800452e:	daa5      	bge.n	800447c <_printf_i+0x140>
 8004530:	0018      	movs	r0, r3
 8004532:	e7a3      	b.n	800447c <_printf_i+0x140>
 8004534:	0022      	movs	r2, r4
 8004536:	2301      	movs	r3, #1
 8004538:	9906      	ldr	r1, [sp, #24]
 800453a:	9805      	ldr	r0, [sp, #20]
 800453c:	9e07      	ldr	r6, [sp, #28]
 800453e:	3219      	adds	r2, #25
 8004540:	47b0      	blx	r6
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d098      	beq.n	8004478 <_printf_i+0x13c>
 8004546:	3501      	adds	r5, #1
 8004548:	68e3      	ldr	r3, [r4, #12]
 800454a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	42ab      	cmp	r3, r5
 8004550:	dcf0      	bgt.n	8004534 <_printf_i+0x1f8>
 8004552:	e7e9      	b.n	8004528 <_printf_i+0x1ec>
 8004554:	2500      	movs	r5, #0
 8004556:	e7f7      	b.n	8004548 <_printf_i+0x20c>
 8004558:	08004a5d 	.word	0x08004a5d
 800455c:	08004a6e 	.word	0x08004a6e

08004560 <_putc_r>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	0006      	movs	r6, r0
 8004564:	000d      	movs	r5, r1
 8004566:	0014      	movs	r4, r2
 8004568:	2800      	cmp	r0, #0
 800456a:	d004      	beq.n	8004576 <_putc_r+0x16>
 800456c:	6983      	ldr	r3, [r0, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <_putc_r+0x16>
 8004572:	f7ff fb1f 	bl	8003bb4 <__sinit>
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <_putc_r+0x88>)
 8004578:	429c      	cmp	r4, r3
 800457a:	d124      	bne.n	80045c6 <_putc_r+0x66>
 800457c:	6874      	ldr	r4, [r6, #4]
 800457e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004580:	07db      	lsls	r3, r3, #31
 8004582:	d405      	bmi.n	8004590 <_putc_r+0x30>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	059b      	lsls	r3, r3, #22
 8004588:	d402      	bmi.n	8004590 <_putc_r+0x30>
 800458a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458c:	f7ff fbb3 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 8004590:	68a3      	ldr	r3, [r4, #8]
 8004592:	3b01      	subs	r3, #1
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	da05      	bge.n	80045a6 <_putc_r+0x46>
 800459a:	69a2      	ldr	r2, [r4, #24]
 800459c:	4293      	cmp	r3, r2
 800459e:	db1c      	blt.n	80045da <_putc_r+0x7a>
 80045a0:	b2eb      	uxtb	r3, r5
 80045a2:	2b0a      	cmp	r3, #10
 80045a4:	d019      	beq.n	80045da <_putc_r+0x7a>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	6022      	str	r2, [r4, #0]
 80045ac:	701d      	strb	r5, [r3, #0]
 80045ae:	b2ed      	uxtb	r5, r5
 80045b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d405      	bmi.n	80045c2 <_putc_r+0x62>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	d402      	bmi.n	80045c2 <_putc_r+0x62>
 80045bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045be:	f7ff fb9b 	bl	8003cf8 <__retarget_lock_release_recursive>
 80045c2:	0028      	movs	r0, r5
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <_putc_r+0x8c>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d101      	bne.n	80045d0 <_putc_r+0x70>
 80045cc:	68b4      	ldr	r4, [r6, #8]
 80045ce:	e7d6      	b.n	800457e <_putc_r+0x1e>
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <_putc_r+0x90>)
 80045d2:	429c      	cmp	r4, r3
 80045d4:	d1d3      	bne.n	800457e <_putc_r+0x1e>
 80045d6:	68f4      	ldr	r4, [r6, #12]
 80045d8:	e7d1      	b.n	800457e <_putc_r+0x1e>
 80045da:	0029      	movs	r1, r5
 80045dc:	0022      	movs	r2, r4
 80045de:	0030      	movs	r0, r6
 80045e0:	f7ff f8ec 	bl	80037bc <__swbuf_r>
 80045e4:	0005      	movs	r5, r0
 80045e6:	e7e3      	b.n	80045b0 <_putc_r+0x50>
 80045e8:	08004a0c 	.word	0x08004a0c
 80045ec:	08004a2c 	.word	0x08004a2c
 80045f0:	080049ec 	.word	0x080049ec

080045f4 <_sbrk_r>:
 80045f4:	2300      	movs	r3, #0
 80045f6:	b570      	push	{r4, r5, r6, lr}
 80045f8:	4d06      	ldr	r5, [pc, #24]	; (8004614 <_sbrk_r+0x20>)
 80045fa:	0004      	movs	r4, r0
 80045fc:	0008      	movs	r0, r1
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	f7fc fd78 	bl	80010f4 <_sbrk>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d103      	bne.n	8004610 <_sbrk_r+0x1c>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d000      	beq.n	8004610 <_sbrk_r+0x1c>
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	20000328 	.word	0x20000328

08004618 <__sread>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	000c      	movs	r4, r1
 800461c:	250e      	movs	r5, #14
 800461e:	5f49      	ldrsh	r1, [r1, r5]
 8004620:	f000 f8c0 	bl	80047a4 <_read_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	db03      	blt.n	8004630 <__sread+0x18>
 8004628:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800462a:	181b      	adds	r3, r3, r0
 800462c:	6563      	str	r3, [r4, #84]	; 0x54
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	4a02      	ldr	r2, [pc, #8]	; (800463c <__sread+0x24>)
 8004634:	4013      	ands	r3, r2
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	e7f9      	b.n	800462e <__sread+0x16>
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	ffffefff 	.word	0xffffefff

08004640 <__swrite>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	001f      	movs	r7, r3
 8004644:	898b      	ldrh	r3, [r1, #12]
 8004646:	0005      	movs	r5, r0
 8004648:	000c      	movs	r4, r1
 800464a:	0016      	movs	r6, r2
 800464c:	05db      	lsls	r3, r3, #23
 800464e:	d505      	bpl.n	800465c <__swrite+0x1c>
 8004650:	230e      	movs	r3, #14
 8004652:	5ec9      	ldrsh	r1, [r1, r3]
 8004654:	2200      	movs	r2, #0
 8004656:	2302      	movs	r3, #2
 8004658:	f000 f874 	bl	8004744 <_lseek_r>
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <__swrite+0x34>)
 8004660:	0028      	movs	r0, r5
 8004662:	4013      	ands	r3, r2
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	0032      	movs	r2, r6
 8004668:	230e      	movs	r3, #14
 800466a:	5ee1      	ldrsh	r1, [r4, r3]
 800466c:	003b      	movs	r3, r7
 800466e:	f000 f81f 	bl	80046b0 <_write_r>
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004674:	ffffefff 	.word	0xffffefff

08004678 <__sseek>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	000c      	movs	r4, r1
 800467c:	250e      	movs	r5, #14
 800467e:	5f49      	ldrsh	r1, [r1, r5]
 8004680:	f000 f860 	bl	8004744 <_lseek_r>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	1c42      	adds	r2, r0, #1
 8004688:	d103      	bne.n	8004692 <__sseek+0x1a>
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <__sseek+0x28>)
 800468c:	4013      	ands	r3, r2
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	0152      	lsls	r2, r2, #5
 8004696:	4313      	orrs	r3, r2
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	6560      	str	r0, [r4, #84]	; 0x54
 800469c:	e7f8      	b.n	8004690 <__sseek+0x18>
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	ffffefff 	.word	0xffffefff

080046a4 <__sclose>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	230e      	movs	r3, #14
 80046a8:	5ec9      	ldrsh	r1, [r1, r3]
 80046aa:	f000 f815 	bl	80046d8 <_close_r>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <_write_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	0004      	movs	r4, r0
 80046b4:	0008      	movs	r0, r1
 80046b6:	0011      	movs	r1, r2
 80046b8:	001a      	movs	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	4d05      	ldr	r5, [pc, #20]	; (80046d4 <_write_r+0x24>)
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc fcfe 	bl	80010c0 <_write>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d103      	bne.n	80046d0 <_write_r+0x20>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d000      	beq.n	80046d0 <_write_r+0x20>
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	20000328 	.word	0x20000328

080046d8 <_close_r>:
 80046d8:	2300      	movs	r3, #0
 80046da:	b570      	push	{r4, r5, r6, lr}
 80046dc:	4d06      	ldr	r5, [pc, #24]	; (80046f8 <_close_r+0x20>)
 80046de:	0004      	movs	r4, r0
 80046e0:	0008      	movs	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fc fcf9 	bl	80010da <_close>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d103      	bne.n	80046f4 <_close_r+0x1c>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d000      	beq.n	80046f4 <_close_r+0x1c>
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20000328 	.word	0x20000328

080046fc <_fstat_r>:
 80046fc:	2300      	movs	r3, #0
 80046fe:	b570      	push	{r4, r5, r6, lr}
 8004700:	4d06      	ldr	r5, [pc, #24]	; (800471c <_fstat_r+0x20>)
 8004702:	0004      	movs	r4, r0
 8004704:	0008      	movs	r0, r1
 8004706:	0011      	movs	r1, r2
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	f7fc fce9 	bl	80010e0 <_fstat>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	d103      	bne.n	800471a <_fstat_r+0x1e>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d000      	beq.n	800471a <_fstat_r+0x1e>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	20000328 	.word	0x20000328

08004720 <_isatty_r>:
 8004720:	2300      	movs	r3, #0
 8004722:	b570      	push	{r4, r5, r6, lr}
 8004724:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_isatty_r+0x20>)
 8004726:	0004      	movs	r4, r0
 8004728:	0008      	movs	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fc fcdd 	bl	80010ea <_isatty>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d103      	bne.n	800473c <_isatty_r+0x1c>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d000      	beq.n	800473c <_isatty_r+0x1c>
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	20000328 	.word	0x20000328

08004744 <_lseek_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	0004      	movs	r4, r0
 8004748:	0008      	movs	r0, r1
 800474a:	0011      	movs	r1, r2
 800474c:	001a      	movs	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	4d05      	ldr	r5, [pc, #20]	; (8004768 <_lseek_r+0x24>)
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc fccb 	bl	80010ee <_lseek>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d103      	bne.n	8004764 <_lseek_r+0x20>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d000      	beq.n	8004764 <_lseek_r+0x20>
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000328 	.word	0x20000328

0800476c <memchr>:
 800476c:	b2c9      	uxtb	r1, r1
 800476e:	1882      	adds	r2, r0, r2
 8004770:	4290      	cmp	r0, r2
 8004772:	d101      	bne.n	8004778 <memchr+0xc>
 8004774:	2000      	movs	r0, #0
 8004776:	4770      	bx	lr
 8004778:	7803      	ldrb	r3, [r0, #0]
 800477a:	428b      	cmp	r3, r1
 800477c:	d0fb      	beq.n	8004776 <memchr+0xa>
 800477e:	3001      	adds	r0, #1
 8004780:	e7f6      	b.n	8004770 <memchr+0x4>
	...

08004784 <__malloc_lock>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4802      	ldr	r0, [pc, #8]	; (8004790 <__malloc_lock+0xc>)
 8004788:	f7ff fab5 	bl	8003cf6 <__retarget_lock_acquire_recursive>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	2000031c 	.word	0x2000031c

08004794 <__malloc_unlock>:
 8004794:	b510      	push	{r4, lr}
 8004796:	4802      	ldr	r0, [pc, #8]	; (80047a0 <__malloc_unlock+0xc>)
 8004798:	f7ff faae 	bl	8003cf8 <__retarget_lock_release_recursive>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	2000031c 	.word	0x2000031c

080047a4 <_read_r>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	0004      	movs	r4, r0
 80047a8:	0008      	movs	r0, r1
 80047aa:	0011      	movs	r1, r2
 80047ac:	001a      	movs	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	4d05      	ldr	r5, [pc, #20]	; (80047c8 <_read_r+0x24>)
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc fc77 	bl	80010a6 <_read>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d103      	bne.n	80047c4 <_read_r+0x20>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d000      	beq.n	80047c4 <_read_r+0x20>
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000328 	.word	0x20000328

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
